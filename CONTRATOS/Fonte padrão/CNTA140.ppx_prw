#line 1 "C:\TOTVS11\Microsiga\Protheus\include\CNTA140.ch"
#line 2 "X:\Usuários\Gilson Lima\Documents\_TOTVS\_Projetos\COHAPAR\fontes_fsw\CONTRATOS\Fonte padrão\CNTA140.prw"
#line 1 "C:\TOTVS11\Microsiga\Protheus\include\Protheus.ch"
#line 1 "C:\TOTVS11\Microsiga\Protheus\include\Dialog.ch"
#line 28 "Protheus.ch"
#line 1 "C:\TOTVS11\Microsiga\Protheus\include\Font.ch"
#line 29 "Protheus.ch"
#line 1 "C:\TOTVS11\Microsiga\Protheus\include\PTMenu.ch"
#line 31 "Protheus.ch"
#line 1 "C:\TOTVS11\Microsiga\Protheus\include\Print.ch"
#line 33 "Protheus.ch"
#line 1 "C:\TOTVS11\Microsiga\Protheus\include\Colors.ch"
#line 35 "Protheus.ch"
#line 1 "C:\TOTVS11\Microsiga\Protheus\include\Folder.ch"
#line 37 "Protheus.ch"
#line 1 "C:\TOTVS11\Microsiga\Protheus\include\msobject.ch"
#line 38 "Protheus.ch"
#line 1 "C:\TOTVS11\Microsiga\Protheus\include\VKey.ch"
#line 42 "Protheus.ch"
#line 1 "C:\TOTVS11\Microsiga\Protheus\include\WinApi.ch"
#line 44 "Protheus.ch"
#line 1 "C:\TOTVS11\Microsiga\Protheus\include\FWCommand.ch"
#line 47 "Protheus.ch"
#line 1 "C:\TOTVS11\Microsiga\Protheus\include\FWCSS.CH"
#line 50 "Protheus.ch"
#line 3 "X:\Usuários\Gilson Lima\Documents\_TOTVS\_Projetos\COHAPAR\fontes_fsw\CONTRATOS\Fonte padrão\CNTA140.prw"
#line 1 "C:\TOTVS11\Microsiga\Protheus\include\ApWizard.ch"
#line 5 "X:\Usuários\Gilson Lima\Documents\_TOTVS\_Projetos\COHAPAR\fontes_fsw\CONTRATOS\Fonte padrão\CNTA140.prw"































































Function CNTA140()









Local aCores := {	{ "Alltrim(CN9->CN9_SITUAC) == '01'", "BR_VERMELHO"},						{ "Alltrim(CN9->CN9_SITUAC) == '02'", "BR_AMARELO"	},						{ "Alltrim(CN9->CN9_SITUAC) == '03'", "BR_AZUL"		},						{ "Alltrim(CN9->CN9_SITUAC) == '04'", "BR_LARANJA"	},						{ "Alltrim(CN9->CN9_SITUAC) == '05'", "BR_VERDE"	},						{ "Alltrim(CN9->CN9_SITUAC) == '06'", "BR_CINZA"	},						{ "Alltrim(CN9->CN9_SITUAC) == '07'", "BR_MARRON"	},						{ "Alltrim(CN9->CN9_SITUAC) == '08'", "BR_PRETO"	},						{ "Alltrim(CN9->CN9_SITUAC) == '09'", "BR_PINK"		},						{ "Alltrim(CN9->CN9_SITUAC) == '10'", "BR_BRANCO"	}}
Local aIndexCN9 := {}
Local cFiltro   := ""
Local cCn140Fil := ""
Local cFilRev   := ""

PRIVATE cCadastro	:= OemToAnsi(If( cPaisLoc $ "ANG|PTG", "Revisão De Contratos", "Revisão de Contratos" ))
PRIVATE aRotina 	:= MenuDef()
Private bFiltraBrw  := {|| Nil }




If CNS->(FieldPos("CNS_ITOR")) == 0
	Final(OemtoAnsi(STR0138))
Endif





AjustaSX1()




CN140AjSX7()




If ExistBlock("CN140FIL")
	cCn140Fil := ExecBlock("CN140FIL", .F. , .F. )
	If ( ValType(cCn140Fil) == "C" ) .And.  !Empty(cCn140Fil)
		cFiltro := cCn140Fil
	EndIf
Else
	cFilRev := "(CN9_SITUAC='05' Or CN9_SITUAC='06' Or CN9_SITUAC='09')"
EndIf

If !Empty(cFiltro)
	bFiltraBrw := {|| FilBrowse("CN9",@aIndexCN9,@cFiltro) }
	Eval(bFiltraBrw)
EndIf

mBrowse(6,1,22,75,"CN9",,,,,,aCores,,,,,,,,cFilRev)
Return



















Function CN140Manut(cAlias,nReg,nOpc)

Local cCodTR  := Space(TamSX3("CN0_CODIGO")[1])
Local cDescTr := ""
Local cSaldo  := "Redistribuir Saldos"
Local lCronog := .F. 
Local lAltVlr := .F. 
Local lAltVig := .F. 


Local oRadio
Local oGrRad01


Local cRevisa := ""
Local cNRevisa:= ""


Local cCodPr  := Space(TamSX3("CN2_CODIGO")[1])
Local cDescPr := ""
Local dDtRein := CTOD("  /  /  ")


Local dDtReaj := dDataBase
Local dDtRefe := dDataBase


Local aPlan := {}
Local aAditPlan := {}
Local aAditQtd  := {}


Local cClaus := ""
Local oClaus


Local oPlan
Local cPlan     := ""
Local cPlanAtu  := ""

Local aItens    := {}
Local aItensCtb := {}
Local aCpoCNB   := {}
Local aColsIt   := {}
Local aCpoNH    := {"CNB_NUMERO","CNB_REVISA","CNB_OBS","CNB_DTANIV","CNB_CONORC","CNB_CONTRA","CNB_DTCAD","CNB_DTPREV","CNB_SLDMED","CNB_PERC","CNB_RATEIO","CNB_TIPO","CNB_ITSOMA","CNB_VLRGL","CNB_PERCAL","CNB_FILHO","CNB_NUMSC","CNB_ITEMSC","CNB_QTDSOL","CNB_VLTOTR","CNB_QTREAD","CNB_VLREAD","CNB_VLRDGL"}
Local aCpoAlt   := {}
Local aAlterCNB := {}
Local aNalterCNB:= {"CNB_PRODUT","CNB_UM","CNB_QUANT","CNB_VLUNIT","CNB_VLTOT","CNB_DESC","CNB_DESCRI","CNB_PRCORI","CNB_QTDORI","CNB_QTRDAC","CNB_QTRDRZ","CNB_CONTA"}
Local aParAnt	:= {}
Local aParVlR	:= {}

Local nPosDesc
Local nPosVDes
Local nPosODes
Local nPosOVDe


Local oArrasto
Local oDist
Local lDist
Local lArrasto
Local aTotCont   := {}
Local nParcel    := 0
Local nSaldPlan  := 0
Local nSaldCont  := 0
Local nPos
Local cCron
Local cCronO


Local aCpoCNW  := {"CNW_DTPREV","CNW_VLPREV","CNW_HIST"}
Local aTotCtb  := {}
Local cCtb     := ""
Local cCtbO    := ""


Local cJust := ""
Local cDescrVig := ""
Local oMemo
Local dFContra := dDataBase
Local nValor   := 0
Local nSaldo   := 0
Local nVlOri   := 0


Local aHeadParc := {}
Local aColsParc := {}




















Local aFscVl    := {}

Local oBtnFsc
Local oBtnNPla
Local lCN140NPla := ExistBlock("CN140NPLA")


Private cContra   := ""
Private cTpCron
Private cTpCronCtb
Private cTpRev
Private cEspc
Private cTipoCtr
Private cEspec
Private cCronog
Private cNuncron
Private cCtbCron
Private cIndAtu   := Space(Len(CN9->CN9_INDICE))
Private cIndNovo  := Space(Len(CN9->CN9_INDICE))
Private aHdFor    := {}
Private aItFor    := {}

Private lRevisad  := .F. 
Private lMedeve   := .F. 
Private lFisico   := .F. 
Private lContab   := .F. 
Private lAltPar   := .F. 

Private oOk       := LoadBitmap( GetResources(), "LBTIK" )
Private oNo       := LoadBitmap( GetResources(), "LBNO" )

Private nParcelas := 0
Private nRevRtp   := 0

Private aParcelas := {}
Private aCron     := {}
Private aCronCtb  := {}
Private aHeaderCt := {}
Private aHeader   := {}
Private aParcDelat:= {}
Private aTpCron   := {}
Private aHeaderIt := {}
Private aHeaderOb := {}

Private lTpCron   := .T. 
Private lMotREvOk := .T. 
Private lFixo     := .T. 
Private lVlPrv    := .T. 

Private dDtPrev




Private aStruCNV  := CNV->(dbStruct())
Private cArqCNV   := ""
Private oCtbCron
Private oTpCron
Private oTpCronCtb

cArqCNV := CriaTrab(aStruCNV)
dbUseArea( .T. ,,cArqCNV,"TRBCNV", .F. , .F. )

Private aStruCNW  := CNW->(dbStruct())
Private cArqCNW   := ""
cArqCNW := CriaTrab(aStruCNW)
dbUseArea( .T. ,,cArqCNW,"TRBCNW", .F. , .F. )



Private aStruCN9  := CN9->(dbStruct())
Private cArqCN9   := ""
Private oBrowse
Private cRevAtu := cRevisa

cArqCN9 := CriaTrab(aStruCN9)
dbUseArea( .T. ,,cArqCN9,"TRBCN9", .F. , .F. )


Private aStruCNA  := CNA->(dbStruct())
Private cArqCNA   := ""
Private oBrowse2

cArqCNA := CriaTrab(aStruCNA)
dbUseArea( .T. ,,cArqCNA,"TRBCNA", .F. , .F. )


Private oGetDad1
Private cModo
Private oGrpPlO
Private oVlPOri
Private oGrpPlA
Private oVlPAtu
Private nVlPAtu := 0


Private aStruCNF  := CNF->(dbStruct())
Private cArqCNF   := ""
Private oBrowse4
Private oGetDados
Private oTotCronog
Private oSaldDist
Private oSaldCont
Private oSaldPlan
Private oTotPlan
Private dFCronog
Private oCron
Private nVgAdit := 0


Private nTotPlan   := 0
Private nTotCronog := 0
Private aItVl      := {}
Private cCCusto
Private cItemCt
Private cClVl


Private oGetCtb


Private aUnVig  := {"Dias","Meses","Anos","Indeterminada"}
Private oUnVig


Private oUltimoDia:= NIL
Private lUltimoDia:= .F. 

If !Empty(CNB->(FieldPos("CNB_TE")))
	aAdd(aNalterCNB,"CNB_TE")
EndIf

If !Empty(CNB->(FieldPos("CNB_TS")))
	aAdd(aNalterCNB,"CNB_TS")
EndIf

aAdd(aNalterCNB,"")

cArqCNF := CriaTrab(aStruCNF)
dbUseArea( .T. ,,cArqCNF,"TRBCNF", .F. , .F. )




dbSelectArea("SX3")
dbSetOrder(1)
If dbSeek("CNB", .F. )
	while !Eof() .And. SX3->X3_ARQUIVO=="CNB"
		If ( X3USO(SX3->X3_USADO)) .And.  (aScan(aCpoNH,{|x| x == Alltrim(SX3->X3_CAMPO)}) = 0) .And.  cNivel >= SX3->X3_NIVEL









			aAdd(aHeaderIt,{AllTrim(X3Titulo()), AllTrim(SX3->X3_CAMPO), SX3->X3_PICTURE, SX3->X3_TAMANHO, SX3->X3_DECIMAL, SX3->X3_VALID, SX3->X3_USADO, SX3->X3_TIPO, SX3->X3_F3, SX3->X3_CONTEXT})



			Aadd(aHeaderOb,{AllTrim(X3Titulo()), AllTrim(SX3->X3_CAMPO), SX3->X3_OBRIGAT})
		EndIf

		If SX3->X3_VISUAL == "A" .And.  aScan(aNalterCNB,AllTrim(SX3->X3_CAMPO)) == 0
			aAdd(aAlterCNB,SX3->X3_CAMPO)
		EndIf

		dbSkip()
	EndDo
EndIf


dbSelectArea("CN9")
dbgoto(nReg)
lFisico := ((CN1->(FieldPos("CN1_CROFIS")) > 0) .And.  Posicione("CN1",1,xFilial("CN1")+CN9->CN9_TPCTO,"CN1_CROFIS") == "1")
If lFisico
	cSaldo := STR0153
EndIf


nPosDesc := aScan(aHeaderIt,{|x| x[2] == "CNB_DESC"})
nPosVDes := aScan(aHeaderIt,{|x| x[2] == "CNB_VLDESC"})
nPosODes := aScan(aHeaderIt,{|x| x[2] == "CNB_DESC"})
nPosOVDe := aScan(aHeaderIt,{|x| x[2] == "CNB_VLDESC"})


aHeaderIt[nPosOVDe][2] := "CNBVLDESC"


aHeaderIt[nPosODes][2] := "CNBDESC"


If FindFunction("cn200MultT")


	aAdd(aHeaderIt,{If( cPaisLoc $ "ANG|PTG", "Novo desconto %", "Novo Desconto %" ),"CNBNDESC",aHeaderIt[nPosDesc][3],							aHeaderIt[nPosDesc][4],aHeaderIt[nPosDesc][5],"CN140VldDesc().And.cn200MultT()",aHeaderIt[nPosDesc][7], aHeaderIt[nPosDesc][8],aHeaderIt[nPosDesc][9],aHeaderIt[nPosDesc][10],""})
Else


	aAdd(aHeaderIt,{If( cPaisLoc $ "ANG|PTG", "Novo desconto %", "Novo Desconto %" ),"CNBNDESC",aHeaderIt[nPosDesc][3],							aHeaderIt[nPosDesc][4],aHeaderIt[nPosDesc][5],"CN140VldDesc()",aHeaderIt[nPosDesc][7], aHeaderIt[nPosDesc][8],aHeaderIt[nPosDesc][9],aHeaderIt[nPosDesc][10],""})
EndIf




aAdd(aHeaderIt,{If( cPaisLoc $ "ANG|PTG", "Novo Valor De Desconto", "Novo Valor Desconto" ),"CNBNVLDESC",aHeaderIt[nPosVDes][3],						aHeaderIt[nPosVDes][4],aHeaderIt[nPosVDes][5],"",aHeaderIt[nPosVDes][7], aHeaderIt[nPosVDes][8],aHeaderIt[nPosVDes][9],aHeaderIt[nPosVDes][10],""})




ADHeadRec("CNB",aHeaderIt)




PcoIniLan("000357")









oWizard = APWizard():New( If(cPaisLoc$"ANG|PTG","Revisões De Contrato","Revisões de Contrato"),, If(cPaisLoc$"ANG|PTG","Assistente - Manutenção De Revisões","Assistente - Manutenção de Revisões"), OemToAnsi("Assistente responsável pela configuração das revisões de contrato")+Chr(13)+Chr(10)+Chr(13)+Chr(10)+OemToAnsi(If(cPaisLoc$"ANG|PTG","Clicar em avançar e iniciar o processo","Clique em avancar e inicie o processo")), {|| .T. }, {|| .T. },.T., , ,.F. )








oWizard:NewPanel( If(cPaisLoc$"ANG|PTG","Tipos De Revisão","Tipos de Revisão"), If(cPaisLoc$"ANG|PTG","Seleccionar O Tipo De Revisão","Selecione o tipo de Revisão"),, {||CN140VlP2(@cCodTR,nReg)}, {|| .T. },.T., )

 TSay():New( 030, 010,{||  "Código"},oWizard:oMPanel[2],,,.F.,.F.,.F.,.T.,,,,,.F.,.F.,.F.,.F.,.F.,.F. )
 TGet():New( 027, 035, { | u | If( PCount() == 0, cCodTR, cCodTR := u ) },oWizard:oMPanel[2],,, PesqPict("CN0","CN0_CODIGO"),{||  CN140VldCodTr(cCodTR,@cDescTR,@cTipoCtr)},,,,.F.,,.T.,,.F.,,.F.,.F.,,.F.,.F. ,"CN0","cCodTR",,,, )

 TSay():New( 030, 75,{||  "Descrição"},oWizard:oMPanel[2],,,.F.,.F.,.F.,.T.,,,,,.F.,.F.,.F.,.F.,.F.,.F. )
 TGet():New( 027, 115, { | u | If( PCount() == 0, cDescTR, cDescTR := u ) },oWizard:oMPanel[2], 150, 0, PesqPict("CN0","CN0_DESCRI"),,,,,.F.,,.T.,,.F.,{||  .F. },.F.,.F.,,.F.,.F. ,,"cDescTR",,,, )









oWizard:NewPanel( "Contratos", If(cPaisLoc$"ANG|PTG","Seleccionar O Contrato","Selecione o Contrato"),, {||CN140VlP3(@cCodTR,@cContra,@cRevisa,@cNrevisa,cDescTR,@dFContra,@lCronog,@lAltPar,@oTpCron,@nVgAdit,@nValor,@lAltVlr,@lAltVig,@nSaldo,@nVlOri)}, {|| .T. },.T., )


oBrowse	  := TWBrowse():New( 000, 000, __DlgWidth(oWizard:oMPanel[3]), __DlgHeight(oWizard:oMPanel[3]),, { "",RetTitle("CN9_NUMERO"),RetTitle("CN9_REVISA"),RetTitle("CN9_DTINIC"),RetTitle("CN9_DTFIM"),RetTitle("CN9_SALDO") }, { 030,090,030,030,030,030,030,030 }, oWizard:oMPanel[3],,,,,,,,,,,,,"TRBCN9", .T.  )
oBrowse:bLine := {|| { If((cContra==TRBCN9->CN9_NUMERO .And.  cRevisa==TRBCN9->CN9_REVISA),oOk,oNo),TRBCN9->CN9_NUMERO,TRBCN9->CN9_REVISA,TRBCN9->CN9_DTINIC,TRBCN9->CN9_DTFIM,Transform(TRBCN9->CN9_SALDO,PesqPict("CN9","CN9_SALDO"))}}
oBrowse:bLDblClick := {|| CN140MkContra(@cContra,@cRevisa,@cClaus,@cCodPr,@cDescPr,@dDtRein,@dDtReaj,@cJust), oBrowse:Refresh() }




If ExistBlock("CN140CAN")
	ExecBlock("CN140CAN", .F. , .F. )
EndIf









oWizard:NewPanel( "Processo", If(cPaisLoc$"ANG|PTG","Seleccionar o andamento da revisão","Selecione o andamento da revisao"),, {||CN140VlP4(@cCodTR,cContra,cRevisa,@cClaus,@cCodPr,@cDescPr,@dDtRein,@dDtReaj,@cJust,@lCronog,@lAltPar,@dFContra,@nValor)}, {|| .T. },.T., )

 TSay():New( 030, 010,{||  "Contrato"},oWizard:oMPanel[4],,,.F.,.F.,.F.,.T.,,,,,.F.,.F.,.F.,.F.,.F.,.F. )
 TGet():New( 027, 045, { | u | If( PCount() == 0, cContra, cContra := u ) },oWizard:oMPanel[4], 55, 5, PesqPict("CN9","CN9_NUMERO"),,,,,.F.,,.T.,,.F.,{||  .F. },.F.,.F.,,.F.,.F. ,,"cContra",,,, )

 TSay():New( 030, 105,{||  If(cPaisLoc$"ANG|PTG","Revisão Actual","Revisão Atual")},oWizard:oMPanel[4],,,.F.,.F.,.F.,.T.,,,,,.F.,.F.,.F.,.F.,.F.,.F. )
 TGet():New( 027, 145, { | u | If( PCount() == 0, Posicione("CN9",1,xFilial("CN9")+cContra+cRevisa,"CN9_REVATU"), Posicione("CN9",1,xFilial("CN9")+cContra+cRevisa,"CN9_REVATU") := u ) },oWizard:oMPanel[4], 20, 5, PesqPict("CN9","CN9_REVISA"),,,,,.F.,,.T.,,.F.,{||  .F. },.F.,.F.,,.F.,.F. ,,'Posicione("CN9",1,xFilial("CN9")+cContra+cRevisa,"CN9_REVATU")',,,, )

 TSay():New( 045, 010,{||  If(cPaisLoc$"ANG|PTG","Tipo De Revisão","Tipo Revisão")},oWizard:oMPanel[4],,,.F.,.F.,.F.,.T.,,,,,.F.,.F.,.F.,.F.,.F.,.F. )
 TGet():New( 042, 045, { | u | If( PCount() == 0, Posicione("CN0",1,xFilial("CN0")+cCodTR,"CN0_DESCRI"), Posicione("CN0",1,xFilial("CN0")+cCodTR,"CN0_DESCRI") := u ) },oWizard:oMPanel[4], 150, 5,,,,,,.F.,,.T.,,.F.,{||  .F. },.F.,.F.,,.F.,.F. ,,'Posicione("CN0",1,xFilial("CN0")+cCodTR,"CN0_DESCRI")',,,, )

 oGrRad01 := TRadMenu():New( 065, 045, { "Prosseguir Revisão","Reiniciar Revisão","Excluir Revisão"},{ | u | If( PCount() == 0, nRevRtp, nRevRtp := u ) }, oWizard:oMPanel[4],,,,,,.F.,, 70, 10,,.F.,.F.,.T. )









oWizard:NewPanel( "Paralisação", If(cPaisLoc$"ANG|PTG","Indique o motivo e a data prevista de reinício","Informe o motivo e a data prevista de reinício"), {||CN140BckPn(cCodTR,lCronog)}, {||CN140VlP5(cCodPr,dDtRein)}, {|| .T. },.T., )

 TSay():New( 030, 010,{||  "Motivo"},oWizard:oMPanel[5],,,.F.,.F.,.F.,.T.,,,,,.F.,.F.,.F.,.F.,.F.,.F. )
 TGet():New( 027, 045, { | u | If( PCount() == 0, cCodPr, cCodPr := u ) },oWizard:oMPanel[5],,, PesqPict("CN2","CN2_CODIGO"),{||  CN140VldMPar(cCodPr,@cDescPr)},,,,.F.,,.T.,,.F.,,.F.,.F.,,.F.,.F. ,"CN2","cCodPr",,,, )

 TSay():New( 045, 010,{||  "Descrição"},oWizard:oMPanel[5],,,.F.,.F.,.F.,.T.,,,,,.F.,.F.,.F.,.F.,.F.,.F. )
 TGet():New( 042, 045, { | u | If( PCount() == 0, cDescPr, cDescPr := u ) },oWizard:oMPanel[5], 200, 0,,,,,,.F.,,.T.,,.F.,{||  .F. },.F.,.F.,,.F.,.F. ,,"cDescPr",,,, )

 TSay():New( 060, 010,{||  If(cPaisLoc$"ANG|PTG","Previsão De Reinício","Previsão de Reinício")},oWizard:oMPanel[5],,,.F.,.F.,.F.,.T.,,,,,.F.,.F.,.F.,.F.,.F.,.F. )
 TGet():New( 057, 065, { | u | If( PCount() == 0, dDtRein, dDtRein := u ) },oWizard:oMPanel[5],,,,{||  dDtRein>dDataBase},,,,.F.,,.T.,,.F.,,.F.,.F.,,.F.,.F. ,,"dDtRein",,,, )









oWizard:NewPanel( "Reajuste", If(cPaisLoc$"ANG|PTG","Indicar a data de início do reajuste","Informe a data de inicio do reajuste"), {||CN140BckPn(cCodTR,lCronog)}, {||CN140VlP6(dDtReaj,dDtRefe)}, {|| .T. },.T., )

 TSay():New( 030, 010,{||  "Data Inicial"},oWizard:oMPanel[6],,,.F.,.F.,.F.,.T.,,,,,.F.,.F.,.F.,.F.,.F.,.F. )
 TGet():New( 027, 053, { | u | If( PCount() == 0, dDtReaj, dDtReaj := u ) },oWizard:oMPanel[6],,,,{||  CN140VdRea(dDtReaj)},,,,.F.,,.T.,,.F.,,.F.,.F.,,.F.,.F. ,,"dDtReaj",,,, )

If CN9->(FieldPos("CN9_DREFRJ")) > 0
	 TSay():New( 055, 010,{||  STR0154},oWizard:oMPanel[6],,,.F.,.F.,.F.,.T.,,,,,.F.,.F.,.F.,.F.,.F.,.F. )
	 TGet():New( 052, 053, { | u | If( PCount() == 0, dDtRefe, dDtRefe := u ) },oWizard:oMPanel[6],,,,{||  Empty(dDtRefe) .Or. CN150VdApr(dDtRefe,dDtReaj,CN9->CN9_INDICE)},,,,.F.,,.T.,,.F.,,.F.,.F.,,.F.,.F. ,,"dDtRefe",,,, )
EndIf









oWizard:NewPanel( If(cPaisLoc$"ANG|PTG","Alteração De Cláusula","Alteração de Clausula"), If(cPaisLoc$"ANG|PTG","Indique as cláusulas alteradas","Informe as clausulas alteradas"), {||CN140BckPn(cCodTR,lCronog)}, {||CN140VlP7(cClaus)}, {|| .T. },.T., )

 TSay():New( 030, 010,{||  If(cPaisLoc$"ANG|PTG","Cláusula","Clausula")},oWizard:oMPanel[7],,,.F.,.F.,.F.,.T.,,,,,.F.,.F.,.F.,.F.,.F.,.F. )
oClaus := tMultiget():New(030,050,{|u| if(Pcount()>0,cClaus:=u,cClaus)},oWizard:oMPanel[7],200,50,,,,,, .T. )









oWizard:NewPanel( If(cPaisLoc$"ANG|PTG","Folha de cálculos","Planilhas"), If(cPaisLoc$"ANG|PTG","Seleccionar as folha de cálculos","Selecione as planilhas"), {||CN140BckPn(cCodTR,lCronog,,aPlan,@cPlanAtu)}, {||CN140VlP8(cContra,If((lRevisad .And. (nRevRtp==1)),cNrevisa,cRevisa),cCodTr,aPlan,aItens,aHeaderIt,aColsIt,aCpoAlt,oPlan,aAlterCNB)}, {|| .T. },.T., )



oBrowse2	  := TWBrowse():New( 000, 000, __DlgWidth(oWizard:oMPanel[8]),If(lCN140NPla, __DlgHeight(oWizard:oMPanel[8])-12,__DlgHeight(oWizard:oMPanel[8])),, { "",RetTitle("CNA_NUMERO"),RetTitle("CNA_DTINI"),RetTitle("CNA_VLTOT"),RetTitle("CNA_DTFIM"),"Forn./Cliente","Loja",RetTitle("CNA_CRONOG")}, { 030,090,030,030,030,030,030 }, oWizard:oMPanel[8],,,,,,,,,,,,,"TRBCNA", .T.  )
			oBrowse2:bLine := {|| { If(aScan(aPlan,{|x| x[1]==TRBCNA->CNA_NUMERO})>0,oOk,oNo),TRBCNA->CNA_NUMERO,TRBCNA->CNA_DTINI,Transform(TRBCNA->CNA_VLTOT,PesqPict("CNA","CNA_VLTOT")),TRBCNA->CNA_DTFIM,If(!Empty(TRBCNA->CNA_FORNEC),TRBCNA->CNA_FORNEC,TRBCNA->CNA_CLIENT),If(!Empty(TRBCNA->CNA_LJFORN),TRBCNA->CNA_LJFORN,TRBCNA->CNA_LOJACL),TRBCNA->CNA_CRONOG}}
			oBrowse2:bLDblClick := {|| CN140MkPlan(aPlan,TRBCNA->CNA_NUMERO,TRBCNA->CNA_VLTOT,TRBCNA->CNA_CRONOG), oBrowse2:Refresh(), If(len(aPlan)>0,( oPlan:aItems := CN140PlanCb(aPlan), oPlan:nAt := 1, cPlanAtu := oPlan:aItems[1]),)}

If lCN140NPla
	 oBtnNPla := TButton():New( 125, 001, OemToAnsi("Incluir"), oWizard:oMPanel[8],{||  ExecBlock("CN140NPla", .F. , .F. ,{cContra,If(lRevisad .And. nRevRtp==1,cNrevisa,cRevisa),nRevRtp})}, 29, 13,,,.F.,.T.,.F.,,.F.,,,.F. )
EndIf








oWizard:NewPanel( If(cPaisLoc$"ANG|PTG","Folha de cálculos","Planilhas"), "Itens", {||(Aviso("CNTA140","As alterações serão perdidas, deseja realmente voltar?",{"Não","Sim"})==2) .And. CN140BckPn(cCodTR,lCronog,,,@cPlanAtu)}, {||CN140LoadIt(cPlan,aItens,aPlan,@cPlanAtu,cCodTR) .And. CN140VLIT(aPlan,aHeaderIt,aItens) .And. CN140VlP9(cContra,cRevisa,cNRevisa,cCodTR,aAditPlan,aPlan,aHeaderIt,aItens,aAditQtd,@dFContra)},,.T., )

 TSay():New( 010, 001,{||  If(cPaisLoc$"ANG|PTG","Folha de cálculos","Planilhas")},oWizard:oMPanel[9],,,.F.,.F.,.F.,.T.,,,,,.F.,.F.,.F.,.F.,.F.,.F. )

 oPlan := TComboBox():New( 008, 026, { | u | If( PCount() == 0, cPlan, cPlan := u ) },, 40, 8, oWizard:oMPanel[9],,{|Self|(If(oWizard:NPanel==9,(If(CN140LoadIt(cPlan,aItens,aPlan,@cPlanAtu,cCodTR),(oGetDad1:nAt:=1,CN140ChgGet(Posicione("CN0",1,xFilial("CN0")+cCodTr,"CN0_TIPO"),aAlterCNB),oGetDad1:oBrowse:Refresh()),(cPlan:=cPlanAtu,oPlan:Refresh()))),))},,,,.T.,,,.F.,,.F.,,, ,"cPlan" )

If Posicione("CN1",1,xFilial("CN1")+CN9->CN9_TPCTO,"CN1_ESPCTR") == "2" .And.  AliasInDic("AGW") .And.  SuperGetMV("MV_CNINTFS", .F. , .F. ) .And.  FindFunction("CN200Loca")
	 oButAGW := TButton():New( 008, 230, "Local. Física", oWizard:oMPanel[9],{||  CN200Loca(cContra,cRevisa,TRBCNA->CNA_NUMERO,oGetDad1,aTail(aPlan[oPlan:nAt]),aPlan, .F. ,TRBCNA->CNA_CLIENT,TRBCNA->CNA_LOJACL)}, 50, 10,,,.F.,.T.,.F.,,.F.,,,.F. )
EndIf

 oGrpPlO := TGroup():New( 005, 090, 020, 180, "Valor Original", oWizard:oMPanel[9],,,.T., )
 oVlPOri := TSay():New( 010, 130,{||  0},oWizard:oMPanel[9],PesqPict("CNA","CNA_VLTOT"),,.F.,.F.,.F.,.T.,,, 50, 8,.F.,.F.,.F.,.F.,.F.,.F. )

 oGrpPlA := TGroup():New( 005, 190, 020, 280, If(cPaisLoc$"ANG|PTG","Valor Actual","Valor Atual"), oWizard:oMPanel[9],,,.T., )
 oVlPAtu := TSay():New( 010, 230,{||  nVlPAtu},oWizard:oMPanel[9],PesqPict("CNA","CNA_VLTOT"),,.F.,.F.,.F.,.T.,,, 50, 8,.F.,.F.,.F.,.F.,.F.,.F. )









oWizard:NewPanel( "Cronogramas - Alteração", If(cPaisLoc$"ANG|PTG","Seleccionar o cronograma e indicar os dados de alteração do cronograma","Selecione o cronograma e informe os dados de alteração do cronograma"), {||CN140BckPn(cCodTR,lCronog,aCron)}, {||CN140VlP10(@aParcelas,aTotCont,cContra,cRevisa,aCron,lArrasto,lDist,@oTpCron,nParcel,@cCronO,@dFContra,cCodTR,aAditPlan,@nVgAdit,aHeadParc,aColsParc,aFscVl,aAditQtd,aHeaderIT,aItens,oBtnFsc,aParAnt,aParVlR)}, {|| .T. },.T., )








oBrowse4 := TWBrowse():New( 000, 000, __DlgWidth(oWizard:oMPanel[10]), __DlgHeight(oWizard:oMPanel[10])-50,, { "",RetTitle("CNF_CONTRA"),RetTitle("CNF_REVISA"),RetTitle("CNF_NUMERO"),RetTitle("CNF_COMPET"),RetTitle("CNF_SALDO") }, { 050,050,050,050,050 }, oWizard:oMPanel[10], , , ,,,,,,,,,,"TRBCNF", .T.  )
oBrowse4:bLine := {|| { If(aScan(aCron,TRBCNF->CNF_NUMERO)>0,oOk,oNo), TRBCNF->CNF_CONTRA,TRBCNF->CNF_REVISA,TRBCNF->CNF_NUMERO,TRBCNF->CNF_COMPET,Transform(TRBCNF->CNF_SALDO,PesqPict("CNF","CNF_SALDO")) } }
oBrowse4:bLDblClick := {|| CN140MkCron(aCron,TRBCNF->CNF_NUMERO), oBrowse4:Refresh(),oCron:aItems := ASort(aCron), oCron:nAt := 1 }


 oUltimoDia := TCheckBox():New( 110, 030, STR0152,{ | u | If( PCount() == 0, lUltimoDia, lUltimoDia := u ) }, oWizard:oMPanel[10], 60, 09,,,,,,,.F.,.T.,,.F., )

 oArrasto := TCheckBox():New( 120, 030, "Arrasto",{ | u | If( PCount() == 0, lArrasto, lArrasto := u ) }, oWizard:oMPanel[10], 60, 09,,{|| ((oDist:lActive:=lArrasto))},,,,,.F.,.T.,,.F., )
 oDist := TCheckBox():New( 130, 030, "Redistribuir Saldos",{ | u | If( PCount() == 0, lDist, lDist := u ) }, oWizard:oMPanel[10], 60, 09,,,,,,,.F.,.T.,,.F.,{||  lArrasto} )

 TSay():New( 110, 140,{||  "Tipo"},oWizard:oMPanel[10],,,.F.,.F.,.F.,.T.,,,,,.F.,.F.,.F.,.F.,.F.,.F. )
 oTpCron := TComboBox():New( 110, 185, { | u | If( PCount() == 0, cTpCron, cTpCron := u ) },, 60, 5, oWizard:oMPanel[10],,{|Self|lTpCron:= .T. },,,,.T.,,,.F.,{||  lAltPar},.F.,,, ,"cTpCron" )

 TSay():New( 125, 140,{||  If(cPaisLoc$"ANG|PTG","Nº. De Parcelas","Nº. de Parcelas")},oWizard:oMPanel[10],,,.F.,.F.,.F.,.T.,,,,,.F.,.F.,.F.,.F.,.F.,.F. )
 TGet():New( 125, 185, { | u | If( PCount() == 0, nParcel, nParcel := u ) },oWizard:oMPanel[10], 60, 5, "999",,,,,.F.,,.T.,,.F.,{||  lAltPar},.F.,.F.,,.F.,.F. ,,"nParcel",,,, )









oWizard:NewPanel( "Cronogramas - Alteração", "Parcelas e confirmação do cronograma", {||CN140BckPn(cCodTR,lCronog,aCron,,,@cCron)}, {||CN140VlP11(cContra,cRevisa,cCron,@aParcelas,aCron,aTotCont,aFscVl,aColsParc,aHeadParc)}, {|| .T. },.T., )

 TSay():New( 010, 001,{||  "Cronogramas"},oWizard:oMPanel[11],,,.F.,.F.,.F.,.T.,,,,,.F.,.F.,.F.,.F.,.F.,.F. )
 oCron := TComboBox():New( 008, 036, { | u | If( PCount() == 0, cCron, cCron := u ) },, 40, 8, oWizard:oMPanel[11],,{|Self|If(oWizard:NPanel==11,CN140LoadPr(@cCron,@aParcelas,aCron,aTotCont,@cCronO,oCron,aHeadParc,aColsParc,aFscVl),)},,,,.T.,,,.F.,,.F.,,, ,"cCron" )

 oGroup := TGroup():New( 023, 005, 038, 090, If(cPaisLoc$"ANG|PTG","Montante da folha de cálculo ","Montante da Planilha "), oWizard:oMPanel[11],,,.T., )
 oTotPlan := TSay():New( 028, 040,{||  nTotPlan},oWizard:oMPanel[11],PesqPict("CNA","CNA_VLTOT"),,.F.,.F.,.F.,.T.,,,,,.F.,.F.,.F.,.F.,.F.,.F. )

 oGroup := TGroup():New( 023, 100, 038, 190, If(cPaisLoc$"ANG|PTG","Montante do cronograma ","Montante do Cronograma "), oWizard:oMPanel[11],,,.T., )
 oTotCronog := TSay():New( 028, 140,{||  nTotCronog},oWizard:oMPanel[11],PesqPict("CNF","CNF_VLPREV"),,.F.,.F.,.F.,.T.,,, 50, 8,.F.,.F.,.F.,.F.,.F.,.F. )

 oGroup := TGroup():New( 023, 200, 038, 285, If(cPaisLoc$"ANG|PTG","Saldo a distribuir ","Saldo a Distribuir "), oWizard:oMPanel[11],,,.T., )
 oSaldDist := TSay():New( 028, 240,{||  nTotPlan-nTotCronog},oWizard:oMPanel[11],PesqPict("CNA","CNA_VLTOT"),,.F.,.F.,.F.,.T.,,, 50, 8,.F.,.F.,.F.,.F.,.F.,.F. )

 oGroup := TGroup():New( 120, 005, 135, 090, If(cPaisLoc$"ANG|PTG","Saldo Do Contrato","Saldo do Contrato"), oWizard:oMPanel[11],,,.T., )
 oSaldCont := TSay():New( 125, 040,{||  nSaldCont},oWizard:oMPanel[11],PesqPict("CN9","CN9_VLATU"),,.F.,.F.,.F.,.T.,,, 50, 8,.F.,.F.,.F.,.F.,.F.,.F. )

 oGroup := TGroup():New( 120, 100, 135, 185, If(cPaisLoc$"ANG|PTG","Saldo Da Folha De Cálculo","Saldo da Planilha"), oWizard:oMPanel[11],,,.T., )
 oSaldPlan := TSay():New( 125, 140,{||  nSaldPlan},oWizard:oMPanel[11],PesqPict("CN9","CN9_VLATU"),,.F.,.F.,.F.,.T.,,, 50, 8,.F.,.F.,.F.,.F.,.F.,.F. )

 oBtnFsc := TButton():New( 120, 256, OemToAnsi("Físico"), oWizard:oMPanel[11],{||  {(nPos:=aScan(aCron,cCron),CN140Fisico(4,@aParcelas[nPos],oGetDados:nAt,aColsParc[nPos],aHeadParc,aFscVl[nPos],cCodTR),oGetDados:aCols:=aParcelas[nPos],CN110AtuVal(),oGetDados:oBrowse:Refresh(),aFscVl[nPos]:=aItVl)}}, 29, 13,,,.F.,.T.,.F.,,.F.,,,.F. )

If FindFunction("CN110ReSld") .And.  !lFisico
	 oBtlDSld := TButton():New( 122, 200, "Redistribuir", oWizard:oMPanel[11],{||  CN110ReSld(aParAnt[aScan(aParAnt,{|x|x[1]==cCron}),2],aParVlR[aScan(aParVlR,{|x|x[1]==cCron}),2])}, 40, 13,,,.F.,.T.,.F.,,.F.,,,.F. )
EndIf









oWizard:NewPanel( If(cPaisLoc$"ANG|PTG","Cronogramas Contabilísticos - Revisão","Cronogramas Contábeis - Revisão"), OemToAnsi("Não há contratos vigentes"), {||CN140BckPn(cCodTR,lCronog)}, {||CN140RvPlCt(@aCronCtb,@aItensCtb,cContra,If((lRevisad .And. (nRevRtp==1)),cNrevisa,cRevisa),cNrevisa,aAditPlan,aCpoCNW,@nVgAdit,@dFContra,@cCtbO,aTotCtb)}, {|| .T. },.F., )

If(!Empty(cArqCNV))





	oBrowse5 := TWBrowse():New( 000, 000, __DlgWidth(oWizard:oMPanel[12])-1, __DlgHeight(oWizard:oMPanel[12])-60,, { "",RetTitle("CNV_NUMERO"),RetTitle("CNV_PLANIL"),RetTitle("CNV_CONTRA")}, { 050,050,050}, oWizard:oMPanel[12],,,,,,,,,,,,,"TRBCNV", .T. )
   oBrowse5:bLine := {|| {If(aScan(aCronCtb,TRBCNV->CNV_NUMERO)>0,oOk,oNo),TRBCNV->CNV_NUMERO,TRBCNV->CNV_PLANIL,TRBCNV->CNV_CONTRA} }
   oBrowse5:bLDblClick := {|| CN140MkCtbCron(aCronCtb,TRBCNV->CNV_NUMERO),oBrowse5:Refresh(),oCtbCron:aItems:=ASort(aCronCtb), oCtbCron:nAt := 1 }
EndIf

 TSay():New( 100, 140,{||  "Tipo"},oWizard:oMPanel[12],,,.F.,.F.,.F.,.T.,,,,,.F.,.F.,.F.,.F.,.F.,.F. )
 oTpCronCtb := TComboBox():New( 100, 185, { | u | If( PCount() == 0, cTpCronCtb, cTpCronCtb := u ) },, 60, 5, oWizard:oMPanel[12],,{|Self|lTpCron:= .T. },,,,.T.,,,.F.,{||  lAltPar},.F.,,, ,"cTpCronCtb" )
 TSay():New( 115, 140,{||  If(cPaisLoc$"ANG|PTG","Nº. De Parcelas","Nº. de Parcelas")},oWizard:oMPanel[12],,,.F.,.F.,.F.,.T.,,,,,.F.,.F.,.F.,.F.,.F.,.F. )
 TGet():New( 115, 185, { | u | If( PCount() == 0, nParcelas, nParcelas := u ) },oWizard:oMPanel[12], 60, 5, "999",,,,,.F.,,.T.,,.F.,{||  lAltPar},.F.,.F.,,.F.,.F. ,,"nParcelas",,,, )









oWizard:NewPanel( "Finalização", If(cPaisLoc$"ANG|PTG","Parcelas e confirmação do cronograma","Parcelas e Confirmação do cronograma"), {||CN140BckPn(cCodTR,lCronog)}, {||CN140VldCtb(cCtbCron,aCronCtb,aTotCtb,aItensCtb)}, {|| .T. },.F., )

 TSay():New( 005, 001,{||  "Cronogramas"},oWizard:oMPanel[13],,,.F.,.F.,.F.,.T.,,,,,.F.,.F.,.F.,.F.,.F.,.F. )
 oCtbCron := TComboBox():New( 005, 036, { | u | If( PCount() == 0, cCtbCron, cCtbCron := u ) },, 40, 8, oWizard:oMPanel[13],,{|Self|If(oWizard:NPanel==13,(CN140CtbLoad(@cCtbCron,@aItensCtb,@aCronCtb,aAditPlan,cContra,aCpoCNW,@cCtbO,oCtbCron,aTotCtb),CN140Get2Chg(aCpoCNW),oGetCtb:oBrowse:Refresh()),)},,,,.T.,,,.F.,,.F.,,, ,"cCtbCron" )

 oGroup := TGroup():New( 023, 001, 038, 085, If(cPaisLoc$"ANG|PTG","Montante da folha de cálculo ","Montante da Planilha "), oWizard:oMPanel[13],,,.T., )
 oTotPlan := TSay():New( 028, 040,{||  nTotPlan},oWizard:oMPanel[13],PesqPict("CNW","CNW_VLPREV"),,.F.,.F.,.F.,.T.,,,,,.F.,.F.,.F.,.F.,.F.,.F. )

 oGroup := TGroup():New( 023, 100, 038, 185, If(cPaisLoc$"ANG|PTG","Montante do cronograma ","Montante do Cronograma "), oWizard:oMPanel[13],,,.T., )
 oTotCronog := TSay():New( 028, 140,{||  nTotCronog},oWizard:oMPanel[13],PesqPict("CNW","CNW_VLPREV"),,.F.,.F.,.F.,.T.,,, 50, 8,.F.,.F.,.F.,.F.,.F.,.F. )

 oGroup := TGroup():New( 023, 200, 038, 275, If(cPaisLoc$"ANG|PTG","Saldo a distribuir ","Saldo a Distribuir "), oWizard:oMPanel[13],,,.T., )
 oSaldDist := TSay():New( 028, 235,{||  nTotPlan-nTotCronog},oWizard:oMPanel[13],PesqPict("CNW","CNW_VLPREV"),,.F.,.F.,.F.,.T.,,, 50, 8,.F.,.F.,.F.,.F.,.F.,.F. )









oWizard:NewPanel( STR0140, If(cPaisLoc$"ANG|PTG","Seleccionar o andamento da revisão","Selecione o andamento da revisao"), {||CN140Indice("3",cIndAtu,@cIndNovo)}, {||CN140Indice("2",cIndAtu,cIndNovo)},,.T., )

 TSay():New( 030, 010,{||  "Contrato"},oWizard:oMPanel[14],,,.F.,.F.,.F.,.T.,,,,,.F.,.F.,.F.,.F.,.F.,.F. )
 TGet():New( 027, 045, { | u | If( PCount() == 0, cContra, cContra := u ) },oWizard:oMPanel[14], 55, 5, PesqPict("CN9","CN9_NUMERO"),,,,,.F.,,.T.,,.F.,{||  .F. },.F.,.F.,,.F.,.F. ,,"cContra",,,, )

 TSay():New( 045, 010,{||  If(cPaisLoc$"ANG|PTG","Tipo De Revisão","Tipo Revisão")},oWizard:oMPanel[14],,,.F.,.F.,.F.,.T.,,,,,.F.,.F.,.F.,.F.,.F.,.F. )
 TGet():New( 042, 045, { | u | If( PCount() == 0, Posicione("CN0",1,xFilial("CN0")+cCodTR,"CN0_DESCRI"), Posicione("CN0",1,xFilial("CN0")+cCodTR,"CN0_DESCRI") := u ) },oWizard:oMPanel[14], 150, 5,,,,,,.F.,,.T.,,.F.,{||  .F. },.F.,.F.,,.F.,.F. ,,'Posicione("CN0",1,xFilial("CN0")+cCodTR,"CN0_DESCRI")',,,, )



 TSay():New( 060, 010,{||  STR0141},oWizard:oMPanel[14],,,.F.,.F.,.F.,.T.,,,,,.F.,.F.,.F.,.F.,.F.,.F. )
 TGet():New( 060, 045, { | u | If( PCount() == 0, cIndAtu, cIndAtu := u ) },oWizard:oMPanel[14],,, PesqPict("CN9","CN9_INDICE"),,,,,.F.,,.T.,,.F.,{||  .F. },.F.,.F.,,.F.,.F. ,,"cIndAtu",,,, )
 TGet():New( 060, 075, { | u | If( PCount() == 0, Posicione("CN6",1,xFilial("CN6")+cIndAtu,"CN6_DESCRI"), Posicione("CN6",1,xFilial("CN6")+cIndAtu,"CN6_DESCRI") := u ) },oWizard:oMPanel[14],,,,,,,,.F.,,.T.,,.F.,{||  .F. },.F.,.F.,,.F.,.F. ,,'Posicione("CN6",1,xFilial("CN6")+cIndAtu,"CN6_DESCRI")',,,, )

 TSay():New( 075, 010,{||  STR0142},oWizard:oMPanel[14],,,.F.,.F.,.F.,.T.,,,,,.F.,.F.,.F.,.F.,.F.,.F. )
 TGet():New( 075, 045, { | u | If( PCount() == 0, cIndNovo, cIndNovo := u ) },oWizard:oMPanel[14],,, PesqPict("CN9","CN9_INDICE"),{||  NaoVazio() .And. ExistCpo("CN6") .And. CN140Indice("1",cIndAtu,cIndNovo)},,,,.F.,,.T.,,.F.,,.F.,.F.,,.F.,.F. ,"CN6","cIndNovo",,,, )
 TGet():New( 075, 075, { | u | If( PCount() == 0, Posicione("CN6",1,xFilial("CN6")+cIndNovo,"CN6_DESCRI"), Posicione("CN6",1,xFilial("CN6")+cIndNovo,"CN6_DESCRI") := u ) },oWizard:oMPanel[14],,,,,,,,.F.,,.T.,,.F.,{||  .F. },.F.,.F.,,.F.,.F. ,,'Posicione("CN6",1,xFilial("CN6")+cIndNovo,"CN6_DESCRI")',,,, )








oWizard:NewPanel( If(CNC->(FieldPos("CNC_CLIENT"))>0,STR0143,STR0158), If(CNC->(FieldPos("CNC_CLIENT"))>0,STR0159,STR0160), {||CN140Forne("4")}, {||CN140Forne("3")},,.T., )

 TSay():New( 010, 010,{||  "Contrato"},oWizard:oMPanel[15],,,.F.,.F.,.F.,.T.,,,,,.F.,.F.,.F.,.F.,.F.,.F. )
 TGet():New( 010, 045, { | u | If( PCount() == 0, cContra, cContra := u ) },oWizard:oMPanel[15], 55, 5, PesqPict("CN9","CN9_NUMERO"),,,,,.F.,,.T.,,.F.,{||  .F. },.F.,.F.,,.F.,.F. ,,"cContra",,,, )









oWizard:NewPanel( "Finalização", If(cPaisLoc$"ANG|PTG","Indicar a justificação da revisão","Informe a justificativa da revisao"), {||CN140BckPn(cCodTR,lCronog,,,,,,aHeaderIt,aItens,aPlan,cRevisa)}, {|| .T. }, {||Cn140VldGCP(cContra,cRevisa,dFContra) .And. CN140GerRev(cContra,cRevisa,cCodTR,cJust,cCodPr,dDtRein,dDtReaj,cClaus,aItens,aPlan,@aParcelas,aCron,dFContra,aHeaderIt,aHeadParc,aColsParc,aItensCtb,nValor,lAltVlr,nVgAdit,,,,dDtRefe)},.T., )

 TSay():New( 030, 012,{||  "Justificativa"},oWizard:oMPanel[16],,,.F.,.F.,.F.,.T.,,,,,.F.,.F.,.F.,.F.,.F.,.F. )
oMemo := tMultiget():New(030,050,{|u|if(Pcount()>0,cJust:=u,cJust)},oWizard:oMPanel[16],200,50,,,,,, .T. )

 TSay():New( 090, 012,{||  "Contrato"},oWizard:oMPanel[16],,,.F.,.F.,.F.,.T.,,,,,.F.,.F.,.F.,.F.,.F.,.F. )
 TGet():New( 087, 050, { | u | If( PCount() == 0, cContra, cContra := u ) },oWizard:oMPanel[16], 55, 5, PesqPict("CN9","CN9_NUMERO"),,,,,.F.,,.T.,,.F.,{||  .F. },.F.,.F.,,.F.,.F. ,,"cContra",,,, )

 TSay():New( 090, 112,{||  If(cPaisLoc$"ANG|PTG","Revisão Criada","Revisão Gerada")},oWizard:oMPanel[16],,,.F.,.F.,.F.,.T.,,,,,.F.,.F.,.F.,.F.,.F.,.F. )
 TGet():New( 087, 155, { | u | If( PCount() == 0, Soma1(if(Empty(cRevisa),strzero(0,TamSX3("CN9_REVISA")[1]),cRevisa)), Soma1(if(Empty(cRevisa),strzero(0,TamSX3("CN9_REVISA")[1]),cRevisa)) := u ) },oWizard:oMPanel[16], 20, 5, PesqPict("CN9","CN9_REVISA"),,,,,.F.,,.T.,,.F.,{||  .F. },.F.,.F.,,.F.,.F. ,,'Soma1(if(Empty(cRevisa),strzero(0,TamSX3("CN9_REVISA")[1]),cRevisa))',,,, )

 TSay():New( 105, 012,{||  RetTitle("CN9_VIGE")},oWizard:oMPanel[16],,,.F.,.F.,.F.,.T.,,,,,.F.,.F.,.F.,.F.,.F.,.F. )
 TGet():New( 102, 050, { | u | If( PCount() == 0, nVgAdit, nVgAdit := u ) },oWizard:oMPanel[16], 55, 5, PesqPict("CN9","CN9_VIGE"),{||  CN140DtFim(@dFContra,nVgAdit,cContra,cRevisa)},,,,.F.,,.T.,,.F.,{||  (lAltPar .AND. lAltVig)},.F.,.F.,,.F.,.F. ,,"nVgAdit",,,, )

 TSay():New( 105, 112,{||  RetTitle("CN9_UNVIGE")},oWizard:oMPanel[16],,,.F.,.F.,.F.,.T.,,,,,.F.,.F.,.F.,.F.,.F.,.F. )
 oUnVig := TComboBox():New( 102, 155, { | u | If( PCount() == 0, cDescrVig, cDescrVig := u ) }, aUnVig, 55, 5, oWizard:oMPanel[16],,,{||  CN140AtuDtFim(@dFContra,cContra,cRevisa)},,,.T.,,,.F.,{||  (lAltPar .AND. lAltVig)},.F.,,, ,"cDescrVig" )

 TSay():New( 120, 012,{||  If(cPaisLoc$"ANG|PTG","Dt Término","Dt Termino")},oWizard:oMPanel[16],,,.F.,.F.,.F.,.T.,,,,,.F.,.F.,.F.,.F.,.F.,.F. )
 TGet():New( 117, 050, { | u | If( PCount() == 0, dFContra, dFContra := u ) },oWizard:oMPanel[16], 55, 5, PesqPict("CN9","CN9_DTFIM"),{||  CN140VldDFim(dFContra,cCodTR,cContra,cRevisa)},,,,.F.,,.T.,,.F.,{||  .F. },.F.,.F.,,.F.,.F. ,,"dFContra",,,, )

 TSay():New( 120, 112,{||  "Valor"},oWizard:oMPanel[16],,,.F.,.F.,.F.,.T.,,,,,.F.,.F.,.F.,.F.,.F.,.F. )
 TGet():New( 117, 155, { | u | If( PCount() == 0, nValor, nValor := u ) },oWizard:oMPanel[16], 55, 5, PesqPict("CN9","CN9_VLATU"),{||  CN140VldVl(nSaldo,nVlOri,nValor,cCodTR)},,,,.F.,,.T.,,.F.,{||  lAltVlr},.F.,.F.,,.F.,.F. ,,"nValor",,,, )

oWizard:Activate(.T.,,, )




If !Empty(cArqCN9)
	TRBCN9->(dbCloseArea())
	FErase(cArqCN9 + ".DBF")
	FErase(cArqCN9 + OrdBagExt() )
EndIf




If !Empty(cArqCNA)
	TRBCNA->(dbCloseArea())
	FErase(cArqCNA + ".DBF")
	FErase(cArqCNA + OrdBagExt() )
EndIf




If !Empty(cArqCNF)
	TRBCNF->(dbCloseArea())
	FErase(cArqCNF + ".DBF")
	FErase(cArqCNF + OrdBagExt() )
EndIf




If !Empty(cArqCNV)
	TRBCNV->(dbCloseArea())
	FErase(cArqCNV + ".DBF")
	FErase(cArqCNV + OrdBagExt() )
EndIf

If !Empty(cArqCNW)
	TRBCNW->(dbCloseArea())
	FErase(cArqCNW + ".DBF")
	FErase(cArqCNW + OrdBagExt() )
EndIf


PcoFinLan("000357")
PcoFreeBlq("000357")

Return


















Function CN140VldMPar(cCodPr,cDescPr)
Local lRet := .T. 

dbSelectArea("CN2")
dbSetOrder(1)





If dbSeek(xFilial("CN2")+cCodPr)
	cDescPr := CN2->CN2_DESCRI
Else
	Help("CNTA140", 1, "REGNOIS")
	lRet := .F. 
EndIf

Return lRet


















Function CN140VldCodTr(cCodTr,cDescTR,cTipoCtr)
Local lRet := .T. 

dbSelectArea("CN0")
dbSetOrder(1)





If dbSeek(xFilial("CN0")+cCodTr)
	cDescTr := CN0->CN0_DESCRI
	cTipoCtr:= CN0->CN0_TIPO
   cEspec  := CN0->CN0_ESPEC

Else
	Help("CNTA140", 1, "REGNOIS")
	lRet := .F. 
EndIf

Return lRet



















Function CN140LContra(cCodTR,nReg)
Local cQuery      := ""
Local cQueryPE    := ""
Local cEspCtr	  := ""
Local lRet        := .T. 
Local aArea       := GetArea()
Local cEspec      := CN0->CN0_ESPEC

cTpRev := Posicione("CN0",1,xFilial("CN0")+cCodTR,"CN0_TIPO")

dbSelectArea("CN9")
dbgoto(nReg)

If CN9->(FieldPos("CN9_ESPCTR")) > 0
	cEspCtr := CN9->CN9_ESPCTR
ElseIf !Empty(CN9->CN9_CLIENT)
	cEspCtr := "2"
Else
	cEspCtr := "1"
EndIf

cContra := CN9->CN9_NUMERO
cIndAtu := CN9->CN9_INDICE

cQuery := "SELECT CN9.CN9_FILIAL, CN9.CN9_NUMERO, CN9.CN9_REVISA, CN9.CN9_DTINIC, CN9.CN9_DTFIM, CN9.CN9_CONDPG, "
cQuery += "       CN9.CN9_SITUAC, CN9.CN9_SALDO,  CN9.CN9_TIPREV, CN9.CN9_REVATU "
cQuery += "  FROM "+RetSqlName("CN9")+" CN9, "+RetSqlName("CN1")+" CN1 "
cQuery += " WHERE CN9.CN9_FILIAL = '"+xFilial("CN9")+"'"
cQuery += "   AND CN1.CN1_FILIAL = '"+xFilial("CN1")+"'"
cQuery += "   AND CN9.CN9_TPCTO  = CN1.CN1_CODIGO "
cQuery += "   AND CN9.CN9_NUMERO = '"+cContra+"'"
cQuery += "   AND "





if cTpRev == "6"
	cQuery += " CN9.CN9_SITUAC in ('"+ "06" +"') AND "
Else
	cQuery += " CN9.CN9_SITUAC in ('"+ "05" +"') AND "
EndIf



If cTpRev == "8"
	cQuery += " CN1.CN1_CROCTB = '1' AND "
EndIf



If cTpRev == "2"
	cQuery += "CN9.CN9_FLGREJ = '1' AND "
EndIf
If (CN1->( FieldPos("CN1_CTRFIX") ) > 0) .AND.  ((cTpRev == "1" .And.  cEspec = "1") .OR.  (cTpRev == "4"))
	cQuery += " CN1.CN1_CTRFIX = '1' AND "
EndIf

If	cTpRev == "A" .And.  CNC->(FieldPos("CNC_CLIENT")) == 0
	cQuery += " CN1.CN1_ESPCTR = '1' AND "
EndIf


If	CN9->(FieldPos("CN9_CODED")) > 0 .And.  (CO1->(FieldPos("CO1_REFORM")) == 0 .Or.  cTpRev == "A")
	cQuery += " CN9.CN9_CODED = '' AND "
EndIf

cQuery += " CN9.D_E_L_E_T_ = ' ' AND "
cQuery += " CN1.D_E_L_E_T_ = ' ' "

If Existblock("CN140QRY")
	cQueryPE := Execblock("CN140QRY", .F. , .F. , {cQuery})
	cQuery   := If(ValType(cQueryPE)=="C", cQueryPE, cQuery)
Endif

cQuery += " ORDER BY "+SqlOrder(CN9->(IndexKey()))

cQuery := ChangeQuery(cQuery)
dbUseArea( .T. ,"TOPCONN",TcGenQry(,,cQuery),"TRB", .F. , .T. )


TCSetField("TRB","CN9_DTINIC","D",08,0)
TCSetField("TRB","CN9_DTFIM" ,"D",08,0)
TCSetField("TRB","CN9_SALDO" ,"N",TamSX3("CN9_SALDO")[1],TamSX3("CN9_SALDO")[1])

dbSelectArea("TRB")
dbGoTop()

If !Eof()

	dbSelectArea("TRBCN9")
	If RecCount() > 0
		__dbZap()
	Endif

	dbSelectArea("TRB")
	While !Eof()



		RecLock("TRBCN9", .T. )
			TRBCN9->CN9_NUMERO := TRB->CN9_NUMERO
			TRBCN9->CN9_REVISA := TRB->CN9_REVISA
			TRBCN9->CN9_DTINIC := TRB->CN9_DTINIC
			TRBCN9->CN9_DTFIM  := TRB->CN9_DTFIM
			TRBCN9->CN9_CONDPG := TRB->CN9_CONDPG
			TRBCN9->CN9_SITUAC := TRB->CN9_SITUAC
			TRBCN9->CN9_SALDO  := TRB->CN9_SALDO
			TRBCN9->CN9_TIPREV := TRB->CN9_TIPREV
			TRBCN9->CN9_REVATU := TRB->CN9_REVATU
		MsUnlock()
		dbSelectArea("TRB")
		dbSkip()
	Enddo

	TRBCN9->(dbGoTop())
Else
	Help("CNTA140",1,"CNTA140_20")
	lRet := .F. 
Endif

TRB->(dbCloseArea())
cContra:= ""
RestArea(aArea)

Return lRet


















Function CN140LPlan(cContra,cRevisa)
Local cQuery := ""
Local lRet := .T. 
Local aArea := GetArea()




cQuery := "SELECT CNA.CNA_NUMERO, CNA.CNA_DTINI, CNA.CNA_VLTOT, CNA.CNA_DTFIM, CNA.CNA_FORNEC, "
cQuery += "       CNA.CNA_LJFORN, CNA.CNA_CRONOG, CNA.CNA_CONTRA, CNA.CNA_REVISA, CNA.CNA_CLIENT, CNA.CNA_LOJACL "
cQuery += "  FROM "+RetSqlName("CNA")+" CNA "
cQuery += " WHERE CNA.CNA_FILIAL =  '"+xFilial("CNA")+"'"
cQuery += "   AND CNA.CNA_CONTRA = '"+cContra+"'"
cQuery += "   AND CNA.CNA_REVISA = '"+cRevisa+"'"
cQuery += "   AND CNA.D_E_L_E_T_ = ' '"

cQuery := ChangeQuery(cQuery)
dbUseArea( .T. ,"TOPCONN",TcGenQry(,,cQuery),"TRB", .F. , .T. )


TCSetField("TRB","CNA_DTINI","D",08,0)
TCSetField("TRB","CNA_DTFIM" ,"D",08,0)
TCSetField("TRB","CNA_VLTOT" ,"N",TamSX3("CNA_VLTOT")[1],TamSX3("CNA_VLTOT")[2])

dbSelectArea("TRB")
dbGoTop()

If !Eof()

	dbSelectArea("TRBCNA")
	If RecCount() > 0
		__dbZap()
	Endif

	dbSelectArea("TRB")
	While !Eof()



		RecLock("TRBCNA", .T. )
			TRBCNA->CNA_CONTRA := TRB->CNA_CONTRA
			TRBCNA->CNA_REVISA := TRB->CNA_REVISA
			TRBCNA->CNA_NUMERO := TRB->CNA_NUMERO
			TRBCNA->CNA_DTINI  := TRB->CNA_DTINI
			TRBCNA->CNA_VLTOT  := TRB->CNA_VLTOT
			TRBCNA->CNA_DTFIM  := TRB->CNA_DTFIM
			TRBCNA->CNA_FORNEC := TRB->CNA_FORNEC
			TRBCNA->CNA_LJFORN := TRB->CNA_LJFORN
			TRBCNA->CNA_CRONOG := TRB->CNA_CRONOG
			TRBCNA->CNA_CLIENT := TRB->CNA_CLIENT
			TRBCNA->CNA_LOJACL := TRB->CNA_LOJACL
		MsUnlock()
		dbSelectArea("TRB")
		dbSkip()
	Enddo

	TRBCNA->(dbGoTop())
Else
	Help("CNTA140",1,"CNTA140_02")
	lRet := .F. 
Endif

TRB->(dbCloseArea())

RestArea(aArea)

Return lRet


















Function CN140LCron(cContra,cRevisa)
Local cQuery := ""
Local lRet := .T. 
Local aArea := GetArea()




cQuery := "SELECT CNF.CNF_FILIAL, CNF.CNF_NUMERO, CNF.CNF_CONTRA, CNF.CNF_REVISA, "
cQuery += "       Min(CNF.CNF_COMPET) as CNF_COMPET, Sum(CNF.CNF_SALDO) as CNF_SALDO "
cQuery += "  FROM "+RetSqlName("CNF")+" CNF "
cQuery += " WHERE CNF.CNF_FILIAL =  '"+xFilial("CNF")+"'"
cQuery += "   AND CNF.CNF_CONTRA = '"+cContra+"'"
cQuery += "   AND CNF.CNF_REVISA = '"+cRevisa+"'"
cQuery += "   AND CNF.D_E_L_E_T_ = ' ' "
cQuery += " GROUP BY CNF.CNF_FILIAL, CNF.CNF_NUMERO, CNF.CNF_CONTRA, CNF.CNF_REVISA"

cQuery := ChangeQuery(cQuery)
dbUseArea( .T. ,"TOPCONN",TcGenQry(,,cQuery),"TRB", .F. , .T. )


TCSetField("TRB","CNF_SALDO" ,"N",TamSX3("CNF_SALDO")[1],TamSX3("CNF_SALDO")[2])

dbSelectArea("TRB")
dbGoTop()

If !Eof()

	dbSelectArea("TRBCNF")
	If RecCount() > 0
		__dbZap()
	Endif




	dbSelectArea("TRB")
	While !Eof()
		RecLock("TRBCNF", .T. )
			TRBCNF->CNF_NUMERO := TRB->CNF_NUMERO
			TRBCNF->CNF_CONTRA := TRB->CNF_CONTRA
			TRBCNF->CNF_REVISA := TRB->CNF_REVISA
			TRBCNF->CNF_COMPET := TRB->CNF_COMPET
			TRBCNF->CNF_SALDO  := TRB->CNF_SALDO
			MsUnlock()
		dbSelectArea("TRB")
		dbSkip()
	Enddo

	TRBCNF->(dbGoTop())
Else
	Help("CNTA140",1,"CNTA140_03")
	lRet := .F. 
Endif

TRB->(dbCloseArea())

RestArea(aArea)

Return lRet
























Function CN140MkContra(cContra,cRevisa,cClaus,cCodPr,cDescPr,dDtRein,dDtReaj,cJust,cIndAtu)
cContra :=TRBCN9->CN9_NUMERO
cRevisa :=TRBCN9->CN9_REVISA
cIndAtu :=TRBCN9->CN9_INDICE

cClaus  := ""
cCodPr  := Space(TamSX3("CN2_CODIGO")[1])
cDescPr := ""
dDtRein := CTOD("  /  /  ")
dDtReaj := CTOD("  /  /  ")
cJust   := ""
Return


















Function CN140VlP2(cCodTR,nReg)
Local lRet := .T. 
Local lCn140ctaut := ExistBlock("CN140CTAUT")
Local cCn140ctaut := ""

if Empty(cCodTR)
	lRet := .F. 
	Help("CNTA140",1,"CNTA140_04")
Else



	If lCn140ctaut .and.  Valtype(cCn140ctaut := ExecBlock("CN140CTAUT", .F. , .F. ))=="C"
		cContra := cCn140ctaut
	EndIf
	lRet := CN140LContra(cCodTR,nReg)

EndIf

Return lRet


















Function CN140VlP5(cCodPr,dDtRein)
Local lRet := .T. 

if Empty(cCodPr)
	Help("CNTA140",1,"CNTA140_05")
	lRet := .F. 
ElseIf Empty(dDtRein)
	Help("CNTA140",1,"CNTA140_05")
	lRet := .F. 
EndIf

If lRet
	oWizard:NPanel := 15
EndIf

Return lRet

















Function CN140VlP6(dDtReaj,dDtRef)
Local lRet := .T. 

If Empty(dDtReaj)
	Help("CNTA140",1,"CNTA140_07")
	lRet := .F. 
EndIf

If Empty(dDtRef)
	Help("CNTA140",1,"CNTA140_24")
	lRet := .F. 
EndIf

If lRet
	oWizard:NPanel := 15
EndIf

Return lRet




























Function CN140VlP3(cCodTR,cContra,cRevisa,cNrevisa,cDescTR,dFContra,lCronog,lAltPar,oTpCron,nVgAdit,nValor,lAltVlr,lAltVig,nSaldo,nVlOri)

Local lRet      := .T. 
Local lRedParc  := GetMv("MV_CNREDUP")
Local lCn140vct := .T. 
Local cQuery    := ""
Local cAlias    := ""
Local cAliasCNA := ""
Local cUnVig

If Empty(cContra)
	lRet := .F. 
	Help("CNTA140",1,"CNTA140_08")
EndIf

If lRet
	dbSelectArea("CN9")
	dbSetOrder(1)
	If dbSeek(xFilial("CN9")+cContra+cRevisa)



		If dDataBase < CN9_DTINIC
			Aviso("CNTA140","O contrato não se encontra dentro do período de vigência",{"OK"})
			lRet := .F. 
		EndIf




		If lRet
			cAlias := GetNextAlias()

			cQuery := "SELECT COUNT(*) AS QTD "
			cQuery += "  FROM "+RetSQLName("CND")+" CND "
			cQuery += " WHERE CND.CND_FILIAL = '"+xFilial("CND")+"'"
			cQuery += "   AND CND.CND_CONTRA = '"+cContra+"'"
			cQuery += "   AND CND.CND_DTFIM  = ''"
			cQuery += "   AND CND.D_E_L_E_T_ = ' '"

			cQuery := ChangeQuery(cQuery)
			dbUseArea( .T. ,"TOPCONN",TcGenQry(,,cQuery),cAlias, .F. , .T. )

			If (cAlias)->QTD > 0
				Aviso("CNTA140","O contrato selecionado possui medição em aberto. Encerre a medição antes de gerar a revisão.",{"OK"})
				lRet := .F. 
			EndIf

			(cAlias)->(dbCloseArea())
		EndIf
	Else
		lRet := .F. 
	EndIf
EndIf

If lRet
	dbSelectArea("CN0")
	dbSetOrder(1)
	dbSeek(xFilial("CN0")+cCodTR)

	cTpRev  := CN0->CN0_TIPO
	cEspc   := CN0->CN0_ESPEC
	cModo   := CN0->CN0_MODO

	lMedeve  := (Posicione("CN1",1,xFilial("CN1")+CN9->CN9_TPCTO,"CN1_MEDEVE") == "1")
	lFisico  := ((CN1->(FieldPos("CN1_CROFIS")) > 0) .And.  Posicione("CN1",1,xFilial("CN1")+CN9->CN9_TPCTO,"CN1_CROFIS") == "1")

	If  (CN1->(FieldPos("CN1_CTRFIX")) > 0) .AND.  (CN1->(FieldPos("CN1_VLRPRV")) > 0)
		lFixo := Posicione("CN1",1,xFilial("CN1")+CN9->CN9_TPCTO,"CN1_CTRFIX") == "1"
		lVlPrv:= Posicione("CN1",1,xFilial("CN1")+CN9->CN9_TPCTO,"CN1_VLRPRV") == "1"
	EndIf

	lContab  := (Posicione("CN1",1,xFilial("CN1")+CN9->CN9_TPCTO,"CN1_CROCTB") == "1")
	dFContra := dFCronog := CN9->CN9_DTFIM
	nVlOri   := nValor   := CN9->CN9_VLATU
	nSaldo   := CN9->CN9_SALDO
	lAltVig  := (CN9->CN9_UNVIGE <> "4")




	If (AllTrim(CN9->CN9_SITUAC) == "05" .OR.  AllTrim(CN9->CN9_SITUAC) == "06") .And.  !Empty(CN9->CN9_REVATU)
		lRevisad := .T. 
		cNrevisa:=CN9->CN9_REVATU
		oWizard:NPanel := 3
		cDescTR := CN0->CN0_DESCRI
		lCronog := ((cTpRev == "1" .And.  cEspc $ "134") .OR.  cTpRev == "6")
		lAltPar := (cTpRev == "1" .And.  cEspc $ "134")
		lAltVlr := (cTpRev == "3" .And.  !lFixo .And.  lVlPrv)

		If cTpRev <> "4"
			oGrpPlO:Hide()
			oGrpPlA:Hide()
			oVlPAtu:Hide()
			oVlPOri:Hide()
		Else
			oGrpPlO:Show()
			oGrpPlA:Show()
			oVlPAtu:Show()
			oVlPOri:Show()
		EndIf
	Else
		lRet := CN240VldUsr(cContra,"027", .T. )

		If lRet
			If !lFixo
				lRet := .F. 
				Do Case
					Case cTpRev == "1"
						If cEspc == "3"
							lRet := .T. 
						EndIf
					Case cTpRev == "2"
						lRet := lVlPrv
					Case cTpRev == "3"
						lRet    := lVlPrv
						lAltVlr := lVlPrv
					Case cTpRev == "7"
						lRet := .T. 
					Case cTpRev == "6"
						lRet := .T. 
					Case cTpRev == "5"
						lRet := .T. 
					Case cTpRev == "9"
						lRet := .T. 
					Case cTpRev == "A"
						lRet := .T. 
				EndCase
			EndIf
		EndIf

		If lRet
			lCronog := .F. 
			lAltPar := .F. 

			If cTpRev <> "4"
				oGrpPlO:Hide()
				oGrpPlA:Hide()
				oVlPAtu:Hide()
				oVlPOri:Hide()
			Else
				oGrpPlO:Show()
				oGrpPlA:Show()
				oVlPAtu:Show()
				oVlPOri:Show()
			EndIf

			Do Case
				Case cTpRev == "1"
					If cEspc == "4" .Or.  cEspc == "1"
						lCronog := .T. 
						lAltPar := .T. 
						lRet := CN140LPlan(cContra,cRevisa)
						If lRet .And.  !lMedeve
							lRet := CN140LCron(cContra,cRevisa)
						EndIf
						If lRet
							oWizard:NPanel := 7
						EndIf
					Else
						lCronog := .T. 
						lAltPar := .T. 
						If !lMedeve
							If lRet := CN140LCron(cContra,cRevisa)
								oWizard:NPanel := 9
							EndIf
						Else
							oWizard:NPanel := 15
						EndIf
					EndIf
				Case cTpRev == "3"
					If lFixo
						lRet := CN140LPlan(cContra,cRevisa)
						If	lRet
							oWizard:NPanel := 7
						EndIf
					Else
						oWizard:NPanel := 15
					EndIf
				Case cTpRev == "4"
					lRet := CN140LPlan(cContra,cRevisa)
					If lRet
						oWizard:NPanel := 7
					EndIf
				Case cTpRev == "2"
					oWizard:NPanel := 5
				Case cTpRev == "5"
					oWizard:NPanel := 4
				Case cTpRev == "6"
					lCronog := .T. 
					If !lMedeve
						If lRet := CN140LCron(cContra,cRevisa)
							oWizard:NPanel := 9
						EndIf
					Else
					   oWizard:NPanel := 15
					EndIf
				Case cTpRev == "7"
					oWizard:NPanel := 6
				Case cTpRev == "8"
					nParcelas:=0
					lCronog := .T. 
					lAltPar := .T. 
					lRet := CN140PlnCt(cContra,cRevisa,@lRet,@aCron)
					If lRet
					   oWizard:NPanel := 11
					Endif
				Case cTpRev == "9"
					oWizard:NPanel := 13
				Case cTpRev == "A"
					If lFixo
						If lRet := CN140LPlan(cContra,If(nRevRtp == 1,cNRevisa,cRevisa))
							oWizard:NPanel := 7
						EndIf
					Else
						CN140Forne("1",cRevisa)
					EndIf
			EndCase
			lRevisad := .F. 
		Else
			Aviso("CNTA140",If( cPaisLoc $ "ANG|PTG", "O tipo de revisão seleccionado permite alterar apenas contratos com estrutura fixa", "O tipo de revisão selecionado permite alterar apenas contratos com estrutura fixa" ),{"OK"})
		EndIf
	EndIf




	If lRet
		If cTpRev == "2"
			cAliasCNA := GetNextAlias()

			cQuery := "SELECT COUNT(*) AS QTD "
			cQuery += "  FROM "+RetSQLName("CNA")+" CNA "
			cQuery += " WHERE CNA.CNA_FILIAL = '"+xFilial("CNA")+"'"
			cQuery += "   AND CNA.CNA_CONTRA = '"+cContra+"'"
			cQuery += "   AND CNA.CNA_REVISA = '"+cRevisa+"'"
			cQuery += "   AND CNA.CNA_FLREAJ = '1'"
			cQuery += "   AND CNA.D_E_L_E_T_ = ' '"

			cQuery := ChangeQuery(cQuery)
			dbUseArea( .T. ,"TOPCONN",TcGenQry(,,cQuery),cAliasCNA, .F. , .T. )

			If (cAliasCNA)->QTD = 0
				Help("CNTA140",1,"CNTA140_19")
				lRet := .F. 
			EndIf
			(cAliasCNA)->(dbCloseArea())
		EndIf
    EndIf

	If lRet
		nVgAdit := CN9->CN9_VIGE




		If (cTpRev == "1" .And.  cEspc $ "134") .Or.  cTpRev ==  "8"
			aTpCron := {}
			If cModo == "1"
				aTpCron := {"Acréscimo"}
			ElseIf cModo == "2" .And. lRedParc
				aTpCron := {"Decréscimo"}
			Else
				aTpCron := {"Acréscimo"}
				If lRedParc
					aAdd(aTpCron,"Decréscimo")
				EndIf
			EndIf
			oTpCron:aItems := aTpCron
			oTpCronCtb:aItems := aTpCron
		EndIf
	EndIf
EndIf


cUnVig := Posicione("CN9",1,xFilial("CN9")+cContra+cRevisa,"CN9_UNVIGE")

If cUnVig == "1"
	oUnVig:nat := 1
ElseIf cUnVig == "2"
	oUnVig:nat := 2
ElseIf cUnVig == "3"
	oUnVig:nat := 3
Else
	oUnVig:nat := 4
EndIf

If ExistBlock("CN140VCT")
	lCn140vct := ExecBlock("CN140VCT", .F. , .F. ,{cCodTr,cContra})
	If valtype(lCn140vct) == "L"
		lRet := lCn140vct
	EndIf
EndIf

Return lRet

















Function CN140VlP7(cClaus)
Local lRet := .T. 

If Empty(cClaus)
	Help("CNTA140",1,"CNTA140_09")
	lRet := .F. 
Else
	oWizard:NPanel := 15
EndIf

Return lRet


























Function CN140VlP8(cContra,cRevisa,cCodTr,aPlan,aItens,aHeaderIt,aColsIt,aCpoAlt,oPlan,aAlterCNB)
Local lRet := .T. 
Local cTipRev := Posicione("CN0",1,xFilial("CN0")+cCodTr,"CN0_TIPO")
Local cEsp    := Posicione("CN0",1,xFilial("CN0")+cCodTr,"CN0_ESPEC")
Local nPosDBR := 0
Local nPosReal:= 0
Local aAlter  := {}
Local cEspCtr := ""

If CN9->(FieldPos("CN9_ESPCTR")) > 0
	cEspCtr := CN9->CN9_ESPCTR
ElseIf !Empty(CN9->CN9_CLIENT)
	cEspCtr := "2"
Else
	cEspCtr := "1"
EndIf

oPlan:nAt := 1
oPlan:Refresh()

cModo   := Posicione("CN0",1,xFilial("CN0")+cCodTr,"CN0_MODO")

If Len(aPlan) = 0
	Help("CNTA140",1,"CNTA140_10")
	lRet := .F. 
Else
	If cTipRev <> "3" .AND.  (nPosReal := aScan(aHeaderIt,{|x| x[2]=="CNB_REALI"})) > 0
		aDel(aHeaderIt,nPosReal)
		aSize(aHeaderIt,len(aHeaderIt)-1)
		If (nPosReal := aScan(aHeaderIt,{|x| x[2]=="CNB_DTREAL"})) > 0
			aDel(aHeaderIt,nPosReal)
			aSize(aHeaderIt,len(aHeaderIt)-1)
		EndIf
	EndIf




	If oGetDad1 == NIL
		oGetDad1 := MsNewGetDados():New(025,000, __DlgHeight(oWizard:oMPanel[9]), __DlgWidth(oWizard:oMPanel[9]),If((cModo $ "13" .AND.  cTipRev == "1"),2+4+1,2),"CN140VldIt()",,"+CNB_ITEM",,,9999,,,"CN140DelGet()",oWizard:oMPanel[9],aHeaderIt,aColsIt)
		If cTipRev == "1"
			oGetDad1:bChange := {|| CN140ChgGet(cTipRev,aAlterCNB)}
		EndIf
		oGetDad1:oBrowse:bLostFocus := {|| CN140VldIt()}
	EndIf




	lRet := CN140LItem(cContra,cRevisa,aPlan,aItens,aHeaderIt,cCodTr)




	Do Case
		Case cTipRev == "1"





			If oGetDad1:aCols[oGetDad1:nAt][aScan(oGetDad1:aHeader,{|x| x[2] == "CNB_PRCORI"})]<>0



				aAlter := aClone(aAlterCNB)
				aAdd(aAlter,"CNB_QUANT")
				aAdd(aAlter,"CNBNDESC")
				oGetDad1:OBROWSE:aAlter := aAlter
				oGetDad1:SetEditLine( .F. )
			Else



				aAlter := aClone(aAlterCNB)
				aAdd(aAlter,"CNB_PRODUT")
				aAdd(aAlter,"CNB_DESCRI")
				aAdd(aAlter,"CNB_QUANT")
				aAdd(aAlter,"CNB_VLUNIT")
				aAdd(aAlter,"CNB_DESC")
				aAdd(aAlter,"CNB_CONTA")
				aAdd(aAlter,"CNBNDESC")
				If !Empty(CNB->(FieldPos("CNB_TE")))
					If cEspCtr == "1"
						aAdd(aAlter,"CNB_TE")
					EndIf
				EndIf

				If !Empty(CNB->(FieldPos("CNB_TS")))
					If cEspCtr == "2"
						aAdd(aAlter,"CNB_TS")
					EndIf
				EndIf
				oGetDad1:OBROWSE:aAlter := aAlter
				oGetDad1:SetEditLine( .F. )
			EndIf
			If lRet .And.  !lMedeve .And.  cEspc == "4"
				lRet := CN140MntCron(cContra,cRevisa,aPlan)
			EndIf
		Case cTipRev == "4"
			aAlter := aClone(aAlterCNB)
			aAdd(aAlter,"CNB_QUANT")
			oGetDad1:OBROWSE:aAlter := aAlter
			oGetDad1:SetEditLine( .F. )
		Case cTipRev == "3"
			aAlter := aClone(aAlterCNB)
			aAdd(aAlter,"CNB_REALI")
			aAdd(aAlter,"CNB_DTREAL")
			oGetDad1:OBROWSE:aAlter := aAlter
			oGetDad1:SetEditLine( .F. )
		Case cTipRev == "A"
			CN140Forne("1",cRevisa,aPlan)

	EndCase
EndIf

Return lRet





























Function CN140VlP4(cCodTR,cContra,cRevisa,cClaus,cCodPr,cDescPr,dDtRein,dDtReaj,cJust,lCronog,lAltPar,dFContra,nValor)
Local lRet		 := .T. 
Local lCN140GRP4 := .F. 

If nRevRtp == 0
	Iif(FindFunction("APMsgAlert"), APMsgAlert(STR0139,), MsgAlert(STR0139,))
	lRet := .F. 
	Return lRet
Endif

If nRevRtp == 3
	lRet := .F. 
	If CN240VldUsr(cContra,"029", .T. )
		If Iif(FindFunction("APMsgYesNo"), APMsgYesNo(OemToAnsi(If( cPaisLoc $ "ANG|PTG", "Confirmar exclusão da revisão?", "Confirma exclusão da revisão?" )),), (cMsgYesNo:="MsgYesNo", &cMsgYesNo.(OemToAnsi(If( cPaisLoc $ "ANG|PTG", "Confirmar exclusão da revisão?", "Confirma exclusão da revisão?" )),)))
			dbSelectArea("CN9")
			dbSetOrder(1)
			dbSeek(xFilial("CN9")+cContra+cRevisa)

			cRevAtu := CN9->CN9_REVATU

			CN140DelRev(cContra,cRevisa,cRevAtu,cCodTR)

			oWizard:SetFinish()
		EndIf
	EndIf
Else
	lRet := 	CN240VldUsr(cContra,"028", .T. )

	If nRevRtp == 1
		lRet := CN140ProRev(cContra,cRevisa,cCodTR,cTpRev)

		If !lRet
			oWizard:SetFinish()
		EndIf
    EndIf

	If lRet
		dbSelectArea("CN0")
		dbSetOrder(1)
		dbSeek(xFilial("CN0")+cCodTR)




		cTpRev  := CN0->CN0_TIPO
		cEspc   := CN0->CN0_ESPEC
		cModo   := CN0->CN0_MODO

		dbSelectArea("CN9")
		dbSetOrder(1)
		dbSeek(xFilial("CN9")+cContra+cRevisa)
		nValor := CN9->CN9_VLATU





		If nRevRtp == 1
			cRevAtu := CN9->CN9_REVATU
			dbSeek(xFilial("CN9")+cContra+cRevAtu)
			nValor := CN9->CN9_VLATU
		EndIf

		dFContra:= CN9->CN9_DTFIM
		cJust := MSMM(CN9->CN9_CODJUS)
		lAltPar := lCronog := .F. 

		Do Case
			Case cTpRev == "1"
				If cEspc == "1"
					CN140LPlan(cContra,cRevAtu)
					oWizard:NPanel := 7
				ElseIf cEspc == "3"
					lCronog := .T. 
					lAltPar := .T. 
					If !lMedeve
						CN140LCron(cContra,cRevAtu)
					   oWizard:NPanel := 9
					 Else
					   oWizard:NPanel := 15
					 EndIf
				Else
				    lCronog := .T. 
					 lAltPar := .T. 
					 If !lMedeve
					    CN140LCron(cContra,cRevAtu)
					 EndIf
				    CN140LPlan(cContra,cRevAtu)
					 oWizard:NPanel := 7
				EndIf
			Case cTpRev == "3"
			   if lFixo
					CN140LPlan(cContra,cRevisa)
					oWizard:NPanel := 7
				Else
					oWizard:NPanel := 15
				EndIf
			Case cTpRev == "4"
				CN140LPlan(cContra,cRevisa)
				oWizard:NPanel := 7
			Case cTpRev == "2"
				dDtReaj := CN9->CN9_DTREAJ
				oWizard:NPanel := 5
			Case cTpRev == "5"
				cCodPr  := CN9->CN9_MOTPAR
				dDtRein := CN9->CN9_DTFIMP
				cDescPr := Posicione("CN2",1,xFilial("CN2")+cCodPr,"CN2_DESCRI")
				oWizard:NPanel := 4
			Case cTpRev == "6"
				lCronog := .T. 
				lAltPar := .F. 
				If !lMedeve
					CN140LCron(cContra,cRevAtu)
				   oWizard:NPanel := 9
				Else
					oWizard:NPanel := 15
				EndIf
			Case cTpRev == "7"
				cClaus := MSMM(CN9->CN9_CODCLA)
				oWizard:NPanel := 6
			Case cTpRev == "8"
		      nParcelas:=0
				lCronog := .T. 
				lAltPar := .T. 
				CN140PlnCt(cContra,cRevAtu,@lRet,@aCron)
				oWizard:NPanel := 11
			Case cTpRev == "9"
				oWizard:NPanel := 13
			Case cTpRev == "A"
				If lFixo
					If lRet := CN140LPlan(cContra,If(nRevRtp == 1,cRevAtu,cRevisa))
						oWizard:NPanel := 7
					EndIf
				Else
					CN140Forne("1",cRevisa)
				EndIf
		EndCase
	EndIf
EndIf



If ExistBlock("CN140GRP4")
	lCN140GRP4 := ExecBlock("CN140GRP4", .F. , .F. )
	If ValType(lCN140GRP4) == "L"
		lRet := lCN140GRP4
	EndIf
EndIf
Return lRet




















Function CN140DelRev(cContra,cORevisa,cNRevisa,cCodTR)
Local cQuery    := ""
Local lCN140EXREV  := ExistBlock("CN140EXREV")
Local lCnRevMd     := SuperGetMV("MV_CNREVMD", .F. , .T. )




If ExistBlock("CN140EXV")
	ExecBlock("CN140EXV", .F. , .F. ,{cContra,cORevisa,cNRevisa,cCodTR})
EndIf




If lCnRevMd
	cQuery := "SELECT CNE.R_E_C_N_O_ as RECNO "
	cQuery += "  FROM "+RetSQLName("CNE")+" CNE "
	cQuery += " WHERE CNE.CNE_FILIAL = '"+xFilial("CNE")+"'"
	cQuery += "   AND CNE.CNE_CONTRA = '"+cContra+"'"
	cQuery += "   AND CNE.CNE_REVISA = '"+cNRevisa+"'"
	cQuery += "   AND CNE.D_E_L_E_T_ = ' '"

	cQuery := ChangeQuery( cQuery )
	dbUseArea( .T. , "TopConn", TCGenQry(,,cQuery), "CNETMP", .F. , .F.  )

	dbSelectArea("CNE")




	While !CNETMP->(Eof())
		CNE->(dbGoTo(CNETMP->RECNO))
		RecLock("CNE", .F. )
			dbDelete()
		MsUnlock()
		CNETMP->(dbSkip())
	EndDo
	CNETMP->(dbCloseArea())

	cQuery := "SELECT CND.CND_NUMMED,CND.R_E_C_N_O_ as RECNO "
	cQuery += "  FROM "+RetSQLName("CND")+" CND "
	cQuery += " WHERE CND.CND_FILIAL = '"+xFilial("CND") +"'"
	cQuery += "   AND CND.CND_CONTRA = '"+cContra+"'"
	cQuery += "   AND CND.CND_REVISA = '"+cNRevisa+"'"
	cQuery += "   AND CND.D_E_L_E_T_ = ' '"

	cQuery := ChangeQuery( cQuery )
	dbUseArea( .T. , "TopConn", TCGenQry(,,cQuery), "CNDTMP", .F. , .F.  )

	dbSelectArea("CND")

	While !CNDTMP->(Eof())
		CND->(dbGoTo(CNDTMP->RECNO))
		RecLock("CND", .F. )
			dbDelete()
		MsUnlock()
		CNDTMP->(dbSkip())
	EndDo
	CNDTMP->(dbCloseArea())
EndIf

If lFisico



	cQuery := "SELECT CNS.R_E_C_N_O_ as RECNO "
	cQuery += "  FROM "+RetSQLName("CNS")+" CNS "
	cQuery += " WHERE CNS.CNS_FILIAL = '"+xFilial("CNS")+"'"
	cQuery += "   AND CNS.CNS_CONTRA = '"+cContra+"'"
	cQuery += "   AND CNS.CNS_REVISA = '"+cNRevisa+"'"
	cQuery += "   AND CNS.D_E_L_E_T_ <> '*'"

	cQuery := ChangeQuery(cQuery)
	dbUseArea( .T. ,"TOPCONN",TcGenQry(,,cQuery),"CNSTMP", .F. , .T. )

	dbSelectArea("CNS")



	While !CNSTMP->(Eof())
		CNS->(dbGoTo(CNSTMP->RECNO))
		RecLock("CNS", .F. )
			dbDelete()
		MsUnlock()
		CNSTMP->(dbSkip())
	EndDo

	CNSTMP->(dbCloseArea())
EndIf




cQuery := "SELECT CNB.R_E_C_N_O_ as RECNO "
cQuery += "  FROM "+RetSQLName("CNB")+" CNB "
cQuery += " WHERE CNB.CNB_FILIAL = '"+xFilial("CNB")+"'"
cQuery += "   AND CNB.CNB_CONTRA = '"+cContra+"'"
cQuery += "   AND CNB.CNB_REVISA = '"+cNRevisa+"'"
cQuery += "   AND CNB.D_E_L_E_T_ <> '*'"

cQuery := ChangeQuery(cQuery)
dbUseArea( .T. ,"TOPCONN",TcGenQry(,,cQuery),"CNBTMP", .F. , .T. )




dbSelectArea("CNB")
dbSetOrder(1)
While !CNBTMP->(Eof())


	If AliasInDic("AGW")
		AGW->(dbSetOrder(2))

		If AGW->(dbSeek(xFilial("AGW")+CNB->(CNB_CONTRA+CNB_NUMERO+CNB_ITEM))) .And.  !CNB->(dbSeek(xFilial("CNB")+AGW->(AGW_CONTRA+cORevisa+AGW_PLANIL+AGW_ITEM)))
			RecLock("AGW", .F. )
			AGW->(dbDelete())
			AGW->(MsUnLock())
		EndIf
	EndIf

	CNB->(dbGoTo(CNBTMP->RECNO))
	RecLock("CNB", .F. )
		dbDelete()
	MsUnlock()
	CNBTMP->(dbSkip())
EndDo

CNBTMP->(dbCloseArea())




cQuery := "SELECT CNA.R_E_C_N_O_ as RECNO "
cQuery += "  FROM "+RetSQLName("CNA")+" CNA "
cQuery += " WHERE CNA.CNA_FILIAL  = '"+xFilial("CNA")+"'"
cQuery += "   AND CNA.CNA_CONTRA  = '"+cContra+"'"
cQuery += "   AND CNA.CNA_REVISA  = '"+cNRevisa+"'"
cQuery += "   AND CNA.D_E_L_E_T_ <> '*'"

cQuery := ChangeQuery(cQuery)
dbUseArea( .T. ,"TOPCONN",TcGenQry(,,cQuery),"CNATMP", .F. , .T. )




dbSelectArea("CNA")
While !CNATMP->(Eof())
	CNA->(dbGoTo(CNATMP->RECNO))
	RecLock("CNA", .F. )
		dbDelete()
	MsUnlock()
	CNATMP->(dbSkip())
EndDo

CNATMP->(dbCloseArea())




cQuery := "SELECT CNF.R_E_C_N_O_ as RECNO "
cQuery += "  FROM "+RetSQLName("CNF")+" CNF "
cQuery += " WHERE CNF.CNF_FILIAL  = '"+xFilial("CNF")+"'"
cQuery += "   AND CNF.CNF_CONTRA  = '"+cContra+"'"
cQuery += "   AND CNF.CNF_REVISA  = '"+cNRevisa+"'"
cQuery += "   AND CNF.D_E_L_E_T_ <> '*'"

cQuery := ChangeQuery(cQuery)
dbUseArea( .T. ,"TOPCONN",TcGenQry(,,cQuery),"CNFTMP", .F. , .T. )




dbSelectArea("CNF")
While !CNFTMP->(Eof())
	CNF->(dbGoTo(CNFTMP->RECNO))
	PcoDetLan("000357","01","CNTA110", .T. )
	RecLock("CNF", .F. )
		dbDelete()
	MsUnlock()
	CNFTMP->(dbSkip())
EndDo

CNFTMP->(dbCloseArea())



cQuery := "SELECT CNF.R_E_C_N_O_ as RECNO "
cQuery += "  FROM "+RetSQLName("CNF")+" CNF "
cQuery += " WHERE CNF.CNF_FILIAL  = '"+xFilial("CNF")+"'"
cQuery += "   AND CNF.CNF_CONTRA  = '"+cContra+"'"
cQuery += "   AND CNF.CNF_REVISA  = '"+cORevisa+"'"
cQuery += "   AND CNF.D_E_L_E_T_ <> '*'"

cQuery := ChangeQuery(cQuery)
dbUseArea( .T. ,"TOPCONN",TcGenQry(,,cQuery),"CNFTMP", .F. , .T. )




dbSelectArea("CNF")
While !CNFTMP->(Eof())
	CNF->(dbGoTo(CNFTMP->RECNO))
	PcoDetLan("000357","01","CNTA110")
	CNFTMP->(dbSkip())
EndDo

CNFTMP->(dbCloseArea())


If lContab



	cQuery := "SELECT CNW.R_E_C_N_O_ as RECNO "
	cQuery += "  FROM "+RetSQLName("CNW")+" CNW "
	cQuery += " WHERE CNW.CNW_FILIAL = '"+xFilial("CNF")+"'"
	cQuery += "   AND CNW.CNW_CONTRA = '"+cContra+"'"
	cQuery += "   AND CNW.CNW_REVISA = '"+cNRevisa+"'"
	cQuery += "   AND CNW.D_E_L_E_T_ <> '*'"

	cQuery := ChangeQuery(cQuery)
	dbUseArea( .T. ,"TOPCONN",TcGenQry(,,cQuery),"CNWTMP", .F. , .T. )




	dbSelectArea("CNW")
	While !CNWTMP->(Eof())
		CNW->(dbGoTo(CNWTMP->RECNO))
		RecLock("CNW", .F. )
			dbDelete()
		MsUnlock()
		CNWTMP->(dbSkip())
	EndDo

	CNWTMP->(dbCloseArea())




	cQuery := "SELECT CNV.R_E_C_N_O_ as RECNO "
	cQuery += "  FROM "+RetSQLName("CNV")+" CNV "
	cQuery += " WHERE CNV.CNV_FILIAL = '"+xFilial("CNV")+"'"
	cQuery += "   AND CNV.CNV_CONTRA = '"+cContra+"'"
	cQuery += "   AND CNV.CNV_REVISA = '"+cNRevisa+"'"
	cQuery += "   AND CNV.D_E_L_E_T_ <> '*'"

	cQuery := ChangeQuery(cQuery)
	dbUseArea( .T. ,"TOPCONN",TcGenQry(,,cQuery),"CNVTMP", .F. , .T. )




	dbSelectArea("CNV")
	While !CNVTMP->(Eof())
		CNV->(dbGoTo(CNVTMP->RECNO))
		RecLock("CNV", .F. )
			dbDelete()
		MsUnlock()
		CNVTMP->(dbSkip())
	EndDo

	CNVTMP->(dbCloseArea())
EndIf




If CNC->(FieldPos("CNC_REVISA")) > 0
	dbSelectArea("CNC")
	dbSetOrder(1)
	While dbSeek(xFilial("CNC")+cContra+cNRevisa)
		RecLock("CNC", .F. )
			dbDelete()
		MsUnLock()
	End
EndIf




dbSelectArea("CN9")
dbSetOrder(1)
If dbSeek(xFilial("CN9")+cContra+cNRevisa)
	RecLock("CN9", .F. )
		dbDelete()
	MsUnlock()
EndIf




If dbSeek(xFilial("CN9")+cContra+cORevisa)
	RecLock("CN9", .F. )
		CN9->CN9_REVATU := ""
	MsUnlock()
EndIf




If lCN140EXREV
	ExecBlock("CN140EXREV", .F. , .F. ,{cContra,cORevisa,cNRevisa,cCodTR})
EndIf

Return Nil



















Function CN140MkPlan(aPlan,cPlan,nVlTot,cCronog)
Local nPos      := aScan(aPlan,{|x| x[1]==cPlan})
cCronog := If( cCronog == nil, "", cCronog ) ;



If nPos = 0
	aAdd(aPlan,{cPlan,nVlTot,nVlTot,cCronog,If(FindFunction("CNAGWLoad"),CNAGWLoad(4,TRBCN9->CN9_NUMERO,cPlan),{})})
Else
	aDel(aPlan,nPos)
	aSize(aPlan,len(aPlan)-1)
EndIf

Return


















Function CN140MkCron(aCron,cCron)
Local nPos := aScan(aCron,cCron)

If nPos = 0
	aAdd(aCron,cCron)
Endif

Return



















Function CN140MkCtbCron(aCronCtb,cCronCtb)
Local nPos := aScan(aCronCtb,cCronCtb)

If nPos = 0
	aAdd(aCronCtb,cCronCtb)
Else
	aDel(aCronCtb,nPos)
	aSize(aCronCtb,len(aCronCtb)-1)
EndIf

Return























Function CN140LItem(cContra,cRevisa,aPlan,aItens,aHeaderIt,cCodTR,lAtuGDad)

Local lRet      := .T. 

Local aRet      := {}
Local aArea     := GetArea()
Local aCN140ADC := {}
Local aStruCNB  := {}

Local nX
Local nY
Local nZ
Local nPos
Local nPosCnt
Local nQtdTot

Local cQuery := ""
Local cPlan  := ""
Local cTipRev:= Posicione("CN0",1,xFilial("CN0")+cCodTr,"CN0_TIPO")




Local nPosPrcOr := aScan(aHeaderIT,{|x| x[2] == "CNB_PRCORI"})
Local nPosQtdOr := aScan(aHeaderIT,{|x| x[2] == "CNB_QTDORI"})
Local nPosQtdAc := aScan(aHeaderIT,{|x| x[2] == "CNB_QTRDAC"})
Local nPosQtdDc := aScan(aHeaderIT,{|x| x[2] == "CNB_QTRDRZ"})
Local nPosODesc := aScan(aHeaderIT,{|x| x[2] == "CNBDESC"})
Local nPosOVDes := aScan(aHeaderIT,{|x| x[2] == "CNBVLDESC"})
Local nPosNDesc := aScan(aHeaderIT,{|x| x[2] == "CNBNDESC"})
Local nPosNVDes := aScan(aHeaderIT,{|x| x[2] == "CNBNVLDESC"})
Local nPosVlUnt := aScan(aHeaderIT,{|x| x[2] == "CNB_VLUNIT"})
Local nPosVlRel := aScan(aHeaderIT,{|x| x[2] == "CNB_REALI"})
Local nPosDtRel := aScan(aHeaderIT,{|x| x[2] == "CNB_DTREAL"})
Local nPosConta := aScan(aHeaderIT,{|x| x[2] == "CNB_CONTA"})
Local lCN140ITEM:= ExistBlock("CN140ITEM")
Local lCN140ITF := ExistBlock("CN140ITF")
Local lRevReal  := (cTipRev=="3")

lAtuGDad := If( lAtuGDad == nil, .T. , lAtuGDad ) ;




aItens := Array(len(aPlan))
For nX:=1 to len(aPlan)
	cPlan+="'"+aPlan[nX,1]+"',"
Next
cPlan:=SubStr(cPlan,1,len(cPlan)-1)
dbSelectArea("CNB")
CNB->(dbSetOrder(1))

cQuery := "SELECT CNB.*, CNB.R_E_C_N_O_ RECNOCNB, 0 CNB_REC_WT, '' CNB_ALI_WT "
cQuery += "  FROM "+RetSqlName("CNB")+" CNB "
cQuery += " WHERE CNB.CNB_FILIAL =  '"+xFilial("CNB")+"'"
cQuery += "   AND CNB.CNB_CONTRA = '"+cContra+"'"
cQuery += "   AND CNB.CNB_REVISA = '"+cRevisa+"'"
cQuery += "   AND CNB.CNB_NUMERO in ("+cPlan +")"
cQuery += "   AND "






cQuery += "  (((CNB.CNB_SLDMED > 0 AND CNB.CNB_VLTOTR>0) OR "



cQuery += " CNB.CNB_VLTOTR=0) OR (CNB.CNB_QTDORI=CNB.CNB_QUANT) "
If CNB->(FieldPos("CNB_ITMDST")) > 0
	cQuery += " AND (CNB.CNB_ITMDST='') "
EndIf

cQuery += ") AND CNB.D_E_L_E_T_ = ' ' "
cQuery += " ORDER BY " + SqlOrder(CNB->(IndexKey()))

cQuery := ChangeQuery(cQuery)
dbUseArea( .T. ,"TOPCONN",TcGenQry(,,cQuery),"TRB", .F. , .T. )


TCSetField("TRB","CNB_QUANT"  ,"N",TamSX3("CNB_QUANT")[1] ,TamSX3("CNB_QUANT")[2])
TCSetField("TRB","CNB_VLUNIT" ,"N",TamSX3("CNB_VLUNIT")[1],TamSX3("CNB_VLUNIT")[2])
TCSetField("TRB","CNB_VLTOT " ,"N",TamSX3("CNB_VLTOT ")[1],TamSX3("CNB_VLTOT ")[2])
TCSetField("TRB","CNB_DESC"   ,"N",TamSX3("CNB_DESC")[1]  ,TamSX3("CNB_DESC")[2])
TCSetField("TRB","CNB_PERC"   ,"N",TamSX3("CNB_PERC")[1]  ,TamSX3("CNB_PERC")[2])
TCSetField("TRB","CNB_QTDMED" ,"N",TamSX3("CNB_QTDMED")[1],TamSX3("CNB_QTDMED")[2])
TCSetField("TRB","CNB_SLDMED" ,"N",TamSX3("CNB_SLDMED")[1],TamSX3("CNB_SLDMED")[2])
TCSetField("TRB","CNB_PRCORI" ,"N",TamSX3("CNB_PRCORI")[1],TamSX3("CNB_PRCORI")[2])
TCSetField("TRB","CNB_QTDORI" ,"N",TamSX3("CNB_QTDORI")[1],TamSX3("CNB_QTDORI")[2])
TCSetField("TRB","CNB_QTRDAC" ,"N",TamSX3("CNB_QTRDAC")[1],TamSX3("CNB_QTRDAC")[2])
TCSetField("TRB","CNB_QTRDRZ" ,"N",TamSX3("CNB_QTRDRZ")[1],TamSX3("CNB_QTRDRZ")[2])
TCSetField("TRB","CNB_REALI"  ,"N",TamSX3("CNB_REALI")[1] ,TamSX3("CNB_REALI")[2])
TCSetField("TRB","CNB_REC_WT" ,"N",10,0)

TCSetField("TRB","CNB_DTANIV" ,"D",8,0)
TCSetField("TRB","CNB_DTREAL" ,"D",8,0)

TCSetField("TRB","CNB_PROXAV" ,"D",8,0)
TCSetField("TRB","CNB_ULTAVA" ,"D",8,0)


If !Eof()
	dbSelectArea("TRB")
	dbGoTop()

	While !Eof()




		nPos := aScan(aPlan,{|x| x[1]==TRB->CNB_NUMERO})
		If (nPos > 0)




			If ValType(aItens[nPos]) <> "A"
				aItens[nPos] := {}
			EndIf

			nY := len(aItens[nPos])+1
			aSize(aItens[nPos],nY)
			aItens[nPos][nY] := Array(Len(aHeaderIt)+1)




			For nX:=1 to TRB->(FCount())
				nPosCnt := aScan(aHeaderIt,{|x| x[2] == TRB->(FieldName(nX))})
				If nPosCnt > 0
					If	IsHeadRec(TRB->(FieldName(nX)))
						aItens[nPos][nY][nPosCnt] := TRB->RECNOCNB
					ElseIf IsHeadAlias(TRB->(FieldName(nX)))
						aItens[nPos][nY][nPosCnt] := "CNB"
					Else
						aItens[nPos][nY][nPosCnt] := TRB->(FieldGet(nX))
					EndIf
				EndIf
			Next

			dbSelectArea("CNB")
			dbSetOrder(1)
			CNB->(dbGoto(TRB->RECNOCNB))
			aStruCNB := CNB->(dbStruct())

			For nZ:=1 to len(aStruCNB)
				If aStruCNB[nZ][2]=="M"
					nMemCustom := aScan(aHeaderIT,{|x| x[2] ==  aStruCNB[nZ][1]})
					aItens[nPos][nY][nMemCustom] :=&(CNB->(aStruCNB[nZ][1]))
				EndIf
			Next

			If lCN140ITEM
				aRet := ExecBlock("CN140ITEM", .F. , .F. ,{aHeaderIT,aItens[nPos][nY]})
				If valtype(aRet) == "A"
					aItens[nPos][nY] := aRet
				EndIf
			EndIf




			If !Empty(TRB->CNB_DTANIV)






				If lRevisad .And.  nRevRtp == 1




					nTot := TRB->CNB_QUANT




					If TRB->CNB_QTRDAC > 0
						nTot -= TRB->CNB_QTRDAC
					EndIf
					nTot := nTot*TRB->CNB_VLUNIT

					aItens[nPos][nY][nPosPrcOr] := TRB->CNB_VLUNIT
					aItens[nPos][nY][nPosQtdOr] := TRB->CNB_QUANT
					aItens[nPos][nY][nPosODesc] := TRB->CNB_DESC
					aItens[nPos][nY][nPosOVDes] := ((nTot*TRB->CNB_DESC)/100)
					aItens[nPos][nY][nPosNDesc] := TRB->CNB_DESC

					If nPosVlRel > 0
						aItens[nPos][nY][nPosVlRel] := TRB->CNB_REALI
						aItens[nPos][nY][nPosDtRel] := TRB->CNB_DTREAL
						aItens[nPos][nY][nPosQtdAc] := 0
						aItens[nPos][nY][nPosQtdDc] := 0
					EndIf





					If TRB->CNB_QTRDAC > 0
						nTot := TRB->CNB_QTRDAC*TRB->CNB_VLUNIT
						aItens[nPos][nY][nPosNVDes] := ((nTot*TRB->CNB_DESC)/100)
					Else
						aItens[nPos][nY][nPosNVDes] := 0
					EndIf
				else




					aItens[nPos][nY][nPosPrcOr] := TRB->CNB_VLUNIT
					aItens[nPos][nY][nPosQtdOr] := TRB->CNB_QUANT
					aItens[nPos][nY][nPosODesc] := TRB->CNB_DESC
					aItens[nPos][nY][nPosOVDes] := TRB->CNB_VLDESC
					aItens[nPos][nY][nPosNVDes] := 0
					aItens[nPos][nY][nPosNDesc] := TRB->CNB_DESC
					aItens[nPos][nY][nPosQtdAc] := 0
					aItens[nPos][nY][nPosQtdDc] := 0

					If nPosVlRel > 0
						aItens[nPos][nY][nPosVlRel] := TRB->CNB_VLUNIT
						aItens[nPos][nY][nPosDtRel] := dDataBase
					EndIf
				EndIf
			Else




				aItens[nPos][nY][nPosPrcOr] := 0
				aItens[nPos][nY][nPosQtdOr] := 0
				aItens[nPos][nY][nPosODesc] := 0
				aItens[nPos][nY][nPosOVDes] := 0
				aItens[nPos][nY][nPosNVDes] := TRB->CNB_VLDESC
				aItens[nPos][nY][nPosNDesc] := TRB->CNB_DESC
			EndIf
			aItens[nPos][nY][nPosConta] := TRB->CNB_CONTA
			aItens[nPos][nY][Len(aItens[nPos][nY])] := .F. 
		EndIF

		If lCN140ITF
			aRet := ExecBlock("CN140ITF", .F. , .F. ,{aHeaderIT,aItens[nPos][nY]})
			If valtype(aRet) == "A"
				aItens[nPos][nY] := aRet
			EndIf
		EndIf

		dbSelectArea("TRB")
		dbSkip()
	Enddo

	TRB->(dbCloseArea())




	If ExistBlock("CN140ADC")
		aCN140ADC := ExecBlock("CN140ADC", .F. , .F. ,{aPlan,aHeaderIT,aItens,cTipRev})
		If valtype(aCN140ADC) == "A"
			aItens := aClone(aCN140ADC)
		EndIf
	EndIf




	If lAtuGDad
		CN140LoadIt(aPlan[1,1],aItens,aPlan,,cCodTR)
	EndIf
Else
 Aviso("CNTA140","Planilha não possui itens para Inclusão da Revisão.",{"Ok"})
 lRet := .F. 
 TRB->(dbCloseArea())
EndIf


RestArea(aArea)

Return lRet





















Function CN140LoadIt(cPlan,aItens,aPlan,cPlanAtu,cCodTR)

Local nPos := aScan(aPlan,{|x| Alltrim(x[1]) == Alltrim(cPlan)})
Local nPosO
Local cTipRev := ""
Local lRet    := .T. 

If nPos > 0
	cTipRev := Posicione("CN0",1,xFilial("CN0")+cCodTR,"CN0_TIPO")




	If cPlanAtu <> Nil
		nPosO := aScan(aPlan,{|x| x[1]==cPlanAtu})
		If nPosO > 0
			If cTipRev == "4" .And.  Round(nVlPAtu,TamSx3("CNA_VLTOT")[2]) <> Round(aPlan[nPosO,2],TamSx3("CNA_VLTOT")[2])
				lRet := .F. 
				Aviso("CNTA140",If( cPaisLoc $ "ANG|PTG", "Durante a readequação do contrato, o valor da folha de cálculo não pode ser alterado", "Durante a readequação do contrato, o valor da planilha não pode ser alterado" ),{"OK"})
			EndIf

			If lRet
				aItens[nPosO] := oGetDad1:aCols
			EndIf
		EndIf

		If lRet
			cPlanAtu := cPlan
		EndIf
	EndIf

	If lRet
		If cTipRev == "4"
			oVlPOri:cTitle := Transform(aPlan[nPos,2],PesqPict("CNA","CNA_VLTOT"))
			nVlPAtu := aPlan[nPos,3]
		EndIf



		oGetDad1:aCols :=  aItens[nPos]
		oGetDad1:oBrowse:nAt   :=  1
		oGetDad1:oBrowse:Refresh()
	EndIf
EndIf

Return lRet




















Function CN140BckPn(cCodTR,lCronog,aCron,aPlan,cPlanAtu,cCron,lContab,aHeaderIt,aItens,aPlan,cRevisa)
Local lRet      := .T. 
Local nPnAtu    := oWizard:NPanel
Local cTpEspc   := Posicione("CN0",1,xFilial("CN0")+cCodTR,"CN0_ESPEC")
Local cItmDst   := ""
Local cQuery    := ""
Local nX        := 0
Local nItmPla   := 0
Local aStrucCNB := CNB->(dbStruct())

cPlanAtu := If( cPlanAtu == nil, "", cPlanAtu ) ;
cCron := If( cCron == nil, "", cCron ) ;
aCron := If( aCron == nil, {}, aCron ) ;
aHeaderIt := If( aHeaderIt == nil, {}, aHeaderIt ) ;
aItens := If( aItens == nil, {}, aItens ) ;
aPlan := If( aPlan == nil, {}, aPlan ) ;
cRevisa := If( cRevisa == nil, "", cRevisa ) ;

cTpRev := Posicione("CN0",1,xFilial("CN0")+cCodTR,"CN0_TIPO")

If cPlanAtu <> Nil
	cPlanAtu := ""
EndIf

If cCron <> Nil .And.  aCron<> Nil
	If len(aCron) >0
		cCron := aCron[1]
	EndIf
EndIf





If !Empty(cRevisa)
	For nItmPla := 1 to len(aPlan)
		cQuery := "SELECT * FROM " +RetSQLName("CNB")+" CNB WHERE CNB_FILIAL = '"+xFilial("CNB")+"' AND "
		cQuery += "CNB_CONTRA = '"+cContra         +"' AND CNB_REVISA = '"+cRevisa+"' AND "
		cQuery += "CNB_NUMERO = '"+aPlan[nItmPla,1]+"' AND "
		cQuery += "D_E_L_E_T_ <> '*' ORDER BY CNB_NUMERO,CNB_ITEM"
		cQuery := ChangeQuery( cQuery )

		dbUseArea( .T. , "TopConn", TCGenQry(,,cQuery), "CNBZERO", .F. , .F.  )

		For nX :=1 To Len(aStrucCNB)
		     If CNBZERO->(FieldPos(aStrucCNB[nx,1])) > 0 .And.  aStrucCNB[nx,2] <> "C"
		       TCSetField("CNBZERO",aStrucCNB[nx,1],aStrucCNB[nx,2],aStrucCNB[nx,3],aStrucCNB[nx,4])
		     Endif
		next

		CNBZERO->(dbGoTop())
		While !CNBZERO->(Eof())

				If CNB->(FieldPos("CNB_ITMDST")) > 0
					cItmDst := CNBZERO->CNB_ITMDST
				EndIf

				If !(((CNBZERO->CNB_SLDMED > 0 .AND.  CNBZERO->CNB_VLTOTR>0) .OR.  (CNBZERO->CNB_SLDMED > 0 .And.  CNBZERO->CNB_VLTOTR==0)) .AND.  (CNBZERO->CNB_QTDORI==CNBZERO->CNB_QUANT) .OR. (cItmDst=="") )
				nItemCNB := aScan(aItens[nItmPla],{|x| x[1] == CNBZERO->CNB_ITEM})
				If CNBZERO->CNB_SLDMED == 0 .And. (nItemCNB> 0)
				    aDel(aItens[nItmPla],nItemCNB)
				    aSize(aItens[nItmPla],len(aItens[nItmPla])-1)
				EndIf
			EndIf
		    CNBZERO->(dbSkip())
		End
		CNBZERO->(dbCloseArea())
	Next
EndIf

Do Case
	Case nPnAtu = 12
        aItensCtb:={}
        aHeaderCt:={}

		If cTpRev == "1"
			If(cTpEspc == "1")
				oWizard:NPanel := 10
			ElseIf (cTpEspc == "3")
		   		oWizard:NPanel := If(lMedeve,5,12)
			ElseIf (cTpEspc == "4")
		   		oWizard:NPanel := If(lMedeve,10,12)
			EndIf
		ElseIf cTpRev == "8"
			oWizard:NPanel := if(lRevisad,5,4)
		EndIf

	Case nPnAtu = 13
        aItensCtb:={}
        aHeaderCt:={}

	Case nPnAtu = 14
		If lRevisad .And.  nRevRtp == 3
			lRet := .F. 
		ElseIf cTpRev == "5"
			oWizard:NPanel := 6
		ElseIf cTpRev == "2"
			oWizard:NPanel := 7
		ElseIf cTpRev == "7"
			oWizard:NPanel := 8
		ElseIf cTpRev == "6" .OR.  !lFixo



			oWizard:NPanel := if(lRevisad,5,4)
		ElseIf cTpRev == "8"
   			aItensCtb:={}
	         aHeaderCt:={}
    		oWizard:NPanel := 14
		ElseIf !lCronog
			oWizard:NPanel := 10
		ElseIf cTpRev == "1"
			If(cTpEspc == "1")
				oWizard:NPanel := 10
			ElseIf (cTpEspc == "3")
				If !lContab
			   		oWizard:NPanel := If(lMedeve,If(lRevisad,5,4),12)
				Else
					oWizard:NPanel := 14
				Endif
			ElseIf (cTpEspc == "4")
				If !lContab
			   		oWizard:NPanel := If(lMedeve,10,12)
				Else
					oWizard:NPanel := 14
				Endif
			EndIf
		ElseIf lMedeve
			oWizard:NPanel := if(lRevisad,5,4)
		EndIf

	Case nPnAtu = 10
		If cTpEspc <> "4"
			oWizard:NPanel := if(lRevisad,5,4)
		Else
			oWizard:NPanel := 9
		EndIf
		aCron := {}

	Case nPnAtu = 11
		oWizard:NPanel :=11
		aCron := {}

	Case nPnAtu = 8
		aPlan := {}
		oWizard:NPanel := if(lRevisad,5,4)

	Case nPnAtu = 7 .Or.  nPnAtu = 6 .Or.  nPnAtu = 5
		oWizard:NPanel := if(lRevisad,5,4)

	Case nPnAtu = 16
		oWizard:NPanel := 3
EndCase




If ExistBlock("CN140BCK")
	ExecBlock("CN140BCK", .F. , .F. ,{cContra,cRevisa,aPlan,oWizard:NPanel,aCron,aItens})
EndIf

Return lRet


































Function CN140GerRev(cContra,cRevisa,cCodTR,cJust,cCodPr,dDtRein,dDtReaj,cClaus,aItens,aPlan,aParcelas,aCron,dFContra,aHeaderIt,aHeadParc,aColsParc,aItensCtb,nValor,lAltVlr,nVgAdit,aReman,cFornec,cLoja,dDtRefe)
Local aContra := {}

Local cNrevisa := Soma1(if(Empty(cRevisa),strzero(0,TamSX3("CN9_REVISA")[1]),cRevisa))
Local cEspRev  := Posicione("CN0",1,xFilial("CN0")+cCodTR,"CN0_ESPEC")
Local cUnVig   := ""

Local nX
Local nTContra
Local nValAdit := 0
Local nSldAdit := 0
Local nVlInd   := 0
Local nOrigAdt := 0
Local nOrigSld := 0
Local nOrigAtu := 0

Local lRet     := .T. 
Local lPERev   := ExistBlock("CN140GREV")
Local lCN140BRV:= .T. 

Local dFimOld  := dFContra
aReman := If( aReman == nil, {}, aReman ) ;
cFornec := If( cFornec == nil, "", cFornec ) ;
cLoja := If( cLoja == nil, "", cLoja ) ;

cTpRev   := Posicione("CN0",1,xFilial("CN0")+cCodTR,"CN0_TIPO")

If Empty(cJust)
	Help("CNTA140", 1, "CNTA140_16")
	lRet := .F. 
EndIf

If	Type("oUnVig")=="O"
	If oUnVig:nat == 1
		cUnVig := "1"
	ElseIf oUnVig:nat == 2
		cUnVig := "2"
	ElseIf oUnVig:nat == 3
		cUnVig := "3"
	Else
		cUnVig := "4"
	EndIf
EndIf



If ExistBlock("CN140BRV")
	lCN140BRV := ExecBlock("CN140BRV", .F. , .F. ,{cContra,cRevisa,cCodTR,cJust,cCodPr,dDtRein,dDtReaj,cClaus,aItens,aPlan,aParcelas,aCron,dFContra,aHeaderIt,aHeadParc,aColsParc,nValor,lAltVlr,nVgAdit})
	If valtype(lCN140BRV) == "L"
		lRet := lCN140BRV
	EndIf
EndIf

If lRet



	cQuery := "SELECT CNF.R_E_C_N_O_ as RECNO "
	cQuery += "  FROM "+RetSQLName("CNF")+" CNF "
	cQuery += " WHERE CNF.CNF_FILIAL = '"+xFilial("CNF")+"'"
	cQuery += "   AND CNF.CNF_CONTRA = '"+cContra+"'"
	cQuery += "   AND CNF.CNF_REVISA = '"+cRevisa+"'"
	cQuery += "   AND CNF.D_E_L_E_T_ <> '*' "

	cQuery := ChangeQuery( cQuery )
	dbUseArea( .T. , "TopConn", TCGenQry(,,cQuery), "CNFTMP", .F. , .F.  )




	While !CNFTMP->(Eof())
		CNF->(dbGoTo(CNFTMP->RECNO))
		PcoDetLan("000357","01","CNTA110", .T. )
		CNFTMP->(dbSkip())
	EndDo

	CNFTMP->(dbCloseArea())

	Begin Sequence; BeginTran()
	dbSelectArea("CN9")
	dbSetOrder(1)
	dbSeek(xFilial("CN9")+cContra+cRevisa)

	If	(!Empty(aReman) .Or.  !Empty(cFornec)) .And.  CN9->(!Eof())
		RecLock("CN9", .F. )
		CN9->CN9_SITUAC := "10"
		MsUnlock()
	EndIf

	If	Type("lMedeve")<>"L"
		lMedeve  := (Posicione("CN1",1,xFilial("CN1")+CN9->CN9_TPCTO,"CN1_MEDEVE") == "1")
	EndIf
	If	Type("lFisico")<>"L"
		lFisico  := ((CN1->(FieldPos("CN1_CROFIS")) > 0) .And.  Posicione("CN1",1,xFilial("CN1")+CN9->CN9_TPCTO,"CN1_CROFIS") == "1")
	EndIf
	If	Type("lContab")<>"L"
		lContab  := (Posicione("CN1",1,xFilial("CN1")+CN9->CN9_TPCTO,"CN1_CROCTB") == "1")
	EndIf
	If	Type("oUnVig")<>"O"
		cUnVig:=CN9->CN9_UNVIGE
	EndIf




	If !lRevisad



		nTContra := FCount()

		aContra := Array(nTContra)



		For nX:=1 to nTContra
			aContra[nX]:=FieldGet(nX)
		Next


		RecLock("CN9", .F. )
			CN9->CN9_REVATU := cNrevisa
		MsUnlock()




		RecLock("CN9", .T. )
		For nX:=1 to nTContra
			FieldPut(nX,aContra[nX])
		Next

	Else
		If nRevRtp == 2




			nOrigAdt := CN9->CN9_VLADIT
			nOrigSld := CN9->CN9_SALDO
			nOrigAtu := CN9->CN9_VLATU
		EndIf

		dbSeek(xFilial("CN9")+CN9->CN9_NUMERO+CN9->CN9_REVATU)
		RecLock("CN9", .F. )
	EndIf




	CN9->CN9_REVISA := cNrevisa
	CN9->CN9_SITUAC := "09"
	CN9->CN9_TIPREV := cCodTR
	CN9->CN9_DTREV  := dDataBase
	CN9->CN9_REVATU := ""
	CN9->CN9_VIGE   := nVgAdit
	CN9->CN9_UNVIGE := cUnVig
	If	(!Empty(aReman) .Or.  !Empty(cFornec))
		CN9->CN9_RESREM := " "
	EndIf




	If lAltVlr
		If nValor < CN9->CN9_SALDO
			CN9->CN9_SALDO -= (CN9->CN9_VLATU-nValor)
		Else
			CN9->CN9_SALDO += (nValor-CN9->CN9_VLATU)
		EndIf
		CN9->CN9_VLATU := nValor
	EndIf


	Do Case
		Case cTpRev = "5"
			CN9->CN9_MOTPAR := cCodPr
			CN9->CN9_DTFIMP := dDtRein
		Case cTpRev = "2"
			CN9->CN9_DTREAJ := dDtReaj
			If CN9->(FieldPos("CN9_DREFRJ")) > 0
				CN9->CN9_DREFRJ := dDtRefe
			EndIf
	EndCase

	MsUnlock()

	MSMM(,,,cJust,1,,,"CN9","CN9_CODJUS")

	If cTpRev == "7"
		MSMM(,,,cClaus,1,,,"CN9","CN9_CODCLA")
	EndIf




	CN140RevCNC(cContra,cRevisa,cNRevisa)

	If cTpRev == "1"
		If cEspRev == "1"



			CN140GerPlan(cContra,cRevisa,cNRevisa,aItens,aPlan,@nValAdit,aHeaderIt)
			CNA->(dbCommit())
			CNB->(dbCommit())




			CN140RevMed(cContra,cRevisa,cNRevisa)

			If !lRevisad .Or.  (lRevisad .And.  nRevRtp == 2)
				If !lMedeve



					CN140CopCron(cContra,cRevisa,cNRevisa)

					If lFisico
						CNA->(dbCommit())
						CNB->(dbCommit())
						CNF->(dbCommit())
						CNS->(dbCommit())




						CN140AtuFsc(cContra,cNRevisa, .T. ,cRevisa)
					EndIf
				EndIf
				If lContab



					CN140CopCtb(cContra,cRevisa,cNRevisa)
				EndIf
			EndIf

			If  (lRevisad .And.  nRevRtp == 1)
	 			If lFisico .And.  !lMedeve
					CNA->(dbCommit())
	  				CNB->(dbCommit())
					CNF->(dbCommit())
					CNS->(dbCommit())




					CN140AtuFsc(cContra,cNRevisa, .T. ,cRevisa)
				EndIf
			EndIf

			RecLock("CN9", .F. )
				If lRevisad .And.  nRevRtp == 2




					CN9->CN9_VLADIT := nOrigAdt + nValAdit
					CN9->CN9_VLATU  := nOrigAtu + nValAdit
					CN9->CN9_SALDO  := nOrigSld + nValAdit
				Else



					CN9->CN9_VLADIT += nValAdit
					CN9->CN9_VLATU  += nValAdit
					CN9->CN9_SALDO  += nValAdit
				EndIf
			MsUnlock()

		ElseIf cEspRev == "3"
			If !lMedeve



				CN140GerCron(@aParcelas,aCron,cContra,cRevisa,cNRevisa,aHeadParc,aColsParc)
			EndIF

			If lContab



				CN140GerCt(aItensCtb,cContra,cRevisa,cNRevisa)
			EndIf

			If !lRevisad



				CN140GerPlan(cContra,cRevisa,cNRevisa,aItens,aPlan,@nValAdit,aHeaderIt)



				CN140RevMed(cContra,cRevisa,cNRevisa)
			EndIf



			dFimOld := CN9->CN9_DTFIM
			RecLock("CN9", .F. )
				CN9->CN9_DTFIM := dFContra
			MsUnlock()




			CN140AjuDt(cContra,cNRevisa,dFimOld,CN9->CN9_DTFIM,lMedeve)

		Else
			If !lMedeve



				CN140GerCron(@aParcelas,aCron,cContra,cRevisa,cNRevisa,aHeadParc,aColsParc)
			EndIF

			If lContab



				CN140GerCt(aItensCtb,cContra,cRevisa,cNRevisa)
			EndIF




			CN140GerPlan(cContra,cRevisa,cNRevisa,aItens,aPlan,@nValAdit,aHeaderIt,      , .T.    ,        ,aReman)




			CN140RevMed(cContra,cRevisa,cNRevisa)




			dFimOld := CN9->CN9_DTFIM
			RecLock("CN9", .F. )
				CN9->CN9_DTFIM := dFContra
				If lRevisad .And.  nRevRtp == 2
					CN9->CN9_VLADIT := nOrigAdt + nValAdit
					CN9->CN9_VLATU  := nOrigAtu + nValAdit
					CN9->CN9_SALDO  := nOrigSld + nValAdit
				Else
					CN9->CN9_VLADIT += nValAdit
					CN9->CN9_VLATU  += nValAdit
					CN9->CN9_SALDO  += nValAdit
				EndIf
			MsUnlock()




			CN140AjuDt(cContra,cNRevisa,dFimOld,CN9->CN9_DTFIM,lMedeve)
		EndIf

	ElseIf cTpRev == "6"
		If !lMedeve



			CN140GerCron(@aParcelas,aCron,cContra,cRevisa,cNRevisa,aHeadParc,aColsParc)
		EndIf
		If lContab



			CN140CopCtb(cContra,cRevisa,cNRevisa)
		EndIf
		If !lRevisad



			CN140GerPlan(cContra,cRevisa,cNRevisa,aItens,aPlan,@nValAdit,aHeaderIt)



			CN140RevMed(cContra,cRevisa,cNRevisa)
		EndIf

	ElseIf cTpRev == "3"



		CN140GerPlan(cContra,cRevisa,cNRevisa,aItens,aPlan,@nValAdit,aHeaderIt, .T. , .F. ,@nSldAdit)




		CN140RevMed(cContra,cRevisa,cNRevisa)

		If !lRevisad .Or.  (lRevisad .And.  nRevRtp == 2)
			If !lMedeve



				CN140CopCron(cContra,cRevisa,cNRevisa)

				If lFisico
					CNA->(dbCommit())
					CNB->(dbCommit())
					CNF->(dbCommit())
					CNS->(dbCommit())




					CN140AtuFsc(cContra,cNRevisa, .T. ,cRevisa)
				EndIf
			EndIf
			If lContab



				CN140CopCtb(cContra,cRevisa,cNRevisa)
			EndIf
		EndIf

		If  (lRevisad .And.  nRevRtp == 1)
	 		If lFisico .And.  !lMedeve
				CNA->(dbCommit())
	  			CNB->(dbCommit())
				CNF->(dbCommit())
				CNS->(dbCommit())




				CN140AtuFsc(cContra,cNRevisa, .T. ,cRevisa)
			EndIf
		EndIf

		RecLock("CN9", .F. )
			If lRevisad .And.  nRevRtp == 2




				CN9->CN9_VLATU  := nOrigAtu + nValAdit
				CN9->CN9_SALDO  := nOrigSld + nSldAdit
			Else



				CN9->CN9_VLATU  += nValAdit
				CN9->CN9_SALDO  += nSldAdit
			EndIf
		MsUnlock()

	ElseIf cTpRev == "4"



		CN140GerPlan(cContra,cRevisa,cNRevisa,aItens,aPlan,@nValAdit,aHeaderIt,, .T. )




		CN140RevMed(cContra,cRevisa,cNRevisa)

		If !lRevisad .Or.  (lRevisad .And.  nRevRtp == 2)
			If !lMedeve



				CN140CopCron(cContra,cRevisa,cNRevisa)
			EndIf
			If lContab



				CN140CopCtb(cContra,cRevisa,cNRevisa)
			EndIf
		EndIf

	ElseIf cTpRev == "8"



		CN140GerCt(aItensCtb,cContra,cRevisa,cNRevisa)




		If !lRevisad .Or.  (lRevisad .And.  nRevRtp == 2)
			CN140GerPlan(cContra,cRevisa,cNRevisa,aItens,aPlan,@nValAdit,aHeaderIt)




			CN140RevMed(cContra,cRevisa,cNRevisa)


			If !lMedeve



				CN140CopCron(cContra,cRevisa,cNRevisa)
			EndIf
		EndIf

	ElseIf cTpRev == "9"

		RecLock("CN9", .F. )
		CN9->CN9_INDICE := cIndNovo
		MsUnLock()




		CN140GerPlan(cContra,cRevisa,cNRevisa,aItens,aPlan,@nValAdit,aHeaderIt)
		CNA->(dbCommit())
		CNB->(dbCommit())




		CN140RevMed(cContra,cRevisa,cNRevisa)

		If !lMedeve



			CN140CopCron(cContra,cRevisa,cNRevisa)
		EndIf
		If lContab



			CN140CopCtb(cContra,cRevisa,cNRevisa)
		EndIf

		CN140Indice("4",,,cRevisa,cNRevisa)

	ElseIf cTpRev == "A"

		If	Type("oGetDad1")=="O"
			aItFor := AClone(oGetDad1:aCols)
		Else
			CN140Forne("1",cNRevisa)
		EndIf

		If	lRet



			CN140GerPlan(cContra,cRevisa,cNRevisa,aItens,aPlan,@nValAdit,aHeaderIt)
			CNA->(dbCommit())
			CNB->(dbCommit())




			CN140RevMed(cContra,cRevisa,cNRevisa)

			If !lMedeve



				CN140CopCron(cContra,cRevisa,cNRevisa)
			EndIf

			If lContab



				CN140CopCtb(cContra,cRevisa,cNRevisa)
			EndIf

			CN140Forne("5",cNRevisa,,cFornec,cLoja)

		EndIf

	Else




		If !lRevisad .Or.  (lRevisad .And.  nRevRtp == 2)
			CN140GerPlan(cContra,cRevisa,cNRevisa,aItens,aPlan,@nValAdit,aHeaderIt)




			CN140RevMed(cContra,cRevisa,cNRevisa)


			If !lMedeve



				CN140CopCron(cContra,cRevisa,cNRevisa)
			EndIf
			If lContab



				CN140CopCtb(cContra,cRevisa,cNRevisa)
			EndIf
		EndIf
	EndIf
	If cTpRev == "2" .And.  CN9->(FieldPos("CN9_DREFRJ")) > 0
		CN150VdApr(CN9->CN9_DREFRJ,CN9->CN9_DTREAJ,CN9->CN9_INDICE,@nVlInd)
		Processa({|| lRet := CN150Reaj(cContra,cNRevisa,cRevisa,lMedeve,CN9->CN9_DTREAJ,CN9->CN9_DREFRJ,nVlInd,lFisico,lFixo,lContab)})
	Endif
	EndTran(); end
	If lRet .And.  lPERev
	   ExecBlock("CN140GREV", .F. , .F. ,{cContra,cRevisa,cNRevisa,cCodTR,cJust,cClaus})
	EndIf
EndIf

Return lRet


















Function CN140CronF(cContra,cNRevisa)
Local dRet   := dDataBase
Local cQuery := ""





cQuery := "SELECT MAX(CNF.CNF_PRUMED) as CNF_PRUMED "
cQuery += "  FROM "+RetSQLName("CNF")+" CNF "
cQuery += " WHERE CNF.CNF_FILIAL  = '"+xFilial("CNF")+"'"
cQuery += "   AND CNF.CNF_CONTRA  = '"+cContra+"'"
cQuery += "   AND CNF.CNF_REVISA  = '"+cNRevisa+"'"
cQuery += "   AND CNF.D_E_L_E_T_ <> '*'"

cQuery := ChangeQuery( cQuery )
dbUseArea( .T. , "TopConn", TCGenQry(,,cQuery), "CNFMAX", .F. , .F.  )

TCSetField("CNFMAX","CNF_PRUMED","D",8,0)




dRet := CNFMAX->CNF_PRUMED

CNFMAX->(dbCloseArea())

Return dRet























Function CN140GerCron(aParcelas,aCron,cContra,cRevisa,cNRevisa,aHeadParc,aColsParc)

Local nPosCpo :=0
Local nPos1   := 0
Local nPos2   := 0
Local nPos3   := 0
Local nPos4   := 0
Local nPos5   := 0
Local nPos6   := 0
Local nPos7   := 0
Local nPos8   := 0
Local nX
Local nY
Local nZ
Local nCron
Local nParc
Local nReg
Local nPosDPar
Local nPosPeri

Local cFilCod  := xFilial("CNF")
Local cQuery   := ""
Local cCrons   := ""
Local cPlan    :=""

Local lDeleta  := .F. 
Local lEditad  := .F. 
Local lRet     := .T. 
Local lPeriod  := (CNF->(FieldPos("CNF_PERIOD")) > 0)
Local lRetorna := .F. 

Local aNCron   := {}
Local aArea    := GetArea()

If lPeriod .And.  !Empty(aParcelas)
	nPosDPar := aScan(oGetDados:aHeader,{ |x| UPPER(AllTrim(x[2])) == "CNF_DIAPAR"})
	nPosPeri := aScan(oGetDados:aHeader,{ |x| UPPER(AllTrim(x[2])) == "CNF_PERIOD"})
EndIf




If lRevisad



	dbSelectArea("CN9")
	dbSetORder(1)
	If dbSeek(xFilial("CN9")+cContra+cRevisa) .And.  !Empty(CN9->CN9_REVATU)
		cNRevisa := CN9->CN9_REVATU
	EndIf

	For nX:=1 to Len(aCron)
		cCrons += "'"+aCron[nX]+"',"
	Next

	cCrons:=SubStr(cCrons,1,len(cCrons)-1)

	If lFisico



		cQuery := "SELECT CNS.R_E_C_N_O_ as RECNO "
		cQuery += "  FROM "+RetSQLName("CNS")+" CNS "
		cQuery += " WHERE CNS.CNS_FILIAL = '"+xFilial("CNS")+"'"
		cQuery += "   AND CNS.CNS_CRONOG in ("+cCrons+")"
		cQuery += "   AND CNS.CNS_CONTRA = '"+cContra+"'"
		cQuery += "   AND CNS.CNS_REVISA = '"+cNRevisa+"'"
		cQuery += "   AND CNS.D_E_L_E_T_ = ' ' "

		cQuery := ChangeQuery( cQuery )
		dbUseArea( .T. , "TopConn", TCGenQry(,,cQuery), "CNSTMP", .F. , .F.  )

		dbSelectArea("CNS")




		While !CNSTMP->(Eof())
			dbGoTo(CNSTMP->RECNO)
			RecLock("CNS")
				dbDelete()
			MsUnlock()

			CNSTMP->(dbSkip())
		EndDo

		CNSTMP->(dbCloseArea())
	EndIf




	cQuery := "SELECT CNF.R_E_C_N_O_ as RECNO "
	cQuery += "  FROM "+RetSQLName("CNF")+" CNF "
	cQuery += " WHERE CNF.CNF_FILIAL  = '"+xFilial("CNF")+"'"
	cQuery += "   AND CNF.CNF_NUMERO in ("+cCrons+")"
	cQuery += "   AND CNF.CNF_CONTRA  = '"+cContra+"'"
	cQuery += "   AND CNF.CNF_REVISA  = '"+cNRevisa+"'"
	cQuery += "   AND CNF.D_E_L_E_T_ <> '*' "
	cQuery += " ORDER BY CNF.CNF_NUMERO,CNF.CNF_PARCEL"

	cQuery := ChangeQuery( cQuery )
	dbUseArea( .T. , "TopConn", TCGenQry(,,cQuery), "CNFTMP", .F. , .F.  )

	dbSelectArea("CNF")




	While !CNFTMP->(Eof())
		dbGoTo(CNFTMP->RECNO)
		RecLock("CNF")
			dbDelete()
		MsUnlock()

		CNFTMP->(dbSkip())
	EndDo

	CNFTMP->(dbCloseArea())
EndIf

cQuery := "SELECT DISTINCT CNF.CNF_NUMERO "
cQuery += "  FROM "+RetSQLName("CNF")+" CNF "
cQuery += " WHERE CNF.CNF_FILIAL = '"+xFilial("CNF")+"'"
cQuery += "   AND CNF.CNF_CONTRA = '"+cContra+"'"
cQuery += "   AND CNF.CNF_REVISA = '"+cRevisa+"'"
cQuery += "   AND CNF.D_E_L_E_T_ <> '*' "

cQuery := ChangeQuery( cQuery )
dbUseArea( .T. , "TopConn", TCGenQry(,,cQuery), "CNFTMP", .F. , .F.  )




While !CNFTMP->(Eof())
	nX := aScan(aCron,CNFTMP->CNF_NUMERO)



	If nX > 0



		If lFisico
			CNA->(dbSetOrder(2))
			CNA->(dbSeek(xFilial("CNA")+CNFTMP->CNF_NUMERO))
			cPlan := CNA->CNA_NUMERO
		EndIf



		For nY:=1 to len(aParcelas[nX])
			RecLock("CNF", .T. )
		      	For nZ:=1 to len(oGetDados:aHeader)
		      		If oGetDados:aHeader[nZ,10] <> "V"
			      		CNF->&(oGetDados:aHeader[nZ,2]) := aParcelas[nX,nY,nZ]
			      	EndIf
		      	Next

				CNF->CNF_CONTRA := cContra
				CNF->CNF_REVISA := cNRevisa
				CNF->CNF_MAXPAR := len(aParcelas[nX])
				CNF->CNF_NUMERO := aCron[nX]
				CNF->CNF_FILIAL := xFilial("CNF")
				If lPeriod
					CNF->CNF_PERIOD := aParcelas[nX,1,nPosPeri]
					CNF->CNF_DIAPAR := aParcelas[nX,1,nPosDPar]
				EndIf
			MsUnlock()




			PcoDetLan("000357","01","CNTA110")




			If lFisico
				For nZ:=1 to len(aColsParc[nx,ny])
					RecLock("CNS", .T. )
						CNS->CNS_FILIAL := xFilial("CNS")
						CNS->CNS_CONTRA := CNF->CNF_CONTRA
						CNS->CNS_REVISA := CNF->CNF_REVISA
						CNS->CNS_CRONOG := CNF->CNF_NUMERO
						CNS->CNS_PARCEL := CNF->CNF_PARCEL
						CNS->CNS_PLANI  := cPlan
						For nPosCpo:=1 to len(aHeadParc)
							CNS->&(aHeadParc[nPosCpo,2]) := aColsParc[nX,nY,nZ,nPosCpo]
						Next
					MsUnlock()
				Next
			EndIf
		Next
	ElseIf !lRevisad



		aAdd(aNCron,CNFTMP->CNF_NUMERO)
	EndIf
	CNFTMP->(dbSkip())
EndDo

CNFTMP->(dbCloseArea())




If len(aNCron) > 0
	CN140CopCron(cContra,cRevisa,cNRevisa,@aNCron)
EndIf

RestArea(aArea)

Return lRet




















Function CN140CopCron(cContra,cRevisa,cNRevisa,aCron)
Local nX       := 0
Local aAreaCN9 := {}
Local cCrons   := ""
Local cAlias   := ""
Local cFilCNS  := ""
local cCronCtr := ""
Local aStrucCNF:= CNF->(dbStruct())
Local aStrucCNS:= CNS->(dbStruct())

aCron := If( aCron == nil, {}, aCron ) ;

If lFisico
	cFilCNS := xFilial("CNS")
EndIf

If len(aCron) > 0
	For nX:=1 to Len(aCron)
		cCrons += "'"+aCron[nX]+"',"
	Next

	cCrons:=SubStr(cCrons,1,len(cCrons)-1)
EndIf




If lRevisad



	aAreaCN9 := CN9->(GetArea())
	dbSelectArea("CN9")
	dbSetOrder(1)
	If dbSeek(xFilial("CN9")+cContra+cRevisa) .And.  !Empty(CN9->CN9_REVATU)
		cNRevisa := CN9->CN9_REVATU
	EndIf
	RestArea(aAreaCN9)

	cQuery := "SELECT CNS.R_E_C_N_O_ as RECNO "
	cQuery += "  FROM "+RetSQLName("CNS")+" CNS "
	cQuery += " WHERE CNS.CNS_FILIAL = '"+xFilial("CNS")+"'"
	cQuery += "   AND CNS.CNS_CONTRA = '"+cContra+"'"
	cQuery += "   AND CNS.CNS_REVISA = '"+cNRevisa+"'"
	cQuery += "   AND "
	If !Empty(cCrons)
		cQuery += " CNS.CNS_NUMERO in ("+ cCrons +") AND "
	EndIF
	cQuery += " CNS.D_E_L_E_T_ = ' '"

	cQuery := ChangeQuery( cQuery )
	dbUseArea( .T. , "TopConn", TCGenQry(,,cQuery), "CNSTMP", .F. , .F.  )

	For nx:=1 to len(aStrucCNS)
		if CNSTMP->(FieldPos(aStrucCNS[nx,1])) > 0 .And.  aStrucCNS[nx,2] <> "C"
			TCSetField( "CNSTMP", aStrucCNS[nx,1], aStrucCNS[nx,2], aStrucCNS[nx,3], aStrucCNS[nx,4] )
		endif
	Next
	dbSelectArea("CNS")




	While !CNSTMP->(Eof())
		dbGoTo(CNSTMP->RECNO)
		RecLock("CNS")
			dbDelete()
		MsUnlock()

		CNSTMP->(dbSkip())
	EndDo

	CNSTMP->(dbCloseArea())




	cQuery := "SELECT CNF.R_E_C_N_O_ as RECNO "
	cQuery += "  FROM "+RetSQLName("CNF")+" CNF "
	cQuery += " WHERE CNF.CNF_FILIAL = '"+xFilial("CNF")+"'"
	cQuery += "   AND CNF.CNF_CONTRA = '"+cContra+"'"
	cQuery += "   AND CNF.CNF_REVISA = '"+cNRevisa+"'"
	cQuery += "   AND "
	If !Empty(cCrons)
		cQuery += " CNF.CNF_NUMERO in ("+ cCrons +") AND "
	EndIF
	cQuery += " CNF.D_E_L_E_T_ <> '*'"

	cQuery := ChangeQuery( cQuery )
	dbUseArea( .T. , "TopConn", TCGenQry(,,cQuery), "CNFTMP", .F. , .F.  )

	For nx:=1 to len(aStrucCNF)
		if CNFTMP->(FieldPos(aStrucCNF[nx,1])) > 0 .And.  aStrucCNF[nx,2] <> "C"
			TCSetField( "CNFTMP", aStrucCNF[nx,1], aStrucCNF[nx,2], aStrucCNF[nx,3], aStrucCNF[nx,4] )
		endif
	Next
	dbSelectArea("CNF")




	While !CNFTMP->(Eof())
		dbGoTo(CNFTMP->RECNO)
		RecLock("CNF")
			dbDelete()
		MsUnlock()

		CNFTMP->(dbSkip())
	EndDo

	CNFTMP->(dbCloseArea())
EndIf




cQuery := "SELECT CNF.* "
cQuery += "  FROM "+RetSQLName("CNF")+" CNF "
cQuery += " WHERE CNF.CNF_FILIAL = '"+xFilial("CNF")+"'"
cQuery += "   AND CNF.CNF_CONTRA = '"+cContra+"'"
cQuery += "   AND CNF.CNF_REVISA = '"+cRevisa+"'"
cQuery += "   AND "
If !Empty(cCrons)
	cQuery += " CNF.CNF_NUMERO in ("+ cCrons +") AND "
EndIF
cQuery += " CNF.D_E_L_E_T_ <> '*'"

cQuery := ChangeQuery( cQuery )
dbUseArea( .T. , "TopConn", TCGenQry(,,cQuery), "CNFTMP", .F. , .F.  )

For nx:=1 to len(aStrucCNF)
	if CNFTMP->(FieldPos(aStrucCNF[nx,1])) > 0 .And.  aStrucCNF[nx,2] <> "C"
		TCSetField( "CNFTMP", aStrucCNF[nx,1], aStrucCNF[nx,2], aStrucCNF[nx,3], aStrucCNF[nx,4] )
	EndIf
Next
dbSelectArea("CNF")




While !CNFTMP->(Eof())
	RecLock("CNF", .T. )
		For nx:=1 to CNF->(FCount())
			If  aStrucCNF[nx,2]<>"M"
				FieldPut(nx,CNFTMP->&(CNF->( FieldName(nX) )))
			EndIf
		Next
		CNF->CNF_REVISA := cNRevisa
	MsUnlock()

	If lFisico
		If Empty(cAlias) .Or.  cCronCtr <> CNFTMP->CNF_NUMERO
			cCronCtr := CNFTMP->CNF_NUMERO
			If !Empty(cAlias)
				(cAlias)->(dbCloseArea())
			EndIf

			cQuery := "SELECT CNA.CNA_NUMERO,CNB.CNB_ITEM "
			cQuery += "  FROM "+RetSQLName("CNB")+" CNB, "+RetSQLName("CNA")+" CNA "
			cQuery += " WHERE CNB.CNB_FILIAL = '"+xFilial("CNB")+"'"
			cQuery += "   AND CNA.CNA_FILIAL = '"+xFilial("CNA")+"'"
			cQuery += "   AND CNB.CNB_CONTRA = '"+cContra+"'"
			cQuery += "   AND CNB.CNB_CONTRA = CNA.CNA_CONTRA "
			cQuery += "   AND CNB.CNB_REVISA = '"+cNRevisa+"'"
			cQuery += "   AND CNB.CNB_REVISA = CNA.CNA_REVISA"
			cQuery += "   AND CNB.CNB_NUMERO = CNA.CNA_NUMERO"
			cQuery += "   AND CNA.CNA_CRONOG = '"+CNFTMP->CNF_NUMERO+"'"
			cQuery += "   AND CNB.CNB_PRCORI = 0 "
			cQuery += "   AND CNB.D_E_L_E_T_ = ' '"
			cQuery += "   AND CNA.D_E_L_E_T_ = ' '"

			cQuery := ChangeQuery( cQuery )
			cAlias := GetNextAlias()
			dbUseArea( .T. , "TopConn", TCGenQry(,,cQuery), cAlias, .F. , .F.  )
		EndIf

		(cAlias)->(dbGoTop())
		dbSelectArea("CNS")
		While !(cAlias)->(Eof())
			RecLock("CNS", .T. )
				CNS->CNS_FILIAL := cFilCNS
				CNS->CNS_CONTRA := CNFTMP->CNF_CONTRA
				CNS->CNS_REVISA := cNRevisa
				CNS->CNS_CRONOG := CNFTMP->CNF_NUMERO
				CNS->CNS_PARCEL := CNFTMP->CNF_PARCEL
				CNS->CNS_ITEM   := (cAlias)->CNB_ITEM
				CNS->CNS_PLANI  := (cAlias)->CNA_NUMERO
			MsUnlock()
			(cAlias)->(dbSkip())
		EndDo
	EndIf
	CNFTMP->(dbSkip())
EndDo

If !Empty(cAlias)
	(cAlias)->(dbCloseArea())
EndIf

CNFTMP->(dbCLoseArea())

If lFisico



	cQuery := "SELECT CNS.* "
	cQuery += "  FROM "+RetSQLName("CNS")+" CNS "
	cQuery += " WHERE CNS.CNS_FILIAL = '"+xFilial("CNS")+"'"
	cQuery += "   AND CNS.CNS_CONTRA = '"+cContra+"'"
	cQuery += "   AND CNS.CNS_REVISA = '"+cRevisa+"'"
	cQuery += "   AND "
	If !Empty(cCrons)
		cQuery += " CNS.CNS_CRONOG in ("+ cCrons +") AND "
	EndIF
	cQuery += " CNS.D_E_L_E_T_ <> '*'"

	cQuery := ChangeQuery( cQuery )
	dbUseArea( .T. , "TopConn", TCGenQry(,,cQuery), "CNSTMP", .F. , .F.  )

	For nx:=1 to len(aStrucCNS)
		if CNSTMP->(FieldPos(aStrucCNS[nx,1])) > 0 .And.  aStrucCNS[nx,2] <> "C"
			TCSetField( "CNSTMP", aStrucCNS[nx,1], aStrucCNS[nx,2], aStrucCNS[nx,3], aStrucCNS[nx,4] )
		endif
	Next
	dbSelectArea("CNS")




	While !CNSTMP->(Eof())
		RecLock("CNS", .T. )
			For nx:=1 to CNS->(FCount())
				If  aStrucCNS[nx,2]<>"M"
					FieldPut(nx,CNSTMP->&(CNS->( FieldName(nX) )))
				EndIf
			Next
			CNS->CNS_REVISA := cNRevisa
		MsUnlock()

		CNSTMP->(dbSkip())
	EndDo
	CNSTMP->(dbCLoseArea())
EndIf

Return Nil


























Function CN140GerPlan(cContra,cRevisa,cNRevisa,aItens,aPlan,nValAdit,aHeader,lReali,lReadq,nSldAdit,aReman)
Local cFilCod
Local cQuery     := ""
Local cEspCtr    := ""

Local aNPlanH:={}
Local aNPlanI:={}
Local aStrucCNA  := CNA->(dbStruct())
Local aStrucCNB  := CNB->(dbStruct())
Local aAreaCN9	 := {}

Local nTotPlH
Local nTotPlI
Local nX
Local nY
Local nIt
Local nPlanT     := 0
Local nPosPlan   := 0
Local nMotPlan   := 0
Local nPosVODes  := aScan(aHeader,{|x| x[2] == "CNBVLDESC"})
Local nPosVDesc  := aScan(aHeader,{|x| x[2] == "CNBNVLDESC"})
Local nPosDesc   := aScan(aHeader,{|x| x[2] == "CNBNDESC"})
Local nPosQtd    := aScan(aHeader,{|x| x[2] == "CNB_QUANT"})
Local nPosQtdAc  := aScan(aHeader,{|x| x[2] == "CNB_QTRDAC"})
Local nPosQtdRd  := aScan(aHeader,{|x| x[2] == "CNB_QTRDRZ"})
Local nPosVlTot  := aScan(aHeader,{|x| x[2] == "CNB_VLTOT"})
Local nPosVlUnit := aScan(aHeader,{|x| x[2] == "CNB_VLUNIT"})
Local nPosIt     := aScan(aHeader,{|x| x[2] == "CNB_ITEM"})
Local nPosProd   := aScan(aHeader,{|x| x[2] == "CNB_PRODUT"})
Local nPosDescr  := aScan(aHeader,{|x| x[2] == "CNB_DESCRI"})
Local nPosUmed   := aScan(aHeader,{|x| x[2] == "CNB_UM"})
Local nPosQtdOr  := aScan(aHeader,{|x| x[2] == "CNB_QTDORI"})
Local nPosPrcOr  := aScan(aHeader,{|x| x[2] == "CNB_PRCORI"})
Local nPosVlRel  := aScan(aHeader,{|x| x[2] == "CNB_REALI"})
Local nPosDtRel  := aScan(aHeader,{|x| x[2] == "CNB_DTREAL"})
Local nVlTReal   := 0
Local nVlDMReal  := 0




Local lRealMed := (GetNewPar("MV_CNREALM", "S") == "S")
Local lContinua:= .T. 
Local lCalcReal:= .F. 
Local nplmn    := 0
Local nPlani   := 0
Local nItMed   := 0
Local aItAtd   := {}
Local aRecParc := {}

lReali := If( lReali == nil, .F. , lReali ) ;
lReadq := If( lReadq == nil, .F. , lReadq ) ;
nSldAdit := If( nSldAdit == nil, 0, nSldAdit ) ;
aReman := If( aReman == nil, {}, aReman ) ;

If lRevisad .And.  nRevRtp == 1
	aAreaCN9 := CN9->(GetArea())
	dbSelectArea("CN9")
	dbSetOrder(1)



	If dbSeek(xFilial("CN9")+cContra+cRevisa) .And.  !Empty(CN9->CN9_REVATU)
		cRevisa := CN9->CN9_REVATU
	EndIf
	RestArea(aAreaCN9)
EndIf





If FindFunction("VerItNMed")
	aItAtd:= VerItNMed(cContra,cRevisa,lRealMed)
EndIf




cQuery := "SELECT CNA.*,CNA.R_E_C_N_O_ as RECNO "
cQuery += "  FROM "+ RetSQLName("CNA")+" CNA "
cQuery += " WHERE CNA.CNA_FILIAL = '"+xFilial("CNA")+"'"
cQuery += "   AND CNA.CNA_CONTRA = '"+cContra+"'"
cQuery += "   AND CNA.CNA_REVISA = '"+cRevisa+"'"
cQuery += "   AND CNA.D_E_L_E_T_ <> '*' "
cQuery += " ORDER BY CNA.CNA_NUMERO"

cQuery := ChangeQuery( cQuery )
dbUseArea( .T. , "TopConn", TCGenQry(,,cQuery), "CNATMP", .F. , .F.  )

For nx:=1 to len(aStrucCNA)
	if CNATMP->(FieldPos(aStrucCNA[nx,1])) > 0 .And.  aStrucCNA[nx,2] <> "C"
		TCSetField( "CNATMP", aStrucCNA[nx,1], aStrucCNA[nx,2], aStrucCNA[nx,3], aStrucCNA[nx,4] )
	endif
Next





If lRevisad .And.  nRevRtp == 2
	cQuery := "SELECT CNB.R_E_C_N_O_ as RECNO "
	cQuery += "  FROM "+RetSQLName("CNB")+" CNB "
	cQuery += " WHERE CNB.CNB_FILIAL = '"+xFilial("CNB")+"'"
	cQuery += "   AND CNB.CNB_CONTRA = '"+cContra+"'"
	cQuery += "   AND CNB.CNB_REVISA = '"+cNRevisa+"'"
	cQuery += "   AND CNB.CNB_DTANIV = '' "
	cQuery += "   AND CNB.D_E_L_E_T_ <> '*' "

	cQuery := ChangeQuery( cQuery )
	dbUseArea( .T. , "TopConn", TCGenQry(,,cQuery), "CNBTMP", .F. , .F.  )

	dbSelectArea("CNB")
	While !CNBTMP->(Eof())
		dbGoTo(CNBTMP->RECNO)
		RecLock("CNB", .F. )
			dbDelete()
		MsUnlock()
		CNBTMP->(dbSkip())
	EndDo

	CNBTMP->(dbCloseArea())
EndIf

cQuery := "SELECT CNB.*,CNB.R_E_C_N_O_ as RECNO  "
cQuery += "  FROM " +RetSQLName("CNB")+" CNB "
cQuery += " WHERE CNB.CNB_FILIAL = '"+xFilial("CNB")+"'"
cQuery += "   AND CNB.CNB_CONTRA = '"+cContra+"'"
cQuery += "   AND CNB.CNB_REVISA = '"+cRevisa+"'"
cQuery += "   AND "
cQuery += " CNB.D_E_L_E_T_ <> '*' "
cQuery += " ORDER BY CNB.CNB_NUMERO,CNB.CNB_ITEM"

cQuery := ChangeQuery( cQuery )
dbUseArea( .T. , "TopConn", TCGenQry(,,cQuery), "CNBTMP", .F. , .F.  )

For nx:=1 to len(aStrucCNB)
	if CNBTMP->(FieldPos(aStrucCNB[nx,1])) > 0 .And.  aStrucCNB[nx,2] <> "C"
		TCSetField( "CNBTMP", aStrucCNB[nx,1], aStrucCNB[nx,2], aStrucCNB[nx,3], aStrucCNB[nx,4] )
	endif
Next

cFilCod := xFilial("CNA")

TotPlH := CNATMP->(FCount())

While !CNATMP->(Eof())

	nPlanT++
	nIt      := 1
	nMotPlan := 0
	nVlTReal := 0
	nTotPlI  := CNB->(FCount())
	cEspCtr := If(Empty(CNATMP->CNA_CLIENT),"1","2")

	aSize(aNPlanI,nPlanT)
	aNPlanI[nPlanT] := {}

	nPosPlan := aScan(aPlan,{|x| x[1]==CNATMP->CNA_NUMERO})

	While !CNBTMP->(Eof()) .And.  CNBTMP->CNB_NUMERO == CNATMP->CNA_NUMERO
		aRecParc:={}
		nVlTReal := 0


		If	!Empty(aReman) .And.  AScan(aReman,{|x| x[3]==CNBTMP->CNB_PRODUT})>0

			If	CNBTMP->CNB_SLDREC > 0 .And.  CNBTMP->CNB_SLDREC <= CNBTMP->CNB_QUANT

				aRecParc:={CNBTMP->CNB_QUANT-CNBTMP->CNB_SLDREC}
			EndIf
		EndIf

		dbSelectArea("CNB")
		dbSetOrder(1)



		If !lRevisad
			RecLock("CNB", .T. )
		Else
			If nRevRtp == 2
				dbSeek(xFilial("CNB")+cContra+cNRevisa+CNBTMP->CNB_NUMERO+CNBTMP->CNB_ITEM)
			Else
				dbGoTo(CNBTMP->RECNO)
			EndIf
         	RecLock("CNB", .F. )
  		EndIf







 		For nx:=1 to nTotPlI
			cField := AllTrim( CNB->( FieldName(nX) ) )
 			If (nPosField := aScan(aHeader,{|x| AllTrim(x[2]) == cField})) > 0 .And.  nPosPlan > 0 .And.  (nIt:= aScan(aItens[nPosPlan],{|x| AllTrim(x[1]) == CNBTMP->CNB_ITEM })) > 0
				if valtype(aItens[nPosPlan][nIt][nPosField]) <>  "U"
					FieldPut(nx,aItens[nPosPlan][nIt][nPosField])
				EndIf
			Else
                if CNBTMP->(FieldPos(aStrucCNB[nx,1])) > 0
					FieldPut(nx,CNBTMP->&(CNB->( FieldName(nX) )))
				EndIf
			EndIf
		Next

		CNB->CNB_REVISA := cNRevisa
		If	!Empty(aRecParc)
			CNB->CNB_QUANT := aRecParc[1]
			CNB->CNB_VLTOT := CNB->CNB_QUANT*CNB->CNB_VLUNIT
			CNB->CNB_SLDREC:= 0
			CNB->CNB_SLDMED:= 0
		EndIf




		If nPosPlan > 0 .And.  nIt >0
			If !aItens[nPosPlan][nIt][len(aHeader)+1]
				CNB->CNB_VLTOT  := aItens[nPosPlan][nIt][nPosVlTot]
				CNB->CNB_VLDESC := aItens[nPosPlan][nIt][nPosVDesc]+aItens[nPosPlan][nIt][nPosVODes]
				CNB->CNB_QUANT  := aItens[nPosPlan][nIt][nPosQtd]
				CNB->CNB_QTRDAC := aItens[nPosPlan][nIt][nPosQtdAc]
				CNB->CNB_QTRDRZ := aItens[nPosPlan][nIt][nPosQtdRd]
				CNB->CNB_QTDORI := aItens[nPosPlan][nIt][nPosQtdOr]
				CNB->CNB_PRCORI := aItens[nPosPlan][nIt][nPosPrcOr]
				CNB->CNB_DESC   := (CNB->CNB_VLDESC*100)/CNB->CNB_VLTOT

				If lReali
					If  CNBTMP->CNB_SLDMED == 0
						CNB->CNB_REALI := 0
						CNB->CNB_DTREAL:= CTOD("  /  /  ")
						CNB->CNB_VLTOTR:= 0
						nMotPlan	   += CNB->CNB_VLTOT
						lContinua      := .F. 
					Else
						CNB->CNB_REALI := aItens[nPosPlan][nIt][nPosVlRel]
						CNB->CNB_DTREAL:= aItens[nPosPlan][nIt][nPosDtRel]
						CNB->CNB_VLTOTR:= (CNB->CNB_QTDMED*CNB->CNB_VLUNIT)+(CNB->CNB_SLDMED*CNB->CNB_REALI)
						lContinua := .T. 
					EndIf

					If lContinua



						nPlani := aScan(aItAtd,{|x| x[1,1] == CNB->CNB_NUMERO})
						If nPlani > 0





							nItMed := 0
							aEval(aItAtd[nPlani],{|x| nItMed += If(x[2] == CNB->CNB_ITEM .AND.  x[4] < DTOS(CNB->CNB_DTREAL),x[3],0)})
						Else
							nItMed := 0
						EndIf

						If lRealMed .And.  (nItMed == 0)
							nVlTReal   := (CNB->CNB_SLDMED*(CNB->CNB_REALI-((CNB->CNB_REALI*CNB->CNB_DESC)/100))) +((CNB->CNB_QTDMED*(CNB->CNB_REALI-((CNB->CNB_REALI*CNB->CNB_DESC)/100)))-(CNB->CNB_REALI*(CNB->CNB_QUANT-CNB->CNB_SLDREC)))+(CNB->CNB_VLUNIT*(CNB->CNB_QUANT-CNB->CNB_SLDREC))
						Else
							nVlTReal   := (CNB->CNB_QTDMED*(CNB->CNB_VLUNIT-((CNB->CNB_VLUNIT*CNB->CNB_DESC)/100)))+(CNB->CNB_SLDMED*(CNB->CNB_REALI-((CNB->CNB_REALI*CNB->CNB_DESC)/100)))
						EndIf
					EndIf
				EndIf


				CNB->CNB_QTREAD := 0
				CNB->CNB_VLREAD := 0
				CNB->CNB_VLRDGL := 0




				CNB->CNB_SLDMED += (CNB->CNB_QUANT-CNB->CNB_QTDORI)-(CNBTMP->CNB_QUANT-CNB->CNB_QTDORI)
				CNB->CNB_SLDREC += (CNB->CNB_QUANT-CNB->CNB_QTDORI)-(CNBTMP->CNB_QUANT-CNB->CNB_QTDORI)


				if CNB->CNB_QTRDAC > 0
					If lReadq
						CNB->CNB_QTREAD := CNB->CNB_QTRDAC
						CNB->CNB_VLREAD := CNB->CNB_QTRDAC*CNB->CNB_VLUNIT
						CNB->CNB_VLRDGL := CNB->CNB_QTRDAC*(CNB->CNB_VLUNIT-((CNB->CNB_VLUNIT*CNB->CNB_DESC)/100))
					Endif
				elseif CNB->CNB_QTRDRZ > 0
					If lReadq
						CNB->CNB_QTREAD := CNB->CNB_QTRDRZ
						CNB->CNB_VLREAD := CNB->CNB_QTRDRZ*CNB->CNB_VLUNIT
						CNB->CNB_VLRDGL := CNB->CNB_QTRDRZ*(CNB->CNB_VLUNIT-((CNB->CNB_VLUNIT*CNB->CNB_DESC)/100))
					Endif
				EndIf
			Else
				dbDelete()
			EndIf
		Else
			If lRevisad .And.  nRevRtp == 1 .And.  lReali
				lCalcReal := .T. 
				If lRealMed
					nVlTReal   := (CNB->CNB_SLDMED*(CNB->CNB_REALI-((CNB->CNB_REALI*CNB->CNB_DESC)/100))) +((CNB->CNB_QTDMED*(CNB->CNB_REALI-((CNB->CNB_REALI*CNB->CNB_DESC)/100)))-(CNB->CNB_REALI*(CNB->CNB_QUANT-CNB->CNB_SLDREC)))+(CNB->CNB_VLUNIT*(CNB->CNB_QUANT-CNB->CNB_SLDREC))
				Else
					nVlTReal   := (CNB->CNB_QTDMED*(CNB->CNB_VLUNIT-((CNB->CNB_VLUNIT*CNB->CNB_DESC)/100)))+(CNB->CNB_SLDMED*(CNB->CNB_REALI-((CNB->CNB_REALI*CNB->CNB_DESC)/100)))
				EndIf
			EndIf

			CNB->CNB_QTDORI := CNB->CNB_QUANT
			CNB->CNB_PRCORI := CNB->CNB_VLUNIT
		EndIf

		If !deleted()
			If !lCalcReal .And.  (!lReali .Or.  nPosPlan == 0)
				nMotPlan+=CNB->CNB_VLTOT-CNB->CNB_VLDESC
			Else
				nMotPlan +=nVlTReal
			EndIf
		EndIf

		MsUnLock()

		nIt++
		CNBTMP->(dbSkip())
	EndDo




	If cTpRev == "1"
	  	If nPosPlan > 0 .And.  len(aItens[nPosPlan]) > nIt-1
	  		For nX:=nIt to len(aItens[nPosPlan])
	  			If !aItens[nPosPlan][nX][len(aHeader)+1]

	  				CNB->(dBSetOrder(1))
	  				If !CNB->(DbSeek(xFilial("CNB")+CNATMP->CNA_CONTRA+cNRevisa+CNATMP->CNA_NUMERO+aItens[nPosPlan,nX,nPosIt]))
		  				RecLock("CNB", .T. )
		  			Else
		  				RecLock("CNB", .F. )
		  			Endif
		  				CNB->CNB_FILIAL := xFilial("CNB")
		  				nplmn:=0
		  				For nplmn:=1 to FCount()
		  					If aScan(aHeader,{|x| AllTrim(x[2])==CNB->(FieldName(nplmn))})>0
		  						FieldPut(nplmn,aItens[nPosPlan,nX,aScan(aHeader,{|x| x[2]==CNB->(FieldName(nplmn))})])
		  					EndIf
		  				Next
		  				CNB->CNB_NUMERO := CNATMP->CNA_NUMERO
		  				CNB->CNB_REVISA := cNRevisa
			  			CNB->CNB_CONTRA := CNATMP->CNA_CONTRA
						CNB->CNB_DTCAD  := dDataBase
						CNB->CNB_SLDMED := CNB->CNB_QUANT
						CNB->CNB_SLDREC := CNB->CNB_QUANT
						CNB->CNB_DTANIV := dDataBase
						CNB->CNB_DESC   := aItens[nPosPlan,nX,nPosDesc]
						CNB->CNB_VlDESC := aItens[nPosPlan,nX,nPosVDesc]
					MsUnLock()
	  				nMotPlan+=CNB->CNB_VLTOT-CNB->CNB_VLDESC
	  			EndIf
	  		Next
	  	EndIf
	EndIf



	dbSelectArea("CNA")
	dbSetOrder(1)
	if !lRevisad
	   RecLock("CNA", .T. )
	Else
		dbSeek(xFilial("CNA")+cContra+cNRevisa+CNATMP->CNA_NUMERO)
		RecLock("CNA", .F. )
	EndIf

   nTotPlH := CNA->( FCount() )

	for nx:=1 to nTotPlH
		If  aStrucCNA[nx,2]<>"M"
			FieldPut(nx,CNATMP->&(CNA->( FieldName(nX) )))
		EndIf
	Next


	nValAdit += nMotPlan-CNA->CNA_VLTOT
	nSldAdit += (nMotPlan-CNA->CNA_VLTOT)

	CNA->CNA_REVISA := cNRevisa
	CNA->CNA_SALDO  += (nMotPlan-CNA->CNA_VLTOT)
	CNA->CNA_VLTOT  := nMotPlan

	MsUnlock()

	CNATMP->(dbSkip())
EndDo


If AliasInDic("AGW") .And.  ValType(aPlan)=="A"
	CNB->(dbSetOrder(1))
	AGW->(dbSetOrder(2))
	For nX := 1 To Len(aPlan)
		If ValType(aTail(aPlan[nX])) == "A"
			For nIt := 1 To Len(aTail(aPlan[nX]))
				If CNB->(dbSeek(xFilial("CNB")+cContra+cNRevisa+aPlan[nX,1]+aTail(aPlan[nX])[nIt,1])) .And.  CNB->CNB_BASINS == "1"
					RecLock("AGW",!AGW->(dbSeek(xFilial("AGW")+cContra+aPlan[nX,1]+aTail(aPlan[nX])[nIt,1])))
					For nY := 1 To Len(aTail(aPlan[nX])[nIt,2])
						AGW->&(aTail(aPlan[nX])[nIt,2,nY,1]) := aTail(aPlan[nX])[nIt,2,nY,2]
					next
					AGW->AGW_FILIAL := xFilial("AGW")
					AGW->AGW_PLANIL := CNB->CNB_NUMERO
					AGW->AGW_PRODUT := CNB->CNB_PRODUT
					AGW->(MsUnLock())
				ElseIf AGW->(dbSeek(xFilial("AGW")+cContra+aPlan[nX,1]+aTail(aPlan[nX])[nIt,1]))
					RecLock("AGW", .F. )
					AGW->(dbDelete())
					AGW->(MsUnLock())
				EndIf
			next
		EndIf
	next
EndIf

CNBTMP->( dbCloseArea() )
CNATMP->( dbCloseArea() )

Return nPlanT


















Function CN140VldQtd()

Local lRet     := .T. 
Local lRotAuto := Type("lMsHelpAuto") == "L" .And.  lMsHelpAuto
Local nPosSld  := 0
Local nPosQOri := 0
Local nDif     := 0
Local nPosAcre := 0
Local nPosDecr := 0
Local nPosODesc:= 0
Local nPosOVDes:= 0
Local nPosNDesc:= 0
Local nPosNVDes:= 0
Local nPosVlUn := 0
Local nPosVlTot:= 0
Local nPosQtd  := 0
Local nX       := 0
Local nTotItens:= 0
Local nPlanVlT := 0


If FunName() == "CNTA140" .And.  !lRotAuto
	nPlanVlT := Posicione("CNA",1,xFilial("CNA")+cContra+cRevAtu,"CNA_VLTOT")
	nPosSld  := aScan(oGetDad1:aHeader,{|x| x[2] == "CNB_QTDMED"})
	nPosQOri := aScan(oGetDad1:aHeader,{|x| x[2] == "CNB_QTDORI"})

	lRet := (M->CNB_QUANT >= oGetDad1:aCols[oGetDad1:nAt][nPosSld])

	If lRet
		if cModo == "1"
			lRet     := (M->CNB_QUANT >= oGetDad1:aCols[oGetDad1:nAt][nPosQOri])
		ElseIf cModo == "2"
			lRet     := (M->CNB_QUANT <= oGetDad1:aCols[oGetDad1:nAt][nPosQOri])
		EndIf
	EndIf

	If lRet
		nPosAcre  := aScan(oGetDad1:aHeader,{|x| x[2] == "CNB_QTRDAC"})
		nPosDecr  := aScan(oGetDad1:aHeader,{|x| x[2] == "CNB_QTRDRZ"})
		nPosNDesc := aScan(oGetDad1:aHeader,{|x| x[2] == "CNBNDESC"})
		nPosNVDes := aScan(oGetDad1:aHeader,{|x| x[2] == "CNBNVLDESC"})
		nPosODesc := aScan(oGetDad1:aHeader,{|x| x[2] == "CNBDESC"})
		nPosOVDes := aScan(oGetDad1:aHeader,{|x| x[2] == "CNBVLDESC"})
		nPosVlUn  := aScan(oGetDad1:aHeader,{|x| x[2] == "CNB_VLUNIT"})
		nPosVlTot := aScan(oGetDad1:aHeader,{|x| x[2] == "CNB_VLTOT"})
		nPosQtd   := aScan(oGetDad1:aHeader,{|x| x[2] == "CNB_QUANT"})




		nDif := M->CNB_QUANT - oGetDad1:aCols[oGetDad1:nAt][nPosQOri]

		nTotItens := 0
   		For nx := 1 to Len(oGetDad1:aCols)
  			If nx <> n
 				nTotItens += oGetDad1:aCols[nx,nPosQtd]*oGetDad1:aCols[nx,nPosVlUn]-((ogetDad1:aCols[nx,nPosVlUn]*ogetDad1:aCols[nx,nPosNDesc])/100)
 			EndIf
		Next

		nVlPAtu := nTotItens

		if nDif > 0
			oGetDad1:aCols[oGetDad1:nAt][nPosAcre] := nDif
			oGetDad1:aCols[oGetDad1:nAt][nPosDecr] := 0
			ogetDad1:aCols[oGetDad1:nAt][nPosNVDes]:= ((nDif*ogetDad1:aCols[oGetDad1:nAt][nPosVlUn])*ogetDad1:aCols[oGetDad1:nAt][nPosNDesc])/100
			ogetDad1:aCols[oGetDad1:nAt][nPosOVDes]:= (((M->CNB_QUANT-nDif)*ogetDad1:aCols[oGetDad1:nAt][nPosVlUn])*ogetDad1:aCols[oGetDad1:nAt][nPosODesc])/100
		 	nVlPAtu += M->CNB_QUANT*(ogetDad1:aCols[oGetDad1:nAt][nPosVlUn]-((ogetDad1:aCols[oGetDad1:nAt][nPosVlUn]*ogetDad1:aCols[oGetDad1:nAt][nPosNDesc])/100))
		 	If (nPlanVlT-nVlPAtu >0) .And.  (nPlanVlT-nVlPAtu <=0.01)
		  		nVlPAtu += nPlanVlT-nVlPAtu
			EndIf
		Else
			oGetDad1:aCols[oGetDad1:nAt][nPosDecr] := nDif*-1
			oGetDad1:aCols[oGetDad1:nAt][nPosAcre] := 0
			ogetDad1:aCols[oGetDad1:nAt][nPosNVDes]:= 0
			ogetDad1:aCols[oGetDad1:nAt][nPosOVDes]:= ((M->CNB_QUANT*ogetDad1:aCols[oGetDad1:nAt][nPosVlUn])*ogetDad1:aCols[oGetDad1:nAt][nPosODesc])/100
			nVlPAtu += M->CNB_QUANT*(ogetDad1:aCols[oGetDad1:nAt][nPosVlUn]-((ogetDad1:aCols[oGetDad1:nAt][nPosVlUn]*ogetDad1:aCols[oGetDad1:nAt][nPosODesc])/100))
		EndIf
	EndIf
	oVlPAtu:Refresh()
EndIf

Return lRet

















Function CN140VldDesc()
Local lRet  := .T. 
Local nDesc := M->&("CNBNDESC")
Local nPosAcre := aScan(oGetDad1:aHeader,{|x| x[2] == "CNB_QTRDAC"})
Local nPosQtd  := aScan(oGetDad1:aHeader,{|x| x[2] == "CNB_QUANT"})
Local nPosVlUn := aScan(oGetDad1:aHeader,{|x| x[2] == "CNB_VLUNIT"})
Local nPosNVDes:= aScan(oGetDad1:aHeader,{|x| x[2] == "CNBNVLDESC"})
Local nPosVlOri:= aScan(oGetDad1:aHeader,{|x| x[2] == "CNB_PRCORI"})

If nDesc < 0 .Or.  nDesc > 100
	lRet := .F. 
Else
	If ogetDad1:aCols[oGetDad1:nAt][nPosVlOri] <> 0
		if ogetDad1:aCols[oGetDad1:nAt][nPosAcre] > 0
			ogetDad1:aCols[oGetDad1:nAt][nPosNVDes] := NoRound(((ogetDad1:aCols[oGetDad1:nAt][nPosAcre]*ogetDad1:aCols[oGetDad1:nAt][nPosVlUn])*nDesc)/100,TamSX3("CNE_VLDESC")[2])
		Else
			ogetDad1:aCols[oGetDad1:nAt][nPosNVDes] := 0
		EndIf
	Else
		if ogetDad1:aCols[oGetDad1:nAt][nPosQtd] > 0
			ogetDad1:aCols[oGetDad1:nAt][nPosNVDes] := NoRound(((ogetDad1:aCols[oGetDad1:nAt][nPosQtd]*ogetDad1:aCols[oGetDad1:nAt][nPosVlUn])*nDesc)/100,TamSX3("CNE_VLDESC")[2])
		Else
			ogetDad1:aCols[oGetDad1:nAt][nPosNVDes] := 0
		EndIf
	EndIf
EndIf

Return lRet


























Function CN140VlP11(cContra,cRevisa,cCron,aParcelas,aCron,aTotCont,aFscVl,aColsParc,aHeadParc)
Local lRet       := .T. 
Local nPos       := aScan(aCron,cCron)
Local nx         := 0
Local ny         := 0
Local nPosItm    := 0
Local nPosPrumed := aScan(aHeader,{|x| x[2] == "CNF_PRUMED"})
Local nPosSaldo  := aScan(aHeader,{|x| x[2] == "CNF_SALDO"})
Local dRevisao   := Posicione("CN9",1,xFilial("CN9")+cContra+cRevisa,"CN9_DTREV")

If !lFisico
	If nTotPlan <> nTotCronog
		Help("CNTA140",1,"CNTA140_11")
		lRet := .F. 
	EndIf
Else
	For nx:=1 to len(aFscVl[nPos])
		If aFscVl[nPos,nx,3] <> 0
			nPosItm := aScan(aHeadParc,{|x| AllTrim(x[2]) == "CNS_ITEM"})
			Aviso("CNTA140",OemToAnsi(If( cPaisLoc $ "ANG|PTG", "O saldo físico do elemento ", "O saldo físico do item " ))+aColsParc[nPos,1,nx,nPosItm]+OemToAnsi(If( cPaisLoc $ "ANG|PTG", " não foi distribuído correctamente entre as parcelas do cronograma ", " não foi distríbuido corretamente entre as parcelas do cronograma " ))+cCron,{"OK"})
			lRet := .F. 
			Exit
		EndIf
	Next
EndIf

If lRet .And.  cTipoCtr$"6"
	For nX:=1 to len(oGetDados:aCols)
	    If  oGetDados:aCols[nX,nPosPrumed]<=dDataBase .And.  oGetDados:aCols[nX,nPosPrumed]>=dRevisao .And.  oGetDados:aCols[nX,nPosSaldo]>0
	    	Aviso("CNTA140",OemtoAnsi(If( cPaisLoc $ "ANG|PTG", "Existem saldos para serem medidos durante o período de paralisação. Reestruture os cronogramas antes de aprovar a revisão", "Existem saldos para serem medidos durante o período de paralisação, reestruture os cronogramas antes de aprovar a revisão" )),{"Ok"})
			lRet := .F. 
			Exit
	    EndIf
	next
EndIf

If lRet
	If nPos > 0
		aTotCont[nPos,1] := nTotCronog
		aTotCont[nPos,8] := nTotPlan
		aParcelas[nPos]  := oGetDados:aCols
	EndIf




	For nX := 1 to len(aCron)
		If !lFisico
			If aTotCont[nX,1] <> 	aTotCont[nX,8]
				Aviso("CNTA140","O cronograma "+aCron[nX]+" possui saldo a ser distribuído",{"OK"})
				lRet := .F. 
				Exit
			EndIf
		Else
			For nY:=1 to len(aFscVl[nX])
				If aFscVl[nX,nY,3] <> 0
					nPosItm := If(nPosItm=0,aScan(aHeadParc,{|x| AllTrim(x[2]) == "CNS_ITEM"}),nPosItm)
					Aviso("CNTA140",OemToAnsi(If( cPaisLoc $ "ANG|PTG", "O saldo físico do elemento ", "O saldo físico do item " ))+aColsParc[nX,1,nY,nPosItm]+OemToAnsi(If( cPaisLoc $ "ANG|PTG", " não foi distribuído correctamente entre as parcelas do cronograma ", " não foi distríbuido corretamente entre as parcelas do cronograma " ))+aCron[nX],{"OK"})
					lRet := .F. 
					Exit
				EndIf
			Next
		EndIf
	Next

	If cTipoCtr$"1/6/8" .And.   cEspec $ "3/4/5" .And.  lContab
		CN140PlnCt(cContra,cRevisa,@lRet,@aCron)
		IF lRet .and.  lMotREvOk
			oWizard:NPanel := 11
		Else
			oWizard:NPanel := 15
		Endif
	Else
		If lRet
		   	oWizard:NPanel := 15
		EndIf
	Endif
EndIf

If ExistBlock("CN140BLQ")
 	aRetCnv := ExecBlock("CN140BLQ", .F. , .F. ,{cTpCron,nParcel,lAltPar})
	If ValType(aRetCnv)=="A"
		If Len(aRetCnv)>=1 .And.  ValType(aRetCnv[1]) == "C"
			cTpCronCtb  := aRetCnv[1]
		Endif
		If Len(aRetCnv)>=2 .And.  ValType(aRetCnv[2]) == "N"
			nParcelas := aRetCnv[2]
		Endif
		If Len(aRetCnv)>=3 .And.  ValType(aRetCnv[3]) == "L"
			lAltPar := aRetCnv[3]
		Endif
	EndIf
EndIf

Return lRet


























Function CN140LoadPr(cCron,aParcelas,aCron,aTotCont,cCronO,oCron,aHeadParc,aColsParc,aFscVl,cCodTR)

Local lRet    := .T. 
Local nPos    := aScan(aCron,cCron)
local nPosO   := aScan(aCron,cCronO)
Local nPosItm := 0
Local nx
cCodTR := If( cCodTR == nil, "", cCodTR ) ;

If cCron <> cCronO
	If !lFisico
		If nTotPlan <> nTotCronog
			Help("CNTA140",1,"CNTA140_11")
			lRet      := .F. 
			oCron:nAt := nPosO
			cCron     := cCronO
		EndIf
	Else
		For nx:=1 to len(aFscVl[nPosO])
			If aFscVl[nPosO,nx,3] <> 0
				nPosItm := aScan(aHeadParc,{|x| AllTrim(x[2]) == "CNS_ITEM"})
				Aviso("CNTA140",OemToAnsi(If( cPaisLoc $ "ANG|PTG", "O saldo físico do elemento ", "O saldo físico do item " ))+aColsParc[nPosO,1,nx,nPosItm]+OemToAnsi(If( cPaisLoc $ "ANG|PTG", " não foi distribuído correctamente entre as parcelas do cronograma ", " não foi distríbuido corretamente entre as parcelas do cronograma " ))+cCronO,{"OK"})
				lRet      := .F. 
				oCron:nAt := nPosO
				cCron     := cCronO
				Exit
			EndIf
		Next
	EndIf

	If lRet .And.  nPos > 0
		If !Empty(cCronO) .And.  cCronO <> cCron




			nPosO := aScan(aCron,cCronO)
			aTotCont[nPosO,1] := nTotCronog
			aTotCont[nPosO,8] := nTotPlan

			aParcelas[nPosO] := oGetDados:aCols
		EndIf

		oGetDados:aCols := aParcelas[nPos]
		oGetDados:nMax  :=Len(aParcelas[nPos])





		If lFisico
			aItVl := aFscVl[nPos]
			oGetDados:oBrowse:bLDblClick := {|| If(oGetDados:oBrowse:COLPOS==3,(CN140Fisico(4,@aParcelas[nPos],oGetDados:nAt,aColsParc[nPos],aHeadParc,aFscVl[nPos],cCodTR),oGetDados:aCols:=aParcelas[nPos],CN110AtuVal(),oGetDados:oBrowse:Refresh(),aFscVl[nPos] := aItVl),oGetDados:EDITCELL()) }
		EndIf

		oGetDados:oBrowse:Refresh()

		oTotPlan:cTitle   := Transform(aTotCont[nPos,8],PesqPict("CNA","CNA_VLTOT"))
		oTotCronog:cTitle := Transform(aTotCont[nPos,1],PesqPict("CNA","CNA_VLTOT"))
		oSaldDist:cTitle  := Transform(aTotCont[nPos,8]-aTotCont[nPos,1],PesqPict("CNA","CNA_VLTOT"))
		oSaldCont:cTitle  := Transform(aTotCont[nPos,9],PesqPict("CN9","CN9_SALDO"))
		oSaldPlan:cTitle  := Transform(aTotCont[nPos,7],PesqPict("CNA","CNA_SALDO"))


		nTotCronog := aTotCont[nPos,1]
		nTotPlan   := aTotCont[nPos,8]


		cCronO := cCron
	EndIf
EndIf

Return lRet







































Function CN140VlP10(aParcelas,aTotCont,cContra,cRevisa,aCron,lArrasto,lDist,oTpCron,nParcel,cCronO,dFContra,cCodTR,aAditPlan,nVgAdit,aHeadParc,aColsParc,aFscVl,aAditQtd,aHeaderIT,aItens,oBtnFsc,aParAnt,aParVlR)

Local lRet     := .T. 

Local cCrons   := ""
Local cQuery   := ""
Local cCampos  := "CNF_NUMERO|CNF_CONTRA|CNF_MAXPAR|CNF_REVISA|CNF_PERANT"
Local cEspRev  := Posicione("CN0",1,xFilial("CN0")+cCodTR,"CN0_ESPEC")

Local aNCpo    := {}
Local aCpo     := {}
Local aStrucCNF:= CNF->(dbStruct())
Local aRetPac  := {}
Local aItmAdt  := {}

Local nTotAdit	:= 0
Local nPosDtF	:= 0
Local nX		:= 0
Local nY		:= 0
Local nPos		:= 0
Local nPosPlan	:= 0
Local nDif		:= 0
Local nPosVPrv	:= 0
Local nPosVRea	:= 0

Local dAvc
Local dMaxDate := Posicione("CN9",1,xFilial("CN9")+cContra+cRevisa,"CN9_DTINIC")

If lFisico
	aAdd(aNCpo,"CNF_VLPREV")
	oBtnFsc:lVisibleControl := .T. 
	oBtnFsc:Refresh()
Else
	oBtnFsc:lVisibleControl := .F. 
	oBtnFsc:Refresh()
EndIf




If (lRevisad .And.  (nRevRtp==1))
	dbSelectArea("CN9")
	dbSetOrder(1)
	If dbSeek(xFilial("CN9")+cContra+cRevisa) .And.  !Empty(CN9->CN9_REVATU)
		cRevisa := CN9->CN9_REVATU
	EndIf
EndIf


oBrowse4:Refresh()
oCron:aItems := ASort(aCron)
oCron:nAt := 1

aTotCont := {}

If Len(aCron) == 0
	Help("CNTA140",1,"CNTA140_12")
	lRet := .F. 
EndIf
If !lFisico
	oWizard:NPanel := 15
EndIf
If lRet .And.  lFisico
	For nX:=1 to Len(aCron)
		cCrons += "'"+aCron[nX]+"',"
	Next

	cCrons:=SubStr(cCrons,1,len(cCrons)-1)

	dbSelectArea("SX3")
	dbSetOrder(1)
	If dbSeek("CNF", .F. )
		While !Eof() .And.  SX3->X3_ARQUIVO=="CNF"
			If ( X3USO(SX3->X3_USADO) .And.  cNivel >= SX3->X3_NIVEL) .And.  !(AllTrim(SX3->X3_CAMPO) $ cCampos)









				AAdd(aHeader,{AllTrim(X3Titulo()), AllTrim(SX3->X3_CAMPO), SX3->X3_PICTURE, SX3->X3_TAMANHO, SX3->X3_DECIMAL, SX3->X3_VALID, SX3->X3_USADO, SX3->X3_TIPO, SX3->X3_F3, SX3->X3_CONTEXT})
			EndIf

			If SX3->X3_VISUAL == "A" .And.  (aScan(aNCpo,AllTrim(SX3->X3_CAMPO)) == 0)
				aAdd(aCpo,AllTrim(SX3->X3_CAMPO))
			EndIf
			dbSkip()
		EndDo
	EndIf


	If TRBCNF->(RecCount()) <> len(aCron)
		cQuery := "SELECT Max(CNF.CNF_PRUMED) as CNF_PRUMED "
		cQuery += "  FROM "+RetSQLName("CNF")+" CNF "
		cQuery += " WHERE CNF.CNF_FILIAL = '"+xFilial("CNF")+"'"
		cQuery += "   AND CNF.CNF_NUMERO not in ("+cCrons +")"
		cQuery += "   AND CNF.CNF_CONTRA = '"+cContra +"'"
		cQuery += "   AND CNF.CNF_REVISA = '"+cRevisa +"'"
		cQuery += "   AND CNF.D_E_L_E_T_ <> '*'"

		cQuery := ChangeQuery( cQuery )
		dbUseArea( .T. , "TopConn", TCGenQry(,,cQuery), "CNFTMP", .F. , .F.  )

		TCSetField("CNFTMP","CNF_PRUMED","D",8,0)

		dMaxDate := CNFTMP->CNF_PRUMED

		CNFTMP->(dbCloseArea())
	EndIf

	cQuery := "SELECT * "
	cQuery += "  FROM "+RetSQLName("CNF")+" CNF "
 	cQuery += " WHERE CNF.CNF_FILIAL = '"+xFilial("CNF")+"'"
	cQuery += "   AND CNF.CNF_NUMERO in ("+cCrons+")"
	cQuery += "   AND CNF.CNF_CONTRA = '"+cContra+"'"
	cQuery += "   AND CNF.CNF_REVISA = '"+cRevisa+"'"
	cQuery += "   AND CNF.D_E_L_E_T_ <> '*' "
	cQuery += " Order by CNF.CNF_NUMERO,CNF.CNF_PARCEL"

	cQuery := ChangeQuery( cQuery )
	dbUseArea( .T. , "TopConn", TCGenQry(,,cQuery), "CNFTMP", .F. , .F.  )

	For nx:=1 to len(aStrucCNF)
		if ("CNFTMP")->(FieldPos(aStrucCNF[nx,1])) > 0 .And.  aStrucCNF[nx,2] <> "C"
			TCSetField( "CNFTMP", aStrucCNF[nx,1], aStrucCNF[nx,2], aStrucCNF[nx,3], aStrucCNF[nx,4] )
		endif
	Next













	aTotCont  := Array(len(aCron))
	aParcelas := Array(len(aCron))

	If lFisico



		aColsParc := {}
		aItVl     := {}
		aFscVl    := {}
		If len(aHeadParc) == 0
			CN110MtFsc(aHeadParc)
		EndIf
	Endif

	While !CNFTMP->(Eof())
		nPos := aScan(aCron,CNFTMP->CNF_NUMERO)
		if valtype(aTotCont[nPos]) <> "A"
			aTotCont[nPos] := {0,0,0,0,0,0,0,0,0}
			aParcelas[nPos]:= {}
		EndIf

		aAdd(aParcelas[nPos],Array(len(aHeader)+1))

		For nx:=1 to len(aHeader)
			If CNFTMP->( FieldPos( aHeader[nx,2] ) ) > 0
				aParcelas[nPos,len(aParcelas[nPos]),nX] := CNFTMP->( &(aHeader[nx,2]) )
			Else
				aParcelas[nPos,len(aParcelas[nPos]),nX] := CriaVar( aHeader[nx,2] )
			EndIf
		Next

		aParcelas[nPos,len(aParcelas[nPos]),len(aHeader)+1] := .F. 

		aTotCont[nPos,1] += CNFTMP->CNF_VLPREV
		aTotCont[nPos,2] += CNFTMP->CNF_SALDO

		if !Empty(CNFTMP->CNF_DTREAL)
			aTotCont[nPos,3] += CNFTMP->CNF_SALDO
			aTotCont[nPos,4] += Round(CNFTMP->CNF_VLPREV,TamSX3("CNF_VLPREV")[2])
		Else
			aTotCont[nPos,5]++
			if Empty(aTotCont[nPos,6])
				aTotCont[nPos,6] := CNFTMP->CNF_PARCEL
			EndIf
		EndIf

		CNFTMP->(dbSkip())
	EndDo

	CNFTMP->(dbCloseArea())




	For nY:=1 to len(aAditPlan)
		nTotAdit += aAditPlan[nY,2]
	Next

	For nx:=1 to len(aCron)
		cQuery := "SELECT CNA.CNA_VLTOT, CNA.CNA_SALDO, CNA.CNA_NUMERO "
		cQuery += "  FROM "+RetSQLName("CNA")+" CNA "
		cQuery += " WHERE CNA.CNA_FILIAL = '"+xFilial("CNA")+"'"
		cQuery += "   AND CNA.CNA_CONTRA = '"+cContra +"'"
		cQuery += "   AND CNA.CNA_REVISA = '"+cRevisa +"'"
		cQuery += "   AND CNA.CNA_CRONOG = '"+aCron[nx]+"'"
		cQuery += "   AND CNA.D_E_L_E_T_ <> '*'"

		cQuery := ChangeQuery( cQuery )
		dbUseArea( .T. , "TopConn", TCGenQry(,,cQuery), "CNATMP", .F. , .F.  )

		TCSetField("CNATMP","CNA_VLTOT","N",TamSX3("CNA_VLTOT")[1],TamSX3("CNA_VLTOT")[2])
		TCSetField("CNATMP","CNA_SALDO","N",TamSX3("CNA_SALDO")[1],TamSX3("CNA_SALDO")[2])

		aTotCont[nX,7] := A410Arred(CNATMP->CNA_SALDO,"CNA_SALDO")
		aTotCont[nX,8] := A410Arred(CNATMP->CNA_VLTOT,"CNA_VLTOT")

		nPosPlan := aScan(aAditPlan,{|x| x[1] = CNATMP->CNA_NUMERO})




		If nPosPlan > 0
			aTotCont[nX,7] += A410Arred(aAditPlan[nPosPlan,2],"CNA_SALDO")
			aTotCont[nX,8] += A410Arred(aAditPlan[nPosPlan,2],"CNA_VLTOT")
		EndIf

		dbSelectArea("CN9")
		dbSetOrder(1)

		If dbSeek(xFilial("CN9")+cContra+cRevisa)
			aTotCont[nX,9] := CN9->CN9_SALDO




		 	aTotCont[nX,9] += A410Arred(nTotAdit,"CN9_SALDO")
		EndIf

		If lFisico



	      CN140AltFis(@aParcelas,aColsParc,aHeadParc,aFscVl,cContra,cRevisa,aCron[nx],aTotCont[nx],CNATMP->CNA_NUMERO,nPosPlan,aHeaderIT,aHeader,aAditQtd,aItens,lDist)
	 	EndIf

















  		If lFisico
			aItVl := aFscVl[nX]
		EndIf

		If nPosPlan > 0
			aItmAdt:= aAditPlan[nx]
		EndIf

		CN140AltPar(@aParcelas[nx],nParcel,oTpCron,aTotCont[nX],Posicione("CN9",1,xFilial("CN9")+cContra+cRevisa,"CN9_CONDPG"),lArrasto,lDist,aCron[nx],cCodTR,aHeadParc,If(lFisico,aColsParc[nx],NIL),aHeader,nTotAdit,aItVl,aItmAdt)




		If ExistBlock("CN140PAC")
			aRetPac := ExecBlock("CN140PAC", .F. , .F. ,{aTotCont[nX],aParcelas[nX],aHeader,aColsParc,aHeadParc,lArrasto,lDist,aFscVL,nParcel})
			If ValType(aRetPac)=="A"
				If Len(aRetPac)>=1 .And.  ValType(aRetPac[1]) == "A"
					aTotCont[nX] := aRetPac[1]
				Endif
				If Len(aRetPac)>=2 .And.  ValType(aRetPac[2]) == "A"
					aParcelas[nX] := aRetPac[2]
				Endif
				If Len(aRetPac)>=3 .And.  ValType(aRetPac[3]) == "A"
					aHeader := aRetPac[3]
				Endif
				If Len(aRetPac)>=4 .And.  ValType(aRetPac[4]) == "A"
					aColsParc := aRetPac[4]
				Endif
				If Len(aRetPac)>=5 .And.  ValType(aRetPac[5]) == "A"
					aHeadParc := aRetPac[5]
				Endif
				If Len(aRetPac)>=6 .And.  ValType(aRetPac[6]) == "L"
					lArrasto := aRetPac[6]
				Endif
				If Len(aRetPac)>=7 .And.  ValType(aRetPac[7]) == "L"
					lDist := aRetPac[7]
				Endif
				If Len(aRetPac)>=8 .And.  ValType(aRetPac[8]) == "A"
					aFscVL := aRetPac[8]
				Endif
				If Len(aRetPac)>=9 .And.  ValType(aRetPac[9]) == "N"
					nParcel := aRetPac[9]
				Endif
			EndIf
		EndIf





		If (nPosDtF := aScan(aHeader,{|x| AllTrim(x[2]) == "CNF_PRUMED"})) > 0 .And.  aParcelas[nx,len(aParcelas[nx]),nPosDtF] > dMaxDate
			dMaxDate := aParcelas[nx,len(aParcelas[nx]),nPosDtF]
		EndIf

		CNATMP->(dbCloseArea())
	Next
	dFCronog :=	dMaxDate


	If Len(aParcelas) > 0 .And.  !Empty(aParcelas[1,1,7]) .And.  aParcelas[1,1,7] < CN9->CN9_DTINIC
		dMaxDate += CN9->CN9_DTINIC - aParcelas[1,1,7]
	Endif

	nVgAdit := CN140Dif(CN9->CN9_DTFIM,dMaxDate,CN9->CN9_UNVIGE)

	nVgAdit := CN9->CN9_VIGE+nVgAdit

	dFContra := CN100DtFim(CN9->CN9_UNVIGE,CN9->CN9_DTINIC,nVgAdit)


	If oGetDados == NIL
		If !lFisico
			oGetDados:= MSNewGetDados():New(043,005,118,285,2,,,,,,len(aParcelas[1]),,,,oWizard:oMPanel[11],aHeader,aParcelas[1])
		Else
			oGetDados:= MSNewGetDados():New(043,005,118,285,2,,,,{"CNF_DTVENC","CNF_PRUMED"},,len(aParcelas[1]),,,,oWizard:oMPanel[11],aHeader,aParcelas[1])
		EndIf
	Else
		oGetDados:aCols := aParcelas[1]
	EndIf

	If lFisico
		aItVl := aFscVl[1]
		oGetDados:oBrowse:bLDblClick := {|| If(oGetDados:oBrowse:COLPOS==3,(CN140Fisico(4,aParcelas[1],oGetDados:nAt,aColsParc[1],aHeadParc,aFscVl[1],cCodTR),oGetDados:aCols:=aParcelas[1],CN110AtuVal(),oGetDados:oBrowse:Refresh(),aFscVl[1] := aItVl),oGetDados:EDITCELL()) }
	EndIf




	oTotPlan:cTitle   := Transform(aTotCont[1,8],PesqPict("CNA","CNA_VLTOT"))
	oTotCronog:cTitle := Transform(aTotCont[1,1],PesqPict("CNA","CNA_VLTOT"))
	oSaldDist:cTitle  := Transform(aTotCont[1,8]-aTotCont[1,1],PesqPict("CNA","CNA_VLTOT"))
	oSaldCont:cTitle  := Transform(aTotCont[1,9],PesqPict("CN9","CN9_SALDO"))
	oSaldPlan:cTitle  := Transform(aTotCont[1,7],PesqPict("CNA","CNA_SALDO"))


	nTotCronog := aTotCont[1,1]
	nTotPlan   := aTotCont[1,8]


	cCronO := aCron[1]

	nPosVPrv := aScan(aHeader,{|x| AllTrim(x[2]) == "CNF_VLPREV"})
	nPosVRea := aScan(aHeader,{|x| AllTrim(x[2]) == "CNF_VLREAL"})
	If lRet .And.  ValType(aParAnt) == "A" .And.  ValType(aParVlR) == "A"

		For nX := 1 To Len(aParcelas)
			If aScan(aParAnt,{|x| x[1] == aCron[nX]}) == 0
				aAdd(aParAnt,{aCron[nX],{}})
			EndIf
			If aScan(aParVlR,{|x| x[1] == aCron[nX]}) == 0
				aAdd(aParVlR,{aCron[nX],{}})
			EndIf
			For nY := 1 To Len(aParcelas[nX])
				If !Empty(aParcelas[nX,nY,nPosVPrv]) .And.  aScan(aParAnt[nX,2],{|x| x[1] == nY}) == 0
					aAdd(aParAnt[nX,2],{nY,aParcelas[nX,nY,nPosVPrv]})
					If !Empty(aParcelas[nX,nY,nPosVRea]) .And.  aScan(aParVlR[nX,2],{|x| x[1] == nY}) == 0
						aAdd(aParVlR[nX,2],{nY,aParcelas[nX,nY,nPosVPrv]})
					EndIf
				Else
					Exit
				EndIf
			next
		next
	EndIf
EndIf


Return lRet
































Function CN140AltPar(aParcelas,nParc,oTpCron,aTotCont,cCond,lArrasto,lDist,cCron,cCodTR,aHeadParc,aColsParc,aHeaderCNF,nTotAdit,aFscVl,aAditPlan)

Local lRet     := .T. 
Local lAcres   := .T. 

Local aCond    := {}

Local dPrevista:= dDatabase
Local dComp    := dDatabase

Local cMod     := Posicione("CN0",1,xFilial("CN0")+cCodTR,"CN0_MODO")

Local nX
Local nY
Local nZ
Local nParcQt  := nParc
Local nAvanco  := 0
Local nMes     := 0
Local nAno     := 0
Local nParcAlt := 0
Local nParcDis := 0
Local nPosDtf  := aScan(aHeaderCNF,{|x| AllTrim(x[2]) == "CNF_PRUMED"})
Local nPosParc := aScan(aHeaderCNF,{|x| AllTrim(x[2]) == "CNF_PARCEL"})
Local nPosPrev := aScan(aHeaderCNF,{|x| AllTrim(x[2]) == "CNF_VLPREV"})
Local nPosReal := aScan(aHeaderCNF,{|x| AllTrim(x[2]) == "CNF_VLREAL"})
Local nPosSald := aScan(aHeaderCNF,{|x| AllTrim(x[2]) == "CNF_SALDO"})
Local nPosDtRe := aScan(aHeaderCNF,{|x| AllTrim(x[2]) == "CNF_DTREAL"})
Local nPosComp := aScan(aHeaderCNF,{|x| AllTrim(x[2]) == "CNF_COMPET"})
Local nNovParc := 0














Local cParnMed  := aTotCont[6]
Local cParce    := strzero(0,TamSx3("CNF_PARCEL")[1])

Local nTotnMed  := aTotCont[5]
Local nSaldoCro := aTotCont[2]
Local nTotMed   := aTotCont[4]
Local nParnMed  := aTotCont[5]
Local nSaldoMed := aTotCont[3]
Local nPosQtd   := 0
Local nPosSld   := 0
Local nPosRlz   := 0
Local nQtdDist  := 0
Local nDiaPar	:= 30
Local nPosDPar  := 0
Local nSldDist  := 0
Local nTotParc  := 0
Local nAcumParc := 0


Local aArtFsc   := {}
Local aArtDist  := {}
Local aArtAdt   := {}
Local aQtdMed   := {}

Local lAjFim	:= .F. 
Local lAjFev	:= .F. 
Local lAjFimC	:= .F. 
Local lAjFevC	:= .F. 

nTotAdit := If( nTotAdit == nil, 0, nTotAdit ) ;
aAditPlan := If( aAditPlan == nil, {}, aAditPlan ) ;

If lFisico
	nPosQtd := aScan(aHeadParc,{|x| x[2]=="CNS_PRVQTD"})
	nPosSld := aScan(aHeadParc,{|x| x[2]=="CNS_SLDQTD"})
	nPosRlz := aScan(aHeadParc,{|x| x[2]=="CNS_RLZQTD"})
	nPosItO := aScan(aHeadParc,{|x| x[2]=="CNS_ITOR"})
	nPosTQt := aScan(aHeadParc,{|x| x[2]=="CNS_TOTQTD"})
EndIf


If (CNF->(FieldPos("CNF_PERIOD")) > 0)
	nPosDPar := aScan(aHeaderCNF,{|x| AllTrim(x[2]) == "CNF_DIAPAR"})
	nDiaPar  := aParcelas[1,nPosDPar]
EndIf


If cMod == "1"
	lAcres := .T. 
ElseIf cMod == "2"
   lAcres := .F. 
Else
	lAcres := (oTpCron:nAt == 1)
EndIf

If lUltimoDia
	lAjFim := .T. 
	lAjFev := .T. 
	lAjFimC:= .T. 
	lAjFevC:= .T. 
Endif

if lAcres
	dPrevista := aParcelas[len(aParcelas),nPosDtf]
	dComp	  := aParcelas[len(aParcelas),nPosComp]
	dComp	  := CTOD(Str(Day(dPrevista))+"/"+dComp)
	nDiaIni   := Day(aParcelas[1,nPosDtf])




	If Empty(cParnMed)
		cParnMed := strzero(val(aParcelas[len(aParcelas),nPosParc])+1,3)
	EndIf
	cParce := Soma1(aParcelas[len(aParcelas),nPosParc])
	for nx:=1 to nParcQt



		nMes     :=Month(dPrevista)
		nAno     :=Year(dPrevista)
		If nDiaPar == 30
			nAvanco  := CalcAvanco(dPrevista,lAjFim,lAjFev,nDiaIni)
		Else
			nAvanco := nDiaPar
		EndIf

		dPrevista += nAvanco
		If nDiaPar == 30
			nAvanco  :=CalcAvanco(dComp,lAjFimC,lAjFevC,nDiaIni)
		Else
			nAvanco := nDiaPar
		EndIf
		dComp    += nAvanco

		aCond := Condicao(0,cCond,,dPrevista)
		aAdd(aParcelas,Array(len(aHeaderCNF)+1))

		For nY:=1 to len(aHeaderCNF)
			Do Case
				Case AllTrim(aHeaderCNF[nY,2]) == "CNF_PARCEL"
					aParcelas[len(aParcelas),nY] := cParce
				Case AllTrim(aHeaderCNF[nY,2]) == "CNF_COMPET"
					aParcelas[len(aParcelas),nY] := strzero(Month(dComp),2)+"/"+str(Year(dComp),4)
				Case AllTrim(aHeaderCNF[nY,2]) == "CNF_DTVENC"
					aParcelas[len(aParcelas),nY] := 	If(len(aCond)>0,aCond[1][1],dPrevista)
				Case AllTrim(aHeaderCNF[nY,2]) == "CNF_PRUMED"
					aParcelas[len(aParcelas),nY] := dPrevista
				OtherWise
					aParcelas[len(aParcelas),nY] := CriaVar(aHeaderCNF[nY,2])
			EndCase
		Next
		aParcelas[len(aParcelas),len(aHeaderCNF)+1] := .F. 

		cParce := Soma1(cParce)
		If lFisico



			aadd(aColsParc,aClone(aColsParc[len(aColsPArc)]))
			aEval(aColsParc[len(aColsPArc)],{|x| (x[nPosQtd]:=0,x[nPosRlz]:=0,x[nPosSld]:=0)})
		EndIf
	Next



	nTotnMed += nParcQt
Else




	if nParcQt > nTotnMed-1
		lRet := .F. 
		Help("CNTA140",1,"CNTA140_13")
	EndIf
	if lRet
		for nx:=1 to nParcQt
			nY := len(aParcelas)




			while !Empty(aParcelas[nY,nPosDtRe]) .And.  nY > 0
				aParcelas[nY,nPosParc] := strzero(val(aParcelas[nY,nPosParc])-1,nPosPrev)
				nY--
			EndDo
			nParcAlt := nY
			nY--




			while !Empty(aParcelas[nY,nPosDtRe]) .And.  nY > 0
				nY--
			EndDo
			nParcDis := nY
			aParcelas[nParcDis,nPosPrev]+=aParcelas[nParcAlt,nPosPrev]
			aParcelas[nParcDis,nPosReal]+=aParcelas[nParcAlt,nPosReal]
			aParcelas[nParcDis,nPosSald]+=aParcelas[nParcAlt,nPosSald]
			If lFisico




				For nZ:=1 to len(aColsParc[nParcAlt])
					aColsParc[nParcDis,nZ,nPosQtd] += aColsParc[nParcAlt,nZ,nPosQtd]
					aColsParc[nParcDis,nZ,nPosRlz] += aColsParc[nParcAlt,nZ,nPosRlz]
					aColsParc[nParcDis,nZ,nPosSld] += aColsParc[nParcAlt,nZ,nPosSld]
				Next



				aDel(aColsParc,nParcAlt)
				aSize(aColsParc,len(aColsParc)-1)
			EndIf
			aDel(aParcelas,nParcAlt)
			aSize(aParcelas,len(aParcelas)-1)
		Next



		nTotnMed -= nParcQt
	EndIf
EndIf

If lRet
	if lArrasto
		if nSaldoCro == 0
			Aviso("CNTA140","Não existe saldo em aberto para o cronograma "+cCron,{"OK"})
			lRet := .F. 
		ElseIf nTotnMed == 0
			Aviso("CNTA140","Não existem parcelas em aberto para o cronograma "+cCron,{"OK"})
			lRet := .F. 
		EndIf
		if lRet
			If lFisico




				aArtFsc := Array(len(aColsParc[len(aColsParc)]))
			EndIf

			if lDist
				CN140DstCron(@aParcelas,aHeaderCNF,@aColsParc,aHeadParc,lFisico,nTotParc,@aFscVl,@aTotCont,aAditPlan,@aArtFsc,@nTotMed,nParcQt)
			Else
				For nX := 1 to len(aParcelas)
					if !Empty(aParcelas[nx,nPosDtRe])



						aParcelas[nX,nPosPrev] -= aParcelas[nX,nPosSald]
						nTotMed	  	    -= Round(aParcelas[nX,nPosSald],TamSX3("CNF_VLPREV")[2])
						aParcelas[nX,nPosSald] := 0
						if lFisico



							For nY:=1 to len(aColsParc[nX])
								If aArtFsc[nY] == Nil
									aArtFsc[nY] := 0
								EndIf
								aArtFsc[nY] += aColsParc[nX,nY,nPosSld]

								If CNS->(FieldPos("CNS_ITOR"))>0
									If Empty(aColsParc[nX,nY,nPosItO])
										aColsParc[nX,nY,nPosQtd] -= aColsParc[nX,nY,nPosSld]
										aColsParc[nX,nY,nPosSld] := 0
									EndIf
								Else
									aColsParc[nX,nY,nPosQtd] -= aColsParc[nX,nY,nPosSld]
									aColsParc[nX,nY,nPosSld] := 0
								EndIf

							Next
						EndIf
					ElseIf aParcelas[nx,nPosParc] == cParnMed



						aParcelas[nx,nPosSald] += nSaldoMed
						aParcelas[nx,nPosPrev] += nSaldoMed
						nTotMed	              += Round(aParcelas[nX,nPosPrev],TamSX3("CNF_VLPREV")[2])
						if lFisico

							If !Empty(aAditPlan)
								aParcelas[nx,nPosSald] += aAditPlan[2]
								aParcelas[nx,nPosPrev] += aAditPlan[2]
								aTotCont[1]			   += aAditPlan[2]
								nTotParc               :=(aAditPlan[2]/len(aColsParc[nX]))
							EndIf





							For nY:=1 to len(aColsParc[nX])
								If aArtFsc[nY] == Nil
									aArtFsc[nY] := 0
								EndIf

								If aArtFsc[nY] <> NIL
									aColsParc[nX,nY,nPosSld] += aArtFsc[nY]
									aColsParc[nX,nY,nPosQtd] += aArtFsc[nY]
									aArtFsc[nY] := 0
								EndIf


								If aFscVl[nY,3]  > 0
									aColsParc[nX,nY,nPosSld] += aFscVl[nY,3]
									aColsParc[nX,nY,nPosQtd] += aFscVl[nY,3]
								EndIf
							Next




							If lFisico
								For nY:= 1 To len(aFscVl)
									aFscVl[nY,3] := 0
								Next
							EndIf
						EndIf
					Else
						nTotMed += Round(aParcelas[nX,nPosPrev],TamSX3("CNF_VLPREV")[2])
					EndIf
				Next
			EndIf


			If lDist




				If aTotCont[1] > nTotMed
					aParcelas[len(aParcelas),nPosPrev] += (aTotCont[1] - nTotMed)
					aParcelas[len(aParcelas),nPosSald] += (aTotCont[1] - nTotMed)
				Elseif aTotCont[1] < nTotMed
					aParcelas[len(aParcelas),nPosPrev] -= (nTotMed - aTotCont[1])
					aParcelas[len(aParcelas),nPosSald] -= (nTotMed - aTotCont[1])
				EndIf


				If lFisico
					If aTotCont[1] <> aTotCont[8]
						aParcelas[len(aParcelas),nPosPrev] += (aTotCont[8]-aTotCont[1])
						aParcelas[len(aParcelas),nPosSald] += (aTotCont[8]-aTotCont[1])

						For nY:=1 to len(aColsParc[len(aParcelas)])
							nAcumParc += Round((aColsParc[len(aParcelas),ny,nPosQtd]*aFscVl[ny,1])-(((aColsParc[len(aParcelas),nY,nPosQtd]*aFscVl[ny,1])*aFscVl[ny,7])/100),TamSX3("CNS_PRVQTD")[2])
						next




						If Round(aParcelas[len(aParcelas),nPosPrev],TamSX3("CNF_VLPREV")[2]) <> Round(nAcumParc,TamSX3("CNF_VLPREV")[2])
							nAcumParc:= Round(aParcelas[len(aParcelas),nPosPrev] - nAcumParc,TamSX3("CNF_VLPREV")[2])
				 			aColsParc[len(aParcelas),len(aColsParc[len(aParcelas)]),nPosSld] := Round(((aColsParc[len(aParcelas),len(aColsParc[len(aParcelas)]),nPosSld] * aFscVl[len(aColsParc[len(aParcelas)]),1] )+nAcumParc)/aFscVl[len(aColsParc[len(aParcelas)]),1] ,TamSX3("CNS_PRVQTD")[2])
							aColsParc[len(aParcelas),len(aColsParc[len(aParcelas)]),nPosQtd] := Round(((aColsParc[len(aParcelas),len(aColsParc[len(aParcelas)]),nPosQtd] * aFscVl[len(aColsParc[len(aParcelas)]),1] )+nAcumParc)/aFscVl[len(aColsParc[len(aParcelas)]),1] ,TamSX3("CNS_PRVQTD")[2])
						EndIf
					EndIf
					aTotCont[1] += (aTotCont[8]-aTotCont[1])
				Else
				   If !Empty(aAditPlan)
						If aTotCont[1] <> (aTotCont[8]-aAditPlan[2])
							aParcelas[len(aParcelas),nPosPrev] += ((aTotCont[8]-aAditPlan[2])-aTotCont[1])
							aParcelas[len(aParcelas),nPosSald] += ((aTotCont[8]-aAditPlan[2])-aTotCont[1])
							aTotCont[1] += ((aTotCont[8]-aAditPlan[2])-aTotCont[1])
						EndIf
					EndIf
				EndIf
			EndIf

			If lFisico



				For nY:=1 to len(aArtFsc)
					If aArtFsc[nY] <> 0
						aColsParc[len(aParcelas),nY,nPosSld] += aArtFsc[nY]
						aColsParc[len(aParcelas),nY,nPosQtd] += aArtFsc[nY]
					EndIf
				Next
			EndIf
		EndIf
	EndIf
EndIf
Return lRet





























Function CN140VlP9(cContra,cRevisa,cNRevisa,cCodTR,aAditPlan,aPlan,aHeaderIT,aItens,aAditQtd,dFContra)
Local lRet     	 := .T. 
Local lDelItm    := .F. 

Local cTpEspec 	 := Posicione("CN0",1,xFilial("CN0")+cCodTR,"CN0_ESPEC")
Local cEspecie   := ""
Local cQuery     := ""
Local cAlias     := ""
Local cItmDst    := ""

Local nX := 0
Local nY := 0
Local nPosPrcor  := 0
Local nPosVlUnit := 0
Local nPosODesc  := 0
Local nPosDesc   := 0
Local nPosVDesc  := 0
Local nPosQtd    := 0
Local nPosQAcr   := 0
Local nPosQDcr   := 0
Local nPosItm    := 0
Local nAdit      := 0
Local nTot       := 0
Local nVDesc     := 0
Local nAditAnt   := 0
Local nQtd       := 0
Local nPos
Local nItmPla    := 0
Local nPreco     := 0
Local nTotal     := 0
Local nPosObr		:= 0

Local aStrucCNB := CNB->(dbStruct())
Local nPosIt     := aScan(aHeaderIt,{|x| x[2] == "CNB_ITEM"})
Local aItCopia := {}

If CN9->(FieldPos("CN9_ESPCTR")) > 0
	cEspecie := CN9->CN9_ESPCTR
ElseIf !Empty(CN9->CN9_CLIENT)
	cEspecie := "2"
Else
	cEspecie := "1"
Endif

aItCopia := aClone(aItens)


For nX := 1 To Len(aHeaderOb)
	If aHeaderOb[nX,3] == "S"
		nPosObr := Ascan(aHeaderIt,{|x| x[2] == aHeaderOb[nX,2] })
		If nPosObr > 0
			For nY := 1 To Len(aItens[1])
				If Empty(aItens[1,nY,nPosObr])
					Help("",1,"GETOBG",,aHeaderIt[nPosObr,1],2)
					Return .F. 
				Endif
			next
		Endif
		nPosObr := 0
	Endif
next




For nItmPla := 1 to len(aPlan)
	cQuery := "SELECT * FROM " +RetSQLName("CNB")+" CNB WHERE CNB_FILIAL = '"+xFilial("CNB")+"' AND "
	cQuery += "CNB_CONTRA = '"+cContra         +"' AND CNB_REVISA = '"+cRevisa+"' AND "
	cQuery += "CNB_NUMERO = '"+aPlan[nItmPla,1]+"' AND "
	cQuery += "D_E_L_E_T_ <> '*' ORDER BY CNB_NUMERO,CNB_ITEM"
	cQuery := ChangeQuery( cQuery )

	dbUseArea( .T. , "TopConn", TCGenQry(,,cQuery), "CNBZERO", .F. , .F.  )

	For nX :=1 To Len(aStrucCNB)
	     If CNBZERO->(FieldPos(aStrucCNB[nx,1])) > 0 .And.  aStrucCNB[nx,2] <> "C"
	       TCSetField("CNBZERO",aStrucCNB[nx,1],aStrucCNB[nx,2],aStrucCNB[nx,3],aStrucCNB[nx,4])
	     Endif
	next

	CNBZERO->(dbGoTop())
	While !CNBZERO->(Eof())

			If CNB->(FieldPos("CNB_ITMDST")) > 0
				cItmDst := CNBZERO->CNB_ITMDST
			EndIf

			If !(((CNBZERO->CNB_SLDMED > 0 .AND.  CNBZERO->CNB_VLTOTR>0) .OR.  (CNBZERO->CNB_SLDMED > 0 .And.  CNBZERO->CNB_VLTOTR==0)) .AND.  (CNBZERO->CNB_QTDORI==CNBZERO->CNB_QUANT) .OR.  (cItmDst=="") )
			nItemCNB := aScan(aItCopia[nItmPla],{|x| x[1] == CNBZERO->CNB_ITEM})
			If CNBZERO->CNB_SLDMED == 0 .And. (nItemCNB== 0)
				aAdd(aItCopia[nItmPla],Array(Len(aHeaderIt)+1))
			 	For nx := 1 To Len(aHeaderIt)
		        	If CNB->(FieldPos(AllTrim(aHeaderIt[nx,2]))) > 0
			        	If Type("CNBZERO->"+AllTrim(aHeaderIt[nx,2])) <> "U"
			          		aTail(aItCopia[nItmPla])[nx] := &("CNBZERO->"+AllTrim(aHeaderIt[nx,2]))
			         	EndIf
			        ElseIf aHeaderIt[nx,2] == "CNBNDESC" .Or.  aHeaderIt[nx,2] == "CNBNVLDESC"
		            	aTail(aItCopia[nItmPla])[nx] := 0
			      	ElseIf aHeaderIt[nx,2] == "CNBDESC"
		        		aTail(aItCopia[nItmPla])[nx] := CNBZERO->CNB_DESC
		          	ElseIf aHeaderIt[nx,2] == "CNBVLDESC"
		         		aTail(aItCopia[nItmPla])[nx] := CNBZERO->CNB_VLDESC
			  		EndIf
				 next
				 aTail(aItCopia[nItmPla])[Len(aHeaderIt)] := CNBZERO->R_E_C_N_O_
		    	 aTail(aItCopia[nItmPla])[Len(aHeaderIt)-1] := "CNB"
		         aTail(aItCopia[nItmPla])[Len(aHeaderIt)] := .F. 

				 If !Empty(aItCopia[nItmPla])
			   	      aSort(aItCopia[nItmPla],,,{|x,y| x[nPosIt] < y[nPosIt]})
				 EndIf

	     	EndIf
		EndIf
	    CNBZERO->(dbSkip())
	End
	CNBZERO->(dbCloseArea())
Next

aItens := aClone(aItCopia)

dFContra := CN100DtFim(CN9->CN9_UNVIGE,CN9->CN9_DTINIC,nVgAdit)

aAditPlan := Array(len(aPlan))
If lFisico



	aAditQtd  := Array(len(aPlan))
EndIf

If (cTpEspec <> "4" .And.  cTpRev <> "1") .OR.  lMedeve
	If !SuperGetMv("MV_CNINTFS", .F. , .F. ) .Or.  cEspecie <> "2"
		If cTpRev $ "9|A"
			oWizard:NPanel := 13
		Else
			oWizard:NPanel := 15
		EndIf
	EndIf
Else
	nPosPrcor  := aScan(aHeaderIT,{|x| x[2] == "CNB_PRCORI"})
	nPosVlUnit := aScan(aHeaderIT,{|x| x[2] == "CNB_VLUNIT"})
	nPosQtd    := aScan(aHeaderIT,{|x| x[2] == "CNB_QUANT"})
	nPosQAcr   := aScan(aHeaderIT,{|x| x[2] == "CNB_QTRDAC"})
	nPosQDcr   := aScan(aHeaderIT,{|x| x[2] == "CNB_QTRDRZ"})
	nPosItm    := aScan(aHeaderIT,{|x| x[2] == "CNB_ITEM"})
	nPosODesc  := aScan(aHeaderIT,{|x| x[2] == "CNBDESC"})
	nPosDesc   := aScan(aHeaderIT,{|x| x[2] == "CNBNDESC"})
	nPosVDesc  := aScan(aHeaderIT,{|x| x[2] == "CNBNVLDESC"})

	For nX:=1 to len(aPlan)
		nAdit := 0
		If lFisico
			aAditQtd[nX] := {}
		EndIf
		For nY:=1 to len(aItens[nX])
			If !aItens[nX,nY,len(aHeaderIT)+1]
				nQtd := 0
				If aItens[nX,nY,nPosPrcor] == 0
					nTot   := Round(aItens[nX,nY,nPosQtd]*aItens[nX,nY,nPosVlUnit],TamSX3("CNB_VLUNIT")[2])


				    If cEspecie = "1"
						nVDesc := A410Arred((nTot*aItens[nX,nY,nPosDesc])/100,"CNB_VLDESC")
					Else
						nPreco := A410Arred(aItens[nX,nY,nPosVlUnit] * (1-(aItens[nX,nY,nPosDesc]/100)),"CNB_VLUNIT")
						nTotal := A410Arred(nPreco* aItens[nX,nY,nPosQAcr],"CNB_VLTOT")

						nVDesc := A410Arred(nTot-nTotal,"CNB_VLDESC")
					EndIf

					nAdit  += nTot-nVDesc
					If lFisico



						nQtd:=aItens[nX,nY,nPosQtd]
					EndIf
				Else
					If aItens[nX,nY,nPosQAcr] > 0
						nTot   := Round(aItens[nX,nY,nPosQAcr]*aItens[nX,nY,nPosVlUnit],TamSX3("CNB_VLUNIT")[2])


					    If cEspecie = "1"
							nVDesc := A410Arred((nTot*aItens[nX,nY,nPosDesc])/100,"CNB_VLDESC")
						Else
							nPreco := A410Arred(aItens[nX,nY,nPosVlUnit] * (1-(aItens[nX,nY,nPosDesc]/100)),"CNB_VLUNIT")
							nTotal := A410Arred(nPreco* aItens[nX,nY,nPosQAcr],"CNB_VLTOT")

							nVDesc := nTot-nTotal
						EndIf

						nAdit  += nTot-nVDesc
						If lFisico



							nQtd:=aItens[nX,nY,nPosQAcr]
						EndIf
					ElseIf aItens[nX,nY,nPosQDcr] > 0
						nTot   := aItens[nX,nY,nPosQDcr]*aItens[nX,nY,nPosVlUnit]

					    If cEspecie = "1"
							nVDesc := A410Arred((nTot*aItens[nX,nY,nPosDesc])/100 ,"CNB_VLDESC")
						Else
							nPreco := A410Arred(aItens[nX,nY,nPosVlUnit] * (1-(aItens[nX,nY,nPosDesc]/100)),"CNB_VLUNIT")
							nTotal := A410Arred(nPreco* aItens[nX,nY,nPosQAcr],"CNB_VLTOT")

							nVDesc := nVDesc-nTotal
						EndIf

						nAdit  -= nTot-nVDesc
						If lFisico



							nQtd:=aItens[nX,nY,nPosQDcr]*-1
						EndIf
					EndIf
				EndIf

				If lFisico



					aAdd(aAditQtd[nX],nQtd)
				EndIf
			Else
				If lFisico




					aAdd(aAditQtd[nX],NIL)
				EndIf
			EndIf
		Next

		If lRevisad .And.  (nRevRtp==1)
			dbSelectArea("CNA")
			dbSetOrder(1)

			If lFisico .AND.  len(aAditQtd[nx]) > 0
				dbSelectArea("CNS")
				cAlias := GetNextAlias()





				cQuery := "SELECT CNS.CNS_ITEM, SUM(CNS.CNS_PRVQTD) as CNS_PRVQTD "
				cQuery += "  FROM "+RetSQLName("CNS")+" CNS "
				cQuery += " WHERE CNS.CNS_FILIAL = '"+xFilial("CNS")+"'"
				cQuery += "   AND CNS.CNS_CONTRA = '"+cContra+"'"
				cQuery += "   AND CNS.CNS_REVISA = '"+cNRevisa+"'"
				cQuery += "   AND CNS.CNS_PLANI  = '"+aPlan[nX,1]+"'"
				cQuery += "   AND D_E_L_E_T_     = ' ' "
				cQuery += " GROUP BY CNS.CNS_ITEM ORDER BY CNS.CNS_ITEM"

				cQuery := ChangeQuery( cQuery )
				dbUseArea( .T. , "TopConn", TCGenQry(,,cQuery), cAlias, .F. , .F.  )

				TCSetField(cAlias,"CNS_PRVQTD","N",TamSX3("CNS_PRVQTD")[1],TamSX3("CNS_PRVQTD")[2])

				While !(cAlias)->(Eof())
					If (nPos := aScan(aItens[nx],{|x| x[nPosItm] == (cAlias)->CNS_ITEM})) > 0




						aAditQtd[nx,nPos] := aItens[nx,nPos,nPosQtd] - (cAlias)->CNS_PRVQTD
					EndIf
					(cAlias)->(dbSkip())
				EndDo

				(cAlias)->(dbCloseArea())
			EndIf
		EndIf





		aAditPlan[nX] := {aPlan[nX,1],Round( nAdit, GetSx3Cache("CNB_VLTOT","X3_DECIMAL") ) }
	Next
EndIf

If SuperGetMv("MV_CNINTFS", .F. , .F. ) .And.  cEspecie == "2" .And.  lRet
	oWizard:NPanel := 13
EndIf
Return lRet



















Function CN140Cron(cAlias,nReg,nOpc)
Local lMedeve  := .F. 
Local lRet     := .F. 

Local aArea    := GetArea()
Local aRadio   := {}

Local oRadio   := NIL
Local oDlg     := NIL

Local nOpcTp   := 1
Local nRadio   := 1

Local cTipo    := ""








dbSelectArea("CN0")
dbSetOrder(1)
dbSeek(xFilial("CN0")+CN9->CN9_TIPREV)
If !Eof()
    cTipo:=CN0_TIPO
EndIf

If !cTipo$"5!6!7"



	aAdd(aRadio,If( cPaisLoc $ "ANG|PTG", "Cronograma Físico/financeiro", "Cronograma Fisico/Financeiro" ))
	aAdd(aRadio,If( cPaisLoc $ "ANG|PTG", "Cronograma Contabilístico", "Cronograma Contábil" ))
	oDlg = MsDialog():New( 0, 0, 80, 300, If(cPaisLoc$"ANG|PTG","Assistente - Manutenção De Revisão","Assistente - Manutenção de Revisão"),,,.F.,,,,,,.T.,, ,.F. )
	 TGroup():New( 001, 003, 040, 110, "", oDlg,,,.T., )

	 oRadio := TRadMenu():New( 008, 008, { aRadio[1],aRadio[2]},{ | u | If( PCount() == 0, nRadio, nRadio := u ) }, oDlg,,,,,,.F.,, 100, 009,,.F.,.F.,.T. )
	 SButton():New( 003, 116,1,{||  oDlg:End()}, oDlg,.T., If(cPaisLoc$"ANG|PTG","Confirma o cronograma seleccionado","Confirma o cronograma selecionado"),)
	 SButton():New( 020, 116,2,{||  (oDlg:End(),nOpcTp:=2)}, oDlg,.T., "Sair ...",)

	oDlg:bStart:={|| }

	oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted,.T.,,,, oDlg:bRClicked, )

	If nOpcTp = 2
	   RestArea(aArea)
	   Return
	Endif




	If nRadio=1 .And.  cTipo=="8"
		Aviso("CNTA140",If( cPaisLoc $ "ANG|PTG", "Tipo de revisão não permite manutenção no cronograma", "Tipo de Revisão não permite manutenção no cronograma" ),{"OK"})
		RestArea(aArea)
  	    Return
    EndIf




	dbSelectArea("CN9")
	dbGoTo(nReg)

	if nRadio=1



		lMedeve := (Posicione("CN1",1,xFilial("CN1")+CN9->CN9_TPCTO,"CN1_MEDEVE") == "1")

		If lMedeve
			Help("CNTA140",1,"CNTA140_14")
		Else
			dbSelectArea("CNF")
			dbSetOrder(2)
			dbSeek(xFilial("CNF")+CN9->CN9_NUMERO+CN9->CN9_REVISA)
			CN110Manut("CNF",CNF->(Recno()),4,,CN9->CN9_NUMERO,CN9->CN9_REVISA,,,, .T. )




			CN140AjuDt(CN9->CN9_NUMERO,CN9->CN9_REVISA,NIL,NIL, .F. )
		EndIf
	Elseif nRadio=2
		dbSelectArea("CNV")
		dbSetOrder(1)
		dbSeek(xFilial("CNV")+CN9->CN9_NUMERO+CN9->CN9_REVISA)
		lRet := CN270Manut("CNV",CNV->(Recno()),4,,CN9->CN9_NUMERO,CN9->CN9_REVISA)
	Endif
Else
	Aviso("CNTA140",If( cPaisLoc $ "ANG|PTG", "Tipo de revisão não permite manutenção no cronograma", "Tipo de Revisão não permite manutenção no cronograma" ),{"OK"})
Endif

RestArea(aArea)
Return




















Function CN140VldDFim(dFContra,cTpRev,cContra,cRevisa)
Local lRet := .T. 
Local cMod := Posicione("CN0",1,xFilial("CN0")+cTpRev,"CN0_MODO")
Local dFim := dDataBase
Local dIni := dDataBase

dbSelectArea("CN9")
dbSetOrder(1)

If dbSeek(xFilial("CN9")+cContra+cRevisa)
	dFim := CN9->CN9_DTFIM
	dIni := CN9->CN9_DTINIC
EndIf


lRet := (dFContra > dIni) .And.  (dFContra > dDataBase)


If !lMedeve
	lRet := (dFContra >= dFCronog)
EndIf


if lRet .And.  cMod == "1"
	lRet := (dFContra >= dFim)
EndIf


if lRet .And.  cMod == "2"
	lRet := (dFContra <= dFim)
EndIf


If !lRet
	Help("CNTA140",1,"CNTA140_15")
EndIf

Return lRet

















Function CN140DelGet()
Local lRet := .F. 






lRet := (oGetDad1:aCols[oGetDad1:nAt][aScan(oGetDad1:aHeader,{|x| x[2] == "CNB_PRCORI"})]==0)

Return lRet


















Function CN140ChgGet(cTipRev,aAlterCNB)
Local aAlter  := {}
Local cEspCtr := ""

If CN9->(FieldPos("CN9_ESPCTR")) > 0
	cEspCtr := CN9->CN9_ESPCTR
ElseIf !Empty(CN9->CN9_CLIENT)
	cEspCtr := "2"
Else
	cEspCtr := "1"
EndIf

If cTipRev == "1"





	If oGetDad1:aCols[oGetDad1:nAt][aScan(oGetDad1:aHeader,{|x| x[2] == "CNB_PRCORI"})]<>0



		aAlter := aClone(aAlterCNB)
		aAdd(aAlter,"CNB_QUANT")
		aAdd(aAlter,"CNBNDESC")
		oGetDad1:OBROWSE:aAlter := aAlter
	Else



		aAlter := aClone(aAlterCNB)
		aAdd(aAlter,"CNB_PRODUT")
		aAdd(aAlter,"CNB_DESCRI")
		aAdd(aAlter,"CNB_QUANT")
		aAdd(aAlter,"CNB_VLUNIT")
		aAdd(aAlter,"CNB_DESC")
		aAdd(aAlter,"CNB_CONTA")
		aAdd(aAlter,"CNBNDESC")
		If !Empty(CNB->(FieldPos("CNB_TE")))
			If cEspCtr == "1"
				aAdd(aAlter,"CNB_TE")
			EndIf
		EndIf

		If !Empty(CNB->(FieldPos("CNB_TS")))
			If cEspCtr == "2"
				aAdd(aAlter,"CNB_TS")
			EndIf
		EndIf
		oGetDad1:OBROWSE:aAlter := aAlter
	EndIf

ElseIf cTipRev ==  "3"
	aAlter := aClone(aAlterCNB)
	aAdd(aAlter,"CNB_REALI")
	aAdd(aAlter,"CNB_DTREAL")
	oGetDad1:OBROWSE:aAlter := aAlter

ElseIf cTipRev ==  "4"
	aAlter := aClone(aAlterCNB)
	aAdd(aAlter,"CNB_QUANT")
	oGetDad1:OBROWSE:aAlter := aAlter
EndIf
Return .T. 

















Function CN140VldIt()
Local lRet    := .T. 
Local aCols   := ogetDad1:aCols
Local nA      := oGetDad1:nAt
Local nPosVlt := aScan(aHeaderIt,{|x| x[2] == "CNB_VLTOT"})
Local nPosVlu := aScan(aHeaderIt,{|x| x[2] == "CNB_VLUNIT"})
Local nPosQtd := aScan(aHeaderIt,{|x| x[2] == "CNB_QUANT"})
Local nPosOri := aScan(aHeaderIt,{|x| x[2] == "CNB_PRCORI"})
Local nPosPrd := aScan(aHeaderIt,{|x| x[2] == "CNB_PRODUT"})
Local nPosTS  := aScan(aHeaderIt,{|x| x[2] == "CNB_TS"})
Local cEspCtr := ""

If CN9->(CN9_FILIAL+CN9_NUMERO+CN9_REVISA) # xFilial("CN9")+cContra+cRevAtu
	CN9->(dbSetOrder(1))
	CN9->(dbSeek(xFilial("CN9")+cContra+cRevAtu))
EndIf
If CN9->(FieldPos("CN9_ESPCTR")) > 0
	cEspCtr := CN9->CN9_ESPCTR
ElseIf !Empty(CN9->CN9_CLIENT)
	cEspCtr := "2"
Else
	cEspCtr := "1"
EndIf

aHeaderIt := oGetDad1:aHeader
If aCols[nA,nPosOri] == 0



	lRet := 	(aCols[na,nPosVlt] > 0) .And. 				(aCols[na,nPosVlu] > 0) .And. 				(aCols[na,nPosQtd] > 0) .And. 				!Empty(aCols[na,nPosPrd])

	If lRet .And.  cEspCtr == "2" .And.  !Empty(CNB->(FieldPos("CNB_TS")))
		lRet := !Empty(aCols[na,nPosTS])
	EndIf
EndIf

If !lRet .And.  !aCols[na,Len(aHeaderIt)+1]
	If cEspCtr == "2"
		Aviso("CNTA140",If( cPaisLoc $ "ANG|PTG", "Os campos de quantidade, artigo, valor unitário, total e TES são obrigatórios!", "Os campos de quantidade, produto, valor unitário, total e TES são obrigatórios!" ),{"OK"})
	Else
		Aviso("CNTA140","Os campos de quantidade, produto, valor unitário e total são obrigatórios!",{"OK"})
	EndIf
	oGetDad1:oBrowse:SetFocus()
EndIf

Return lRet





















Function CN140Dif(dFim,dFimN,cUnVgc)
Local nDif
Local dAvc

Do Case
	Case cUnVgc=="1"
		nDif := dFimN-dFim
	Case cUnVgc=="2"
		nDif := 0
		dAvc := dFim
		while dAvc < dFimN
			nDif++
			dAvc += CalcAvanco(dAvc, .T. )
		EndDo
	Case cUnVgc=="3"
		nDif := 0
		If year(dFim) < year(dFimN)
			nDif := year(dFimN)-year(dFim)
		EndIf
	Case cUnVgc=="4"
		nDif := 0
EndCase

Return nDif




















Function CN140DtFim(dFContra,nVgAdit,cContra,cRevisa,cUnVig)
Local aArea := GetArea()
Local dDtPrv
Local lRet := .T. 

cUnVig := If( cUnVig == nil, "", cUnVig ) ;

If nVgAdit >= 0
	dbSelectArea("CN9")
	dbSetOrder(1)
	dbseek(xFilial("CN9")+cContra+cRevisa)

	If Empty(cUnVig)
		If oUnVig:nat == 1
			cUnVig := "1"
		ElseIf oUnVig:nat == 2
			cUnVig := "2"
		ElseIf oUnVig:nat == 3
			cUnVig := "3"
		Else
			cUnVig := "4"
		EndIf
	EndIf

	dDtPrv := CN100DtFim(cUnVig,CN9->CN9_DTINIC,nVgAdit)

	If dDtPrv >= dFCronog .or.  lMedeve
		dFContra := dDtPrv
	else
		Aviso("CNTA140",OemToAnsi(If( cPaisLoc $ "ANG|PTG", "A data de término do contrato não pode ser menor  do que ", "A data de término do contrato não pode ser menor do que " )) +DTOC(dFCronog)+ OemToAnsi(If( cPaisLoc $ "ANG|PTG", " a data final do cronograma.", " que corresponde a data final do cronograma." )),{"Ok"})
		lRet := .F. 
	EndIf
Else
	lRet := .F. 
EndIf

RestArea(aArea)
Return lRet













Function CN140VldRel()
Local lRet := .T. 

If cModo == "1"
	lRet := (M->CNB_REALI > 0 .And.  M->CNB_REALI >= oGetDad1:aCols[oGetDad1:nAt,aScan(oGetDad1:aHeader,{|x| x[2]=="CNB_VLUNIT"})])
ElseIf cModo == "2"
	lRet := (M->CNB_REALI > 0 .And.  M->CNB_REALI <= oGetDad1:aCols[oGetDad1:nAt,aScan(oGetDad1:aHeader,{|x| x[2]=="CNB_VLUNIT"})])
Else
	lRet := M->CNB_REALI > 0
EndIf

Return lRet













Function CN140VldDtR()

Return (M->CNB_DTREAL <= dDataBase)














Function CN140PlanCb(aPlan)
Local aPlanOrd := Array(len(aPlan))
Local nX := 0

aPlan := aSort(aPlan,,,{|x,y| x[1] < y[1]})

For nX:=1 to len(aPlan)
	aPlanOrd[nX] := aPlan[nX,1]
Next

Return aPlanOrd






























Function CN140AltFis(aParcelas,aColsParc,aHeadParc,aFscVl,cContra,cRevisa,cCron,aTotCont,cPlan,nPosPlan,aHeaderIT,aHeader,aAditQtd,aItens,lDist)

Local aParcFsc	:= {}
Local aDelParc 	:= {}

Local nY
Local nZ
Local nVlUnit
Local nDesc
Local nPosCpo   := 0
Local nIncIt  	:= 0
Local nTotIts  	:= 0
Local nDelParc 	:= 0
Local nTotCron 	:= 0
Local nTotDelIt	:= 0
Local nPosItFsc	:= 0
Local nPosCNSIt	:= 0
Local nPosCNSQt	:= 0
Local nPosVlPrv	:= 0
Local nPosVlSld	:= 0
Local nQtdOri   := 0











Local aStruIts  := {}

If len(aHeaderIT) > 0

	aAdd(aStruIts,aScan(aHeaderIT,{|x| AllTrim(x[2]) == "CNB_ITEM"}))

	aAdd(aStruIts,aScan(aHeaderIT,{|x| AllTrim(x[2]) == "CNB_PRODUT"}))

	aAdd(aStruIts,aScan(aHeaderIT,{|x| AllTrim(x[2]) == "CNB_DESCRI"}))

	aAdd(aStruIts,aScan(aHeaderIT,{|x| AllTrim(x[2]) == "CNB_VLUNIT"}))

	aAdd(aStruIts,aScan(aHeaderIT,{|x| AllTrim(x[2]) == "CNBNDESC"}))

	aAdd(aStruIts,aScan(aHeaderIT,{|x| AllTrim(x[2]) == "CNB_QUANT"}))

	aAdd(aStruIts,aScan(aHeaderIT,{|x| AllTrim(x[2]) == "CNB_QTDORI"}))

	aAdd(aStruIts,aScan(aHeaderIT,{|x| AllTrim(x[2]) == "CNBNVLDESC"}))
EndIf




nPosCNSIt := aScan(aHeadParc,{|x| AllTrim(x[2]) == "CNS_ITEM"})
nPosCNSQt := aScan(aHeadParc,{|x| AllTrim(x[2]) == "CNS_PRVQTD"})




nPosVlPrv := aScan(aHeader  ,{|x| AllTrim(x[2]) == "CNF_VLPREV"})
nPosVlSld := aScan(aHeader  ,{|x| AllTrim(x[2]) == "CNF_SALDO"})







aAdd(aColsParc,{})
aAdd(aFscVl,{})
aParcFsc := {}

nTotCron := len(aColsParc)




CN110LdFsc(aColsParc[nTotCron],aHeadParc,aFscVl[len(aFscVl)],cContra,cRevisa,cCron,cPlan)

If nPosPlan > 0



	nTotIts := len(aColsParc[nTotCron,1])




	If (nIncIt := len(aAditQtd[nPosPlan]) - nTotIts) > 0
		For nY:=1 to len(aColsParc[nTotCron])
			nPosCpo := 0



			For nZ:=nTotIts+1 to len(aAditQtd[nPosPlan])



				If aAditQtd[nPosPlan,nZ] <> Nil



					aAdd(aColsParc[nTotCron,nY],Array(len(aHeadParc)+1))
					nPosItFsc := len(aColsParc[nTotCron,nY])




					For nPosCpo:=1 to len(aHeadParc)
						Do Case
							Case aHeadParc[nPosCpo,2] == "CNS_ITEM"
								aColsParc[nTotCron,nY,nPosItFsc,nPosCpo] := aItens[nPosPlan,nZ,aStruIts[1]]
							Case aHeadParc[nPosCpo,2] == "CNS_PRODUT"
								aColsParc[nTotCron,nY,nPosItFsc,nPosCpo] := aItens[nPosPlan,nZ,aStruIts[2]]
							Case aHeadParc[nPosCpo,2] == "CNS_DESCRI"
								aColsParc[nTotCron,nY,nPosItFsc,nPosCpo] := aItens[nPosPlan,nZ,aStruIts[3]]
							Case aHeadParc[nPosCpo,2] == "CNS_PRVQTD"
								aColsParc[nTotCron,nY,nPosItFsc,nPosCpo] := 0
							Case aHeadParc[nPosCpo,2] == "CNS_RLZQTD"
								aColsParc[nTotCron,nY,nPosItFsc,nPosCpo] := 0
							Case aHeadParc[nPosCpo,2] == "CNS_SLDQTD"
								aColsParc[nTotCron,nY,nPosItFsc,nPosCpo] := 0
							Case aHeadParc[nPosCpo,2] == "CNS_TOTQTD"
								aColsParc[nTotCron,nY,nPosItFsc,nPosCpo] := aItens[nPosPlan,nZ,aStruIts[6]]
							Case IsHeadRec(aHeadParc[nPosCpo,2])
								aColsParc[nTotCron,nY,nPosItFsc,nPosCpo] := 0
		  					Case IsHeadAlias(aHeadParc[nPosCpo,2])
								aColsParc[nTotCron,nY,nPosItFsc,nPosCpo] := "CNS"
							Case aHeadParc[nPosCpo,10] == "V"
								aColsParc[nTotCron,nY,nPosItFsc,nPosCpo] := CriaVar(aHeadParc[nPosCpo,2])
						EndCase
					Next
					aColsParc[nTotCron,nY,nPosItFsc,len(aHeadParc)+1] := .F. 

				EndIf
			Next
		Next
	EndIf





	For ny:=1 to len(aAditQtd[nPosPlan])
		If aAditQtd[nPosPlan,ny] <> Nil
			nZ := ny




			If len(aFscVl[nTotCron]) < ny
				nVlUnit := aItens[nPosPlan,nY,aStruIts[4]]
				nDesc   := aItens[nPosPlan,nY,aStruIts[5]]
				nQtdOri := aItens[nPosPlan,nY,aStruIts[7]]



				aAdd(aFscVl[nTotCron],{nVlUnit,aItens[nPosPlan,nY,aStruIts[6]],0,aItens[nPosPlan,nY,aStruIts[1]],nVlUnit,nQtdOri,nDesc})
				nZ := len(aFscVl[nTotCron])
			EndIf




			aFscVl[nTotCron,nZ,3]+=aAditQtd[nPosPlan,ny]




			If aItens[nPosPlan,nY,len(aHeaderIt)+1]
				nDelParc := 0
				For nZ:=1 to len(aColsParc[nTotCron])



					nDelParc := If(nDelParc==0,aScan(aColsParc[nTotCron,nZ],{|x| x[nPosCNSIt] == aItens[nPosPlan,nY,aStruIts[1]]}),nDelParc)
					If (nDelParc > 0)



						aParcelas[nTotCron,nZ,nPosVlPrv] -= aFscVl[nTotCron,nDelParc+nTotDelIt,1]*aColsParc[nTotCron,nZ,nDelParc,nPosCNSQt]
						aParcelas[nTotCron,nZ,nPosVlSld] -= aFscVl[nTotCron,nDelParc+nTotDelIt,1]*aColsParc[nTotCron,nZ,nDelParc,nPosCNSQt]





						aDel(aColsParc[nTotCron,nZ],nDelParc)
						aSize(aColsParc[nTotCron,nZ],len(aColsParc[nTotCron,nZ])-1)
					EndIf
				Next
				If nDelParc > 0



					aTotCont[1] -= aFscVl[nTotCron,nDelParc+nTotDelIt,1]*aItens[nPosPlan,nY,aStruIts[6]]
					aTotCont[2] -= aFscVl[nTotCron,nDelParc+nTotDelIt,1]*aItens[nPosPlan,nY,aStruIts[6]]





					aAdd(aDelParc,nDelParc)
					nTotDelIt++
				EndIf
			EndIf
		EndIf
	Next




	For nY:=1 to len(aDelParc)
		aDel(aFscVl[nTotCron],aDelParc[nY])
		aSize(aFscVl[nTotCron],len(aFscVl[nTotCron])-1)
	Next
EndIf

Return

















Function CN140AtuFsc(cContra,cRevisa,lReali,cORevisa)
Local cQuery   := ""
Local cAliasCNF:= ""
Local cAliasCNS:= ""
Local cPlanAtu := ""
Local cPlanAnt := ""
Local nVlUnto  := 0
Local nVlUnt   := 0
Local nQtdTot  := 0
Local lRealMed := (GetNewPar( "MV_CNREALM", "S" ) == "S")
Local aReali   := {}
Local nParc    := 0
Local nAcmVlr  := 0
Local nAcmSld  := 0
Local cUltParc := ""
Local nTotPlan := 0
Local nTotDistr:= 0
Local nDifArred:= 0

lReali := If( lReali == nil, .F. , lReali ) ;
cORevisa := If( cORevisa == nil, "", cORevisa ) ;

cAliasCNF := GetNextAlias()



cQuery := "SELECT CNF.CNF_CONTRA,CNF.CNF_REVISA,CNF.CNF_NUMERO, CNF.CNF_PARCEL, CNF.R_E_C_N_O_ as RECNO "
cQuery += "  FROM "+RetSQLName("CNF")+" CNF "
cQuery += " WHERE  CNF.CNF_FILIAL = '"+xFilial("CNF")+"'"
cQuery += "   AND CNF.CNF_CONTRA = '"+cContra+"'"
cQuery += "   AND CNF.CNF_REVISA = '"+cRevisa+"'"
cQuery += "   AND CNF.D_E_L_E_T_ = ' ' "
cQuery += "   ORDER BY CNF.CNF_CONTRA,CNF.CNF_REVISA,CNF.CNF_NUMERO, CNF.CNF_PARCEL"

cQuery := ChangeQuery( cQuery )
cAlias := GetNextAlias()
dbUseArea( .T. , "TopConn", TCGenQry(,,cQuery), cAliasCNF, .F. , .F.  )


If Select(cAliasCNF) > 0
	CNF->(DbSetOrder(1))
	CNF->(dbGoTo((cAliasCNF)->RECNO))
	While CNF->(!Eof()) .And.  CNF->CNF_FILIAL == xFilial("CNF") .And.  CNF->CNF_CONTRA == cContra .And.  CNF->CNF_REVISA == cRevisa
		cUltParc := CNF->CNF_PARCEL
		CNF->(dbSkip())
	EndDo
Endif





cAliasCNS := GetNextAlias()
cQuery := "SELECT CNS.CNS_CONTRA,CNS.CNS_REVISA,CNS.CNS_CRONOG, CNS.CNS_PARCEL ,CNS.CNS_ITEM, CNS.CNS_SLDQTD, CNS.CNS_RLZQTD, CNS.CNS_PRVQTD,CNS.R_E_C_N_O_ as RECNO , "

If CNS->(FieldPos("CNS_ITOR")) > 0
	cQuery += "       CNS.CNS_ITOR,  "
EndIf
cQuery += "       CNB.CNB_VLUNIT, CNB.CNB_REALI, CNB.CNB_SLDREC,CNB.CNB_SLDMED, CNB.CNB_DESC, CNB.CNB_NUMERO "
cQuery += "  FROM "+RetSQLName("CNS")+" CNS ,"+ RetSQLName("CNB")+" CNB "
cQuery += " WHERE CNS.CNS_FILIAL = '"+xFilial("CNS")+"'"
cQuery += "   AND CNS.CNS_CONTRA = '"+cContra+"'"
cQuery += "   AND CNS.CNS_REVISA = '"+cRevisa+"'"
cQuery += "   AND CNS.CNS_CONTRA = CNB.CNB_CONTRA "
cQuery += "   AND CNS.CNS_REVISA = CNB.CNB_REVISA "
cQuery += "   AND CNS.CNS_PLANI  = CNB.CNB_NUMERO "
cQuery += "   AND CNS.CNS_ITEM   = CNB.CNB_ITEM   "
cQuery += "   AND CNB.D_E_L_E_T_ = ' ' "
cQuery += "   AND CNS.D_E_L_E_T_ =' '"
cQuery += "   ORDER BY CNS.CNS_CONTRA,CNS.CNS_REVISA,CNS.CNS_CRONOG, CNS.CNS_PARCEL ,CNS.CNS_ITEM "

cQuery := ChangeQuery(cQuery)
dbUseArea( .T. ,"TOPCONN",TcGenQry(,,cQuery),cAliasCNS, .F. , .T. )

TCSetField(cAliasCNS,"CNS_RLZQTD","N",TamSX3("CNB_VLUNIT")[1],TamSX3("CNB_VLUNIT")[2])
TCSetField(cAliasCNS,"CNS_SLDQTD","N",TamSX3("CNB_REALI")[1] ,TamSX3("CNB_REALI")[2])
TCSetField(cAliasCNS,"CNS_PRVQTD","N",TamSX3("CNB_DESC")[1]  ,TamSX3("CNB_DESC")[2])
TCSetField(cAliasCNS,"CNB_VLUNIT","N",TamSX3("CNB_VLUNIT")[1],TamSX3("CNB_VLUNIT")[2])
TCSetField(cAliasCNS,"CNB_REALI" ,"N",TamSX3("CNB_REALI")[1] ,TamSX3("CNB_REALI")[2])
TCSetField(cAliasCNS,"CNB_DESC"  ,"N",TamSX3("CNB_DESC")[1]  ,TamSX3("CNB_DESC")[2])


dbSelectArea("CNF")
While !(cAliasCNF)->(Eof())



	CNF->(dbGoTo((cAliasCNF)->RECNO))


	While !(cAliasCNS)->(Eof()) .And.  ((cAliasCNS)->CNS_CONTRA+(cAliasCNS)->CNS_REVISA+(cAliasCNS)->CNS_CRONOG+(cAliasCNS)->CNS_PARCEL==(cAliasCNF)->CNF_CONTRA+(cAliasCNF)->CNF_REVISA+(cAliasCNF)->CNF_NUMERO+(cAliasCNF)->CNF_PARCEL)
		CNS->(dbGoTo((cAliasCNS)->RECNO))



		nVlUnto := (cAliasCNS)->CNB_VLUNIT-(((cAliasCNS)->CNB_VLUNIT*(cAliasCNS)->CNB_DESC)/100)




		If (cAliasCNS)->CNB_REALI-(((cAliasCNS)->CNB_REALI*(cAliasCNS)->CNB_DESC)/100)> 0
			nVlUnt := (cAliasCNS)->CNB_REALI-(((cAliasCNS)->CNB_REALI*(cAliasCNS)->CNB_DESC)/100)
		Else
			nVlUnt := (cAliasCNS)->CNB_VLUNIT-(((cAliasCNS)->CNB_VLUNIT*(cAliasCNS)->CNB_DESC)/100)
		EndIf

   		nQtdTot := CN140PrEnt(cContra,cORevisa,lRealMed,CNF->CNF_COMPET,(cAliasCNS)->CNS_ITEM)


   		nParc++
		If CNS->CNS_SLDQTD > 0 .and.  CNS->CNS_RLZQTD == 0
			nAcmVlr += Round(CNS->CNS_SLDQTD*nVlUnt,TamSX3("CNS_SLDQTD")[2])
			nAcmSld += Round(CNS->CNS_SLDQTD*nVlUnt,TamSX3("CNS_SLDQTD")[2])
		EndIf

        If CNS->CNS_SLDQTD == 0
           nAcmVlr += Round(CNS->CNS_RLZQTD*nVlUnto,TamSX3("CNS_RLZQTD")[2])
        EndIf

        If CNS->CNS_SLDQTD > 0 .and.  CNS->CNS_RLZQTD > 0
           nAcmVlr += (Round(CNS->CNS_RLZQTD*nVlUnto,TamSX3("CNS_RLZQTD")[2])+ Round(CNS->CNS_SLDQTD*nVlUnt,TamSX3("CNS_SLDQTD")[2]))
           nAcmSld += Round(CNS->CNS_SLDQTD*nVlUnt,TamSX3("CNS_SLDQTD")[2])
        EndIf




		If CNS->(FieldPos("CNS_ITOR")) > 0
			If !Empty((cAliasCNS)->CNS_ITOR)
				Aadd(aReali,(cAliasCNS)->CNS_RLZQTD)
			EndIf


			If !Empty(aReali)
				If !Empty(aReali[Len(aReali)]) .And.  aReali[Len(aReali)] == (cAliasCNS)->CNS_RLZQTD .And.  (cAliasCNS)->CNS_RLZQTD>0 .And.  (cAliasCNS)->CNS_SLDQTD>0 .And.  Empty((cAliasCNS)->CNS_ITOR)
				 	nAcmVlr  += CNS->CNS_RLZQTD*(nVlUnt-nVlUnto)
					nAcmSld  += CNS->CNS_RLZQTD*(nVlUnt-nVlUnto)
				EndIf
			EndIF
		EndIf



		If lRealMed .And.  lReali .And.  nQtdTot== 0 .And.  CNF->CNF_VLREAL > 0 .And.  (cAliasCNS)->CNB_SLDREC<>(cAliasCNS)->CNB_SLDMED
			vPrevAnt:= (CNS->CNS_RLZQTD*nVlUnto)+(CNS->CNS_SLDQTD*nVlUnto)
			vPrevPos:= (CNS->CNS_RLZQTD*nVlUnt)+(CNS->CNS_SLDQTD*nVlUnt)

			If nAcmSld == 0
				nAcmVlr += (vPrevPos-vPrevAnt)-(cAliasCNS)->CNS_SLDQTD*nVlUnto
				nAcmSld:= nAcmVlr+nAcmSld
			EndIf

			If nAcmSld > 0 .And.  CNS->CNS_SLDQTD > 0



			  	nAcmVlr := CNS->CNS_SLDQTD*nVlUnt



				nAcmSld := CNS->CNS_SLDQTD*nVlUnt
				nAcmVlr  := CNF->CNF_VLREAL+nAcmSld
			EndIf

		EndIf

		cPlanAtu:= CNF->CNF_NUMERO
		(cAliasCNS)->(dbSkip())
	EndDo

	RecLock("CNF", .F. )



		CNF->CNF_VLPREV := nAcmVlr
		CNF->CNF_SALDO  := nAcmSld


		If !Empty(cPlanAnt) .And.  cPlanAtu <> cPlanAnt
			nTotDistr := 0
		EndIf
		nTotDistr += Round(nAcmVlr,2)


		If CNF->CNF_PARCEL == cUltParc .And.  !lRealMed
			nTotPlan := Posicione("CNA",1,xFilial("CNA")+cContra+cRevisa+CNS->CNS_PLANI,"CNA_VLTOT")
			nDifArred := nTotPlan - nTotDistr
			CNF->CNF_VLPREV:= CNF->CNF_VLPREV+ nDifArred
			CNF->CNF_SALDO := CNF->CNF_SALDO + nDifArred
		Endif


	MsUnLock()

	nParc:=0
	nAcmVlr := 0
	nAcmSld := 0
	cPlanAnt:= CNF->CNF_NUMERO

	(cAliasCNF)->(dbSkip())
EndDo

(cAliasCNS)->(dbCloseArea())
(cAliasCNF)->(dbCloseArea())
Return


















Function CN140VldVl(nSaldo,nVlOri,nValor,cCodTR)
Local lRet := .T. 

If nValor < (nVlOri - nSaldo)
	lRet := .F. 
Else
	dbSelectArea("CN0")
	dbSetOrder(1)

	If dbSeek(xFilial("CN0")+cCodTR)
		Do Case
			Case nValor < nVlOri
				lRet := (CN0->CN0_MODO $ "23")
			Case nValor > nVlOri
				lRet := (CN0->CN0_MODO $ "13")
		EndCase
	EndIf
EndIf

Return lRet


































Static Function MenuDef()





PRIVATE aRotina	:= { 	{ OemToAnsi("Pesquisar"), "AxPesqui"  , 0, 1, 0, .F. },				   	 		{ OemToAnsi("Visualizar"), "CN100Manut", 0, 2, 0, nil},								{ OemToAnsi(If( cPaisLoc $ "ANG|PTG", "Rever", "Revisar" )), "CN140Manut", 0, 3, 0, nil},								{ OemToAnsi("Cronogramas"), "CN140Cron" , 0, 3, 0, .F. },								{ OemToAnsi("Excluir"), "CN140Excl", 0, 5, 0, .F. },								{ OemToAnsi("Legenda"), "CN100Legenda",0,6, 0, .F. }}




If ExistBlock("CTA140MNU")
	ExecBlock("CTA140MNU", .F. , .F. )
EndIf
Return(aRotina)



















Function CN140PlnCt(cContra,cRevisa,lRet,aCronCtb)
Local cQuery := ""
Local aArea := GetArea()

lRet := .T. 




cQuery := "SELECT CNV.* "
cQuery += "  FROM "+RetSqlName("CNV")+" CNV "
cQuery += " WHERE CNV.CNV_FILIAL = '"+xFilial("CNV")+"'"
cQuery += "   AND CNV.CNV_CONTRA = '"+cContra+"'"
cQuery += "   AND CNV.CNV_REVISA = '"+cRevisa+"'"
cQuery += "   AND CNV.D_E_L_E_T_ = ' '"
cQuery += " ORDER BY CNV.CNV_NUMERO"

cQuery := ChangeQuery(cQuery)
dbUseArea( .T. ,"TOPCONN",TcGenQry(,,cQuery),"TRB", .F. , .T. )

dbSelectArea("TRB")
dbGoTop()

If !Eof()

	dbSelectArea("TRBCNV")
	If RecCount() > 0
		__dbZap()
	Endif

	dbSelectArea("TRB")

	cCronog:=TRB->CNV_NUMERO
	While !Eof()



		RecLock("TRBCNV", .T. )
		    TRBCNV->CNV_FILIAL := TRB->CNV_FILIAL
			TRBCNV->CNV_CONTRA := TRB->CNV_CONTRA
			TRBCNV->CNV_NUMERO := TRB->CNV_NUMERO
			TRBCNV->CNV_PLANIL := TRB->CNV_PLANIL
		MsUnlock()
		dbSelectArea("TRB")
		dbSkip()
	Enddo

	TRBCNV->(dbGoTop())
Else
	If cTpRev=="8" .and.   nRevRtp = 0
		Help("CNTA140",1,"CNTA140_17")
		lRet := .F. 
		lMotREvOk := .T. 
	Else
		Iif(FindFunction("APMsgInfo"), APMsgInfo(If(cPaisLoc$"ANG|PTG","Não há cronograma contabilística para este contrato","Não há Cronograma contabil para esse contrato"),), MsgInfo(If(cPaisLoc$"ANG|PTG","Não há cronograma contabilística para este contrato","Não há Cronograma contabil para esse contrato"),))
		lMotREvOk := .F. 
	Endif
Endif

TRB->(dbCloseArea())

RestArea(aArea)

Return lRet


















Function CN140RvPlCt(aCronCtb,aItensCtb,cContra,cRevisa,cNrevisa,aAditPlan,aCpo,nVgAdit,dFContra,cCtbO,aTotCtb)

Local cCnum
Local cAlias   := ""
Local cQuery   := ""

Local aArea    := GetArea()
Local aCpoCtb  := {"CNW_FILIAL","CNW_NUMERO","CNW_CC","CNW_ITEMCT","CNW_CLVL","CNW_REVISA","CNW_CONTRA"}
Local aStrucCNW:= CNW->(dbStruct())
Local aRetCnv  := {}

Local cNumero  := ""

Local nItemNum := 1
Local nPlan    := 0
Local NY       := 1
Local X

Local lRet     := .T. 

Local dDtMax1  := dDatabase
Local dDtMax2  := dDatabase

aItensCtb:={}
aHeaderCt:={}
aTotCtb  :={}




dbSelectArea("SX3")
dbSetOrder(1)
If dbSeek("CNW", .F. )
	while !Eof() .And. SX3->X3_ARQUIVO=="CNW"
		If ( X3USO(SX3->X3_USADO)) .And.  (aScan(aCpoCtb,{|x| x == Alltrim(SX3->X3_CAMPO)}) == 0) .And.  cNivel >= SX3->X3_NIVEL









			aAdd(aHeaderCt,{AllTrim(X3Titulo()), AllTrim(SX3->X3_CAMPO), SX3->X3_PICTURE, SX3->X3_TAMANHO, SX3->X3_DECIMAL, SX3->X3_VALID, SX3->X3_USADO, SX3->X3_TIPO, SX3->X3_F3, SX3->X3_CONTEXT})
		EndIf
		dbSkip()
	EndDo
EndIf




CN9->(dbSetOrder(1))
CN9->(dbSeek(xFilial("CN9")+cContra+cRevisa))




If oGetCtb == NIL
	oGetCtb := MsNewGetDados():New(045,000, __DlgHeight(oWizard:oMPanel[13])-10, __DlgWidth(oWizard:oMPanel[13])-10,If((cModo $ "13" ),2,2),,,,aCpo,,,,,,oWizard:oMPanel[13],aHeaderCt,aItensCtb)
	oGetCtb:bChange := {|| CN140Get2Chg(aCpo)}
EndIf

For x:=1 to Len(aCronCtb)
    cNumero+=aCronCtb[X]
    If X< Len(aCronCtb)
      cNumero+="','"
    Endif
next
lRet := .T. 




cQuery := "SELECT CNV.CNV_NUMERO, CNV.CNV_PLANIL, SUM(CNW.CNW_VLPREV) AS CNW_VLPREV, "
cQuery += "       CNA.CNA_VLTOT,  MAX(CNW.CNW_DTPREV) AS CNW_DTPREV "
cQuery += "  FROM "+RetSQLName("CNW")+" CNW, "+RetSQLName("CNV")+" CNV, "+RetSQLName("CNA")+" CNA "
cQuery += " WHERE CNW.CNW_FILIAL = '"+xFilial("CNW")+"'"
cQuery += "   AND CNV.CNV_FILIAL = '"+xFilial("CNV")+"'"
cQuery += "   AND CNA.CNA_FILIAL = '"+xFilial("CNA")+"'"
cQuery += "   AND CNW.CNW_NUMERO = CNV.CNV_NUMERO "
cQuery += "   AND CNW.CNW_CONTRA = CNV.CNV_CONTRA "
cQuery += "   AND CNW.CNW_REVISA = CNV.CNV_REVISA "
cQuery += "   AND CNA.CNA_NUMERO = CNV.CNV_PLANIL "
cQuery += "   AND CNA.CNA_REVISA = CNV.CNV_REVISA "
cQuery += "   AND CNA.CNA_CONTRA = CNV.CNV_CONTRA "
cQuery += "   AND CNV.CNV_NUMERO in ('"+cNumero+"')"
cQuery += "   AND CNV.CNV_CONTRA = '"+cContra+"'"
cQuery += "   AND CNV.CNV_REVISA = '"+cRevisa+"'"
cQuery += "   AND CNA.D_E_L_E_T_ = ' '"
cQuery += "   AND CNW.D_E_L_E_T_ = ' '"
cQuery += "   AND CNV.D_E_L_E_T_ = ' '"
cQuery += " GROUP BY CNV.CNV_NUMERO,CNV_PLANIL,CNA.CNA_VLTOT "
cQuery += " ORDER BY CNV.CNV_NUMERO"

cQuery := ChangeQuery(cQuery)
cAlias := GetNextAlias()
dbUseArea( .T. ,"TOPCONN",TcGenQry(,,cQuery),cAlias, .F. , .T. )

TCSetField(cAlias,"CNW_VLPREV","N",TamSX3("CNW_VLPREV")[1],TamSX3("CNW_VLPREV")[2])
TCSetField(cAlias,"CNW_DTPREV","D",TamSX3("CNW_DTPREV")[1],TamSX3("CNW_DTPREV")[2])
TCSetField(cAlias,"CNA_VLTOT","N",TamSX3("CNA_VLTOT")[1],TamSX3("CNA_VLTOT")[2])

While !(cAlias)->(Eof())







	aAdd(aTotCtb,{(cAlias)->CNV_NUMERO,(cAlias)->CNV_PLANIL,(cAlias)->CNW_VLPREV,(cAlias)->CNA_VLTOT})




	If (nPlan := aScan(aAditPlan,{|x| x[1] == (cAlias)->CNV_PLANIL})) > 0
		aTotCtb[len(aTotCtb),4] += aAditPlan[nPlan,2]
	EndIf




	If dDtMax2 < (cAlias)->CNW_DTPREV
		dDtMax2 := (cAlias)->CNW_DTPREV
	EndIf

	(cAlias)->(dbSkip())
EndDo

(cAlias)->(dbCloseArea())




cQuery := "SELECT CNW.* "
cQuery += "  FROM "+RetSqlName("CNW")+" CNW "
cQuery += " WHERE CNW.CNW_FILIAL =  '"+xFilial("CNW")+"'"
cQuery += "   AND CNW.CNW_NUMERO IN ('"+cNumero+"')"
cQuery += "   AND CNW.CNW_CONTRA = '"+cContra+"'"
cQuery += "   AND CNW.CNW_REVISA = '"+cRevisa+"'"
cQuery += "   AND CNW.D_E_L_E_T_ = ' '"

cQuery := ChangeQuery(cQuery)
dbUseArea( .T. ,"TOPCONN",TcGenQry(,,cQuery),"TRB", .F. , .T. )

For X:=1 to len(aStrucCNW)
	if TRB->(FieldPos(aStrucCNW[X,1])) > 0 .And.  aStrucCNW[X,2] <> "C"
		TCSetField( "TRB", aStrucCNW[X,1], aStrucCNW[X,2], aStrucCNW[X,3], aStrucCNW[X,4] )
	endif
Next

dbSelectArea("TRB")
dbGoTop()

aItensCtb:=Array(Len(aCronCtb))

If !Eof()

	dbSelectArea("TRBCNW")
	If RecCount() > 0
		__dbZap()
	Endif

	aItensCtb[nItemNum] := {}
	aItensCtb[nItemNum] := {NY}

	dbSelectArea("TRB")
	cCnum:=TRB->CNW_NUMERO
	While !Eof()
      aItensCtb[nItemNum][NY]:=Array(len(aHeaderCt)+1)
		For x:=1 to len(aHeaderCt)
			If aHeaderCt[x,10] <> "V"
				aItensCtb[nItemNum,ny,x] := TRB->&(aHeaderCt[x,2])
			Else
				aItensCtb[nItemNum,ny,x] := CriaVar(aHeaderCt[x,2])
			EndIf
		Next
		aItensCtb[nItemNum,ny,len(aHeaderCt)+1] := .F. 

		dbSelectArea("TRB")
		nNrParcela:=Val(TRB->CNW_PARCEL)
		dUltData  :=TRB->CNW_DTPREV
		dbSkip()
		If TRB->CNW_NUMERO<>cCnum
         If !Eof()
	         cCnum:=TRB->CNW_NUMERO
				nItemNum++
				aItensCtb[nItemNum]:={}
				aItensCtb[nItemNum] := {NY}
				NY:=1
			Endif
		Else
			NY++
			aSize(aItensCtb[nItemNum],NY)
      Endif
	Enddo
	dbSelectArea("TRB")
	DbGoTop()
	While !Eof()
		TRB->( dbGoTop() )
		cCCusto :=TRB->CNW_CC
        cItemCt :=TRB->CNW_ITEMCT
        cClVl   :=TRB->CNW_CLVL
		dDtPrev := TRB->CNW_DTPREV
		TRB->( dbSkip() )
		dDtPrev := If(Eof(),30,(TRB->CNW_DTPREV-dDtPrev))
		TRB->( dbGoTop() )
		EXIT
   Enddo
	cCtbCron   := aCronCtb[1]
	TRBCNW->(dbGoTop())
	cCtbO := cCtbCron := aCronCtb[1]

	For x:=1 to len(aCronCtb)
		CN140CalcParc(aItensCtb,aCronCtb[x],@dDtMax1)
		If dDtMax1 > dDtMax2
			dDtMax2 := dDtMax1
		EndIf
	Next




	If dFCronog == NIL .Or.  dFCronog < dDtMax2
		dFCronog :=	dDtMax2
	EndIf
	nVgAdit := CN140Dif(CN9->CN9_DTFIM,dFCronog,CN9->CN9_UNVIGE)
	nVgAdit := CN9->CN9_VIGE+nVgAdit
	dFContra := CN100DtFim(CN9->CN9_UNVIGE,CN9->CN9_DTINIC,nVgAdit)






	If ExistBlock("CN140CNV")
		aRetCnv := ExecBlock("CN140CNV", .F. , .F. ,{aCronCtb,aItensCtb,cContra,cRevisa,cNrevisa,aAditPlan,aTotCtb})
		If ValType(aRetCnv)=="A"
			If Len(aRetCnv)>=1 .And.  ValType(aRetCnv[1]) == "A"
				aCronCtb  := aRetCnv[1]
			Endif
			If Len(aRetCnv)>=2 .And.  ValType(aRetCnv[2]) == "A"
				aItensCtb := aRetCnv[2]
			Endif
		EndIf
	EndIf




 	oGetCtb:aCols := aItensCtb[1]
 	nTotCronog     := aTotCtb[1,3]
 	nTotPlan       := aTotCtb[1,4]

	CN140Get2Chg(aCpo)
	oGetCtb:oBrowse:nAt :=  1
	oGetCtb:oBrowse:Refresh()
	oTotPlan:Refresh()
	oTotCronog:Refresh()
	oSaldDist:Refresh()
Else
	Help("CNTA140",1,"CNTA140_17")
	lRet := .F. 
Endif

TRB->(dbCloseArea())
RestArea(aArea)

Return lRet



























Function CN140CtbLoad(cCtbCron,aItensCtb,aCronCtb,aAditPlan,cContra,aCpo,cCtbO,oCtbCron,aTotCtb)

Local nPos  := aScan(aCronCtb,cCtbCron)
Local nPos2 := aScan(aCronCtb,cCtbO)
Local cPlan := ""
Local lRet  := .T. 
Local x

If nTotPlan <> nTotCronog
	Help("CNTA140",1,"CNTA140_11")
	oCtbCron:nAt := nPos2
	cCtbCron     := cCtbO
	lRet := .F. 
Else
	cCtbO      := cCtbCron
	nPosVlPrev := aScan(aHeaderCt,{|x| x[2] == "CNW_VLPREV"})

	If lRet .And.  nPos > 0



		aTotCtb[nPos2,3] := nTotCronog
    	aTotCtb[nPos2,4] := nTotPlan

		CNV->(dbSetOrder(1))

		oGetCtb:aCols       := aItensCtb[nPos]
		oGetCtb:oBrowse:nAt :=  1
		oGetCtb:oBrowse:Refresh()

  		nTotCronog:=aTotCtb[nPos][3]
    	nTotPlan  :=aTotCtb[nPos][4]

		oTotPlan:Refresh()
		oTotCronog:Refresh()
		oSaldDist:Refresh()
	EndIf
EndIf

Return lRet

















Function CN140CalcParc(aItensCtb,cCtbCron,dDataMax)

Local nX
Local nX2
Local nY
Local nPos2      := aScan(aCronCtb,cCtbCron)
Local nPosDtPrev := aScan(aHeaderCt,{|x| x[2] == "CNW_DTPREV"})
Local nPosVlPrev := aScan(aHeaderCt,{|x| x[2] == "CNW_VLPREV"})
Local nPosParc   := aScan(aHeaderCt,{|x| x[2] == "CNW_PARCEL"})
Local nVlDecres  :=0
Local nPosNCron  := 0
Local nDiaPar    := 30
Local nAvanco	 := 0

Local cNrParcela := ""

Local dUltData   := aItensCtb[nPos2,len(aItensCtb[nPos2]),nPosDtPrev]

Local lRet       := .T. 
Local lAcres	 := .T. 


If cModo == "1"
	lAcres := .T. 
ElseIf cModo == "2"
   lAcres := .F. 
Else
	lAcres := (oTpCronCtb:nAt == 1)
EndIf


If (CNV->(FieldPos("CNV_DIAPAR")) > 0) .And.  CNV->(Dbseek(xFilial("CNV")+cContra+"   "+cCtbCron))
	nDiaPar := CNV->CNV_DIAPAR
EndIf




If nParcelas > 0
	For nX:=Len(aItensCtb[nPos2]) to  1  STEP - 1
		if aItensCtb[nPos2][nX][nPosVlPrev]==0
			aDel(aItensCtb[nPos2],nX)
			aSize(aItensCtb[nPos2],Len(aItensCtb[nPos2])-1)
		Endif
	next




   cNrParcela := aItensCtb[nPos2,len(aItensCtb[nPos2]),nPosParc]

	If lAcres
	   For nX:=1 to nParcelas
          cNrParcela := Soma1(cNrParcela)
          If nDiaPar == 30
			nAvanco  :=Day(LastDay(dUltData))
	      Else
			nAvanco := nDiaPar
		  EndIf
		  dUltData := dUltData + nAvanco
          aAdd(aItensCtb[nPos2],Array(len(aHeaderCt)+1))
          nPosNCron := len(aItensCtb[nPos2])
          For nX2:=1 to len(aHeaderCt)
          	Do Case
          		Case aHeaderCt[nX2,2] == "CNW_PARCEL"
          			aItensCtb[nPos2,nPosNCron,nX2] := cNrParcela
          		Case aHeaderCt[nX2,2] == "CNW_DTPREV"
          	 		aItensCtb[nPos2,nPosNCron,nX2] := dUltData
          		Case aHeaderCt[nX2,2] == "CNW_COMPET"
          	 		aItensCtb[nPos2,nPosNCron,nX2] := StrZero(Month(dUltData),2)+"/"+Str(Year(dUltData),4)
          	 	OtherWise
          	 		aItensCtb[nPos2,nPosNCron,nX2] := CriaVar(aHeaderCt[nX2,2])
          	 end
          Next
	      aItensCtb[nPos2,nPosNCron,len(aHeaderCt)+1]:= .F. 
	   next
	Else
      If Len(aItensCtb[nPos2])> nParcelas
	      For nX2:=Len(aItensCtb[nPos2]) to ((Len(aItensCtb[nPos2])-nParcelas)+1) STEP - 1
	          nVlDecres+=aItensCtb[nPos2][nX2][nPosVlPrev]
	          aDel(aItensCtb[nPos2],nX2)
		   next
	     	ASize(aItensCtb[nPos2],Len(aItensCtb[nPos2])-nParcelas)
	     	aItensCtb[nPos2][Len(aItensCtb[nPos2])][nPosVlPrev]+=nVlDecres
	    Else
    	    Help("CNTA140",1,"CNTA140_18")
    	    lRet:= .F. 
	   Endif
  	Endif
EndIf

dDataMax := aItensCtb[nPos2][Len(aItensCtb[nPos2])][nPosDtPrev]

Return lRet




















Function CN140GerCt(aItensCtb,cContra,cRevisa,cNRevisa)

Local nX
Local nY
Local nZ

Local cFilCNV := xFilial("CNV")
Local cFilCNW := xFilial("CNW")
Local cQuery  := ""
Local cCrons  := ""
Local cPoName := ""

Local aNCron := {}
Local aArea  := GetArea()




If lRevisad



	dbSelectArea("CN9")
	dbSetORder(1)
	If dbSeek(xFilial("CN9")+cContra+cRevisa) .And.  !Empty(CN9->CN9_REVATU)
		cNRevisa := CN9->CN9_REVATU
	EndIf

	For nX:=1 to Len(aCronCtb)
		cCrons += "'"+aCronCtb[nX]+"',"
	Next

	cCrons:=SubStr(cCrons,1,len(cCrons)-1)




	cQuery := "SELECT CNW.R_E_C_N_O_ as RECNO "
	cQuery += "  FROM "+RetSQLName("CNW")+" CNW "
	cQuery += " WHERE CNW.CNW_FILIAL = '"+cFilCNW+"'"
	cQuery += "   AND CNW.CNW_NUMERO in ("+cCrons+")"
	cQuery += "   AND CNW.CNW_CONTRA = '"+cContra+"'"
	cQuery += "   AND CNW.CNW_REVISA = '"+cNRevisa+"'"
	cQuery += "   AND CNW.D_E_L_E_T_ = ' ' "

	cQuery := ChangeQuery( cQuery )
	dbUseArea( .T. , "TopConn", TCGenQry(,,cQuery), "CNWTMP", .F. , .F.  )

	dbSelectArea("CNW")




	While !CNWTMP->(Eof())
		dbGoTo(CNWTMP->RECNO)
		RecLock("CNW")
			dbDelete()
		MsUnlock()

		CNWTMP->(dbSkip())
	EndDo

	CNWTMP->(dbCloseArea())




	cQuery := "SELECT CNV.R_E_C_N_O_ as RECNO "
	cQuery += "  FROM "+RetSQLName("CNV")+" CNV "
	cQuery += " WHERE CNV.CNV_FILIAL = '"+cFilCNV+"'"
	cQuery += "   AND CNV.CNV_NUMERO in ("+cCrons+")"
	cQuery += "   AND CNV.CNV_CONTRA = '"+cContra+"'"
	cQuery += "   AND CNV.CNV_REVISA = '"+cNRevisa+"'"
	cQuery += "   AND CNV.D_E_L_E_T_ <> '*' "
	cQuery += " ORDER BY CNV.CNV_NUMERO"

	cQuery := ChangeQuery( cQuery )
	dbUseArea( .T. , "TopConn", TCGenQry(,,cQuery), "CNVTMP", .F. , .F.  )

	dbSelectArea("CNV")




	While !CNVTMP->(Eof())
		dbGoTo(CNVTMP->RECNO)
		RecLock("CNV")
			dbDelete()
		MsUnlock()

		CNVTMP->(dbSkip())
	EndDo

	CNVTMP->(dbCloseArea())
EndIf




cQuery := "SELECT * "
cQuery += "  FROM "+RetSQLName("CNV")+" CNV "
cQuery += " WHERE CNV.CNV_FILIAL = '"+cFilCNV+"'"
cQuery += "   AND CNV.CNV_CONTRA = '"+cContra+"'"
cQuery += "   AND CNV.CNV_REVISA = '"+cRevisa+"'"
cQuery += "   AND CNV.D_E_L_E_T_ <> '*' "

cQuery := ChangeQuery( cQuery )
dbUseArea( .T. , "TopConn", TCGenQry(,,cQuery), "CNVTMP", .F. , .F.  )




While !CNVTMP->(Eof())
	nX := aScan(aCronCtb,CNVTMP->CNV_NUMERO)



	If nX > 0
		RecLock("CNV", .T. )
			For nY:=1 to FCount()
				cPoName := FieldName(nY)
				Do Case
					Case cPoName == "CNV_FILIAL"
						CNV->CNV_FILIAL := cFilCNV
					Case cPoName == "CNV_REVISA"
						CNV->CNV_REVISA := cNRevisa
					OtherWise
						FieldPut(nY,CNVTMP->&(cPoName))
				end
			Next
		MsUnlock()




		For nY:=1 to len(aItensCtb[nX])
			RecLock("CNW", .T. )
				For nZ:=1 to len(aHeaderCt)
					CNW->&(aHeaderCt[nZ,2]) := aItensCtb[nX,NY,nZ]
				Next
				CNW->CNW_CONTRA := cContra
				CNW->CNW_REVISA := cNRevisa
				CNW->CNW_NUMERO := aCronCtb[nX]
				CNW->CNW_FILIAL := cFilCNW
			MsUnlock()
		Next
	ElseIf !lRevisad



		aAdd(aNCron,CNVTMP->CNV_NUMERO)
	EndIf
	CNVTMP->(dbSkip())
EndDo

CNVTMP->(dbCloseArea())




If len(aNCron) > 0
	CN140CopCtb(cContra,cRevisa,cNRevisa,@aNCron)
EndIf

RestArea(aArea)

Return .T. 




















Function CN140CopCtb(cContra,cRevisa,cNRevisa,aCron)
Local nX       := 0
Local aAreaCN9 := {}
Local cCrons   := ""
Local aStrucCNV:= CNV->(dbStruct())
Local aStrucCNW:= CNW->(dbStruct())

aCron := If( aCron == nil, {}, aCron ) ;

If len(aCron) > 0



	For nX:=1 to Len(aCron)
		cCrons += "'"+aCron[nX]+"',"
	Next

	cCrons:=SubStr(cCrons,1,len(cCrons)-1)
EndIf




If lRevisad



	aAreaCN9 := CN9->(GetArea())
	dbSelectArea("CN9")
	dbSetOrder(1)
	If dbSeek(xFilial("CN9")+cContra+cRevisa) .And.  !Empty(CN9->CN9_REVATU)
		cNRevisa := CN9->CN9_REVATU
	EndIf
	RestArea(aAreaCN9)




	cQuery := "SELECT CNW.R_E_C_N_O_ as RECNO "
	cQuery += "  FROM "+RetSQLName("CNW")+" CNW "
	cQuery += " WHERE CNW.CNW_FILIAL = '"+xFilial("CNW")+"'"
	cQuery += "   AND CNW.CNW_CONTRA = '"+cContra+"'"
	cQuery += "   AND CNW.CNW_REVISA = '"+cNRevisa+"'"
	If !Empty(cCrons)
		cQuery += " AND CNW.CNW_NUMERO in ("+ cCrons +")"
	EndIF
	cQuery += " AND CNW.D_E_L_E_T_ = ' '"

	cQuery := ChangeQuery( cQuery )
	dbUseArea( .T. , "TopConn", TCGenQry(,,cQuery), "CNWTMP", .F. , .F.  )

	For nx:=1 to len(aStrucCNW)
		if CNWTMP->(FieldPos(aStrucCNW[nx,1])) > 0 .And.  aStrucCNW[nx,2] <> "C"
			TCSetField( "CNWTMP", aStrucCNW[nx,1], aStrucCNW[nx,2], aStrucCNW[nx,3], aStrucCNW[nx,4] )
		endif
	Next
	dbSelectArea("CNW")




	While !CNWTMP->(Eof())
		dbGoTo(CNWTMP->RECNO)
		RecLock("CNW")
			dbDelete()
		MsUnlock()

		CNWTMP->(dbSkip())
	EndDo

	CNWTMP->(dbCloseArea())




	cQuery := "SELECT CNV.R_E_C_N_O_ as RECNO "
	cQuery += "  FROM "+RetSQLName("CNV")+" CNV "
	cQuery += " WHERE CNV.CNV_FILIAL = '"+xFilial("CNV")+"'"
	cQuery += "   AND CNV.CNV_CONTRA = '"+cContra+"'"
	cQuery += "   AND CNV.CNV_REVISA = '"+cNRevisa+"'"
	cQuery += "   AND "
	If !Empty(cCrons)
		cQuery += " CNV.CNV_NUMERO in ("+ cCrons +") AND "
	EndIF
	cQuery += " CNV.D_E_L_E_T_ <> '*'"

	cQuery := ChangeQuery( cQuery )
	dbUseArea( .T. , "TopConn", TCGenQry(,,cQuery), "CNVTMP", .F. , .F.  )

	For nx:=1 to len(aStrucCNV)
		if CNVTMP->(FieldPos(aStrucCNV[nx,1])) > 0 .And.  aStrucCNV[nx,2] <> "C"
			TCSetField( "CNVTMP", aStrucCNV[nx,1], aStrucCNV[nx,2], aStrucCNV[nx,3], aStrucCNV[nx,4] )
		endif
	Next
	dbSelectArea("CNV")




	While !CNVTMP->(Eof())
		dbGoTo(CNVTMP->RECNO)
		RecLock("CNV")
			dbDelete()
		MsUnlock()

		CNVTMP->(dbSkip())
	EndDo

	CNVTMP->(dbCloseArea())
EndIf




cQuery := "SELECT CNV.* "
cQuery += "  FROM "+RetSQLName("CNV")+" CNV "
cQuery += " WHERE CNV.CNV_FILIAL = '"+xFilial("CNV")+"'"
cQuery += "   AND CNV.CNV_CONTRA = '"+cContra+"'"
cQuery += "   AND CNV.CNV_REVISA = '"+cRevisa+"'"
cQuery += "   AND "
If !Empty(cCrons)
	cQuery += " CNV.CNV_NUMERO in ("+ cCrons +") AND "
EndIF
cQuery += " CNV.D_E_L_E_T_ <> '*'"

cQuery := ChangeQuery( cQuery )
dbUseArea( .T. , "TopConn", TCGenQry(,,cQuery), "CNVTMP", .F. , .F.  )

For nx:=1 to len(aStrucCNV)
	If CNVTMP->(FieldPos(aStrucCNV[nx,1])) > 0 .And.  aStrucCNV[nx,2] <> "C"
		TCSetField( "CNVTMP", aStrucCNV[nx,1], aStrucCNV[nx,2], aStrucCNV[nx,3], aStrucCNV[nx,4] )
	Endif
Next
dbSelectArea("CNV")




While !CNVTMP->(Eof())
	RecLock("CNV", .T. )
		For nx:=1 to CNV->(FCount())
			If  aStrucCNV[nx,2]<>"M"
				FieldPut(nx,CNVTMP->&(CNV->( FieldName(nX) )))
			EndIf
		Next
		CNV->CNV_REVISA := cNRevisa
	MsUnlock()

	cQuery := "SELECT * "
	cQuery += "  FROM "+RetSQLName("CNW")+" CNW "
	cQuery += " WHERE CNW.CNW_FILIAL = '"+xFilial("CNW")+"'"
	cQuery += "   AND CNW.CNW_CONTRA = '"+cContra+"'"
	cQuery += "   AND CNW.CNW_REVISA = '"+cRevisa+"'"
	cQuery += "   AND CNW.CNW_NUMERO = '"+CNVTMP->CNV_NUMERO+"'"
	cQuery += "   AND CNW.D_E_L_E_T_ = ' '"

	cQuery := ChangeQuery( cQuery )
	dbUseArea( .T. , "TopConn", TCGenQry(,,cQuery), "CNWTMP", .F. , .F.  )

	For nx:=1 to len(aStrucCNW)
		If CNWTMP->(FieldPos(aStrucCNW[nx,1])) > 0 .And.  aStrucCNW[nx,2] <> "C"
			TCSetField( "CNWTMP", aStrucCNW[nx,1], aStrucCNW[nx,2], aStrucCNW[nx,3], aStrucCNW[nx,4] )
		Endif
	Next
	dbSelectArea("CNW")
	While !CNWTMP->(Eof())
		RecLock("CNW", .T. )
			For nX:=1 to CNW->( FCount() )
				If  aStrucCNW[nx,2]<>"M"
					FieldPut(nX,CNWTMP->&(CNW->( FieldName(nX) )))
				EndIf
			Next
			CNW->CNW_REVISA := cNRevisa
		MsUnlock()
		CNWTMP->(dbSkip())
	EndDo

	CNWTMP->(dbCloseArea())
	CNVTMP->(dbSkip())
EndDo

CNVTMP->(dbCLoseArea())

Return Nil

















Function CN140Get2Chg(aCpo)

Local nPosFlgApr := aScan(oGetCtb:aHeader,{|x| x[2] == "CNW_FLGAPR"})

If nPosFlgApr > 0



	If oGetCtb:aCols[oGetCtb:nAt,nPosFlgApr]=="1"



		oGetCtb:OBROWSE:aAlter := {}
	Else



		oGetCtb:OBROWSE:aAlter := aCpo
	EndIf
EndIf

Return .T. 




















Function CN140VldCtb(cCtbCron,aCronCtb,aTotCtb,aItensCtb)
Local lRet := .T. 
Local nPos := aScan(aCronCtb,cCtbCron)
Local nx

If nTotPlan <> nTotCronog
	Help("CNTA140",1,"CNTA140_11")
	lRet := .F. 
Else
	If nPos > 0
		aTotCtb[nPos,3] := nTotCronog
		aItensCtb[nPos] := oGetCtb:aCols
	EndIf




	For nX := 1 to len(aCronCtb)
		If aTotCtb[nX,3] <> aTotCtb[nX,4]
			Aviso("CNTA140","O cronograma "+aCronCtb[nX]+" possui saldo a ser distribuído",{"OK"})
			lRet := .F. 
			Exit
		EndIf
	Next
EndIf

oWizard:NPanel := 15

Return lRet



















Function CN140AjuDt(cContra,cNRevisa,dFContra,dFAtu,lMedeve)
Local cQuery  := ""
Local cAlias  := GetNextAlias()
Local cAlias2 := ""

If lMedeve



	cQuery := "SELECT CNA.R_E_C_N_O_ AS RECNO "
	cQuery += "  FROM "+RetSQLName("CNA")+" CNA "
	cQuery += " WHERE CNA.CNA_FILIAL = '"+xFilial("CNA")+"'"
	cQuery += "   AND CNA.CNA_CONTRA = '"+cContra+"'"
	cQuery += "   AND CNA.CNA_REVISA = '"+cNRevisa+"'"
	cQuery += "   AND CNA.CNA_DTFIM  = '"+DTOS(dFContra)+"'"
	cQuery += "   AND CNA.D_E_L_E_T_ = ' '"

	cQuery := ChangeQuery( cQuery )
	dbUseArea( .T. , "TopConn", TCGenQry(,,cQuery), cAlias, .F. , .F.  )

	While !( cAlias )->(Eof())



		CNA->( dbGoto( (cAlias)->RECNO ) )
		RecLock("CNA", .F. )
			CNA->CNA_DTFIM := dFAtu
		MsUnlock()
		(cAlias)->(dbSkip())
	EndDo
Else



	cQuery := "SELECT CNF.CNF_NUMERO,MAX(CNF.CNF_PRUMED) AS CNF_PRUMED "
	cQuery += "  FROM "+RetSQLName("CNF")+" CNF "
	cQuery += " WHERE CNF.CNF_FILIAL = '"+xFilial("CNF")+"'"
	cQuery += "   AND CNF.CNF_CONTRA = '"+cContra+"'"
	cQuery += "   AND CNF.CNF_REVISA = '"+cNRevisa+"'"
	cQuery += "   AND CNF.D_E_L_E_T_ = ' '"
	cQuery += " GROUP BY CNF.CNF_FILIAL, CNF.CNF_CONTRA, CNF.CNF_REVISA, CNF.CNF_NUMERO"

	cQuery := ChangeQuery( cQuery )
	dbUseArea( .T. , "TopConn", TCGenQry(,,cQuery), cAlias, .F. , .F.  )

	TCSetField(cAlias,"CNF_PRUMED","D",8,0)

	cAlias2 := GetNextAlias()
	While !(cAlias)->(Eof())



		cQuery := "SELECT CNA.R_E_C_N_O_ AS RECNO "
		cQuery += "  FROM "+RetSQLName("CNA")+" CNA "
		cQuery += " WHERE CNA.CNA_FILIAL = '"+xFilial("CNA")+"'"
		cQuery += "   AND CNA.CNA_CONTRA = '"+cContra+"'"
		cQuery += "   AND CNA.CNA_REVISA = '"+cNRevisa+"'"
		cQuery += "   AND CNA.CNA_CRONOG = '"+(cAlias)->CNF_NUMERO+"'"
		cQuery += "   AND CNA.D_E_L_E_T_ = ' '"

		cQuery := ChangeQuery( cQuery )
		dbUseArea( .T. , "TopConn", TCGenQry(,,cQuery), cAlias2, .F. , .F.  )

		If !(cAlias2)->(Eof())



			CNA->( dbGoto( (cAlias2)->RECNO ) )




			If CNA->CNA_DTFIM < (cAlias)->CNF_PRUMED



				RecLock("CNA", .F. )
					CNA->CNA_DTFIM := (cAlias)->CNF_PRUMED
				MsUnlock()
			EndIf
		EndIf

		(cAlias2)->( dbCloseArea() )

		(cAlias)->(dbSkip())
	EndDo
EndIf

Return



















Function CN140AtuDtFim(dFContra,cContra,cRevisa)

Local cUnVig

If oUnVig:nat == 1
	cUnVig := "1"
ElseIf oUnVig:nat == 2
	cUnVig := "2"
ElseIf oUnVig:nat == 3
	cUnVig := "3"
Else
	cUnVig := "4"
EndIf

Return CN140DtFim(@dFContra,nVgAdit,cContra,cRevisa,cUnVig)












Function CN140AjSX7()

Local aAreaAnt := GetArea()
Local aAreaSX7 := SX7->(GetArea())
Local cCampo 	:= ""
Local cSeq	 	:= "001"
Local cRegraOri := 'NoRound(M->CNB_QUANT*M->CNB_VLUNIT,TamSX3("CNB_VLTOT")[2])'
Local cRegraNew := 'If(FunName()="CNTA140",CN140Qtd(),Round(M->CNB_QUANT*M->CNB_VLUNIT,TamSX3("CNB_VLTOT")[2]))'

dbSelectArea("SX7")
dbSetOrder(1)

cCampo := "CNB_QUANT "
If dbSeek(cCampo+cSeq) .AND.  AllTrim(SX7->X7_REGRA) <> cRegraNew
	RecLock("SX7", .F. )
		_FIELD->X7_REGRA := cRegraNew
	MsUnLock()
EndIf

cCampo := "CNB_VLUNIT"
If dbSeek(cCampo+cSeq) .AND.  AllTrim(SX7->X7_REGRA) == cRegraOri
	RecLock("SX7", .F. )
		_FIELD->X7_REGRA := cRegraNew
	MsUnLock()
EndIf

RestArea(aAreaSX7)
RestArea(aAreaAnt)

Return


















Function CN140ItMed(cContra,cRevisa,cPlanilha)
Local nTotMed     := 0
Local cQuery      := ""
Local aAreaAnt    := GetArea()
Local aAreaCNB    := CNB->(GetArea())

cContra := If( cContra == nil, "", cContra ) ;
cRevisa := If( cRevisa == nil, "", cRevisa ) ;
cPlanilha := If( cPlanilha == nil, "", cPlanilha ) ;


If !Empty(cContra)
	cQuery := "SELECT CNB.CNB_VLTOT, CNB.CNB_VLDESC "
	cQuery += "  FROM " + RetSQLName("CNB")+" CNB "
	cQuery += " WHERE CNB.CNB_FILIAL = '"+xFilial("CNB")+"'"
	cQuery += "   AND CNB.CNB_CONTRA = '"+cContra+"'"
	cQuery += "   AND "
	If !Empty(cRevisa)
		cQuery += "   CNB.CNB_REVISA = '" + cRevisa + "' AND "
	EndIf
	If !Empty(cPlanilha)
		cQuery += "   CNB.CNB_NUMERO = '" + cPlanilha + "' AND "
	EndIf
	cQuery += " ((CNB.CNB_SLDMED <= 0 AND CNB.CNB_VLTOTR<=0) OR (CNB.CNB_SLDMED <= 0 And CNB.CNB_VLTOTR>0)) "
	cQuery += "  AND CNB.D_E_L_E_T_ = '' "

	cQuery := ChangeQuery( cQuery )
	dbUseArea( .T. , "TopConn", TCGenQry(,,cQuery), "CNBQRY", .F. , .F.  )

	TCSetField( "CNBQRY", "CNB_VLTOT", "N", TamSX3("CNB_VLTOT")[1], TamSX3("CNB_VLTOT")[2] )

	While CNBQRY->( !Eof() )

		nTotMed+= CNBQRY->CNB_VLTOT
		CNBQRY->(dbSkip())
	EndDo

	CNBQRY->( dbCloseArea() )
EndIf


RestArea(aAreaCNB)
RestArea(aAreaAnt)

Return nTotMed

















Function CN140VrCp(cContra,cRevisa)
Local lCopia    := .F. 
Local lDtCopia  := .F. 
Local cQuery    := ""
Local cAliasCNB := GetNextAlias()
Local nCount    := 0

cQuery := "SELECT COUNT(*),CNB.CNB_DTREAL, CNB.CNB_SLDMED "
cQuery += "  FROM "+RetSQLName("CNB")+" CNB "
cQuery += " WHERE CNB.CNB_FILIAL  = '"+xFilial("CNB")+"'"
cQuery += "   AND CNB.CNB_CONTRA  = '"+cContra+"'"
cQuery += "   AND CNB.CNB_REVISA  = '"+cRevisa+"'"
cQuery += "   AND CNB.D_E_L_E_T_ <> '*' "
cQuery += " GROUP BY CNB.CNB_DTREAL, CNB.CNB_SLDMED "
cQuery := ChangeQuery(cQuery)

dbUseArea( .T. ,"TOPCONN",TcGenQry(,,cQuery),cAliasCNB, .F. , .T. )

While !(cAliasCNB)->(Eof())
	nCount++

	If Empty((cAliasCNB)->CNB_DTREAL) .Or.  (cAliasCNB)->CNB_SLDMED == 0
		lDtCopia:= .T. 
	EndIf

	(cAliasCNB)->(dbSkip())
EndDo
(cAliasCNB)->(dbCloseArea())

If nCount>1 .And.  lDtCopia
	lCopia := .T. 
EndIf

Return lCopia














Function CN140VLIT(aPlan,aHeaderIt,aItens)
Local lRet			:= .T. 
Local lCN140VNPL	:= ExistBlock("CN140VNPL")
Local nPerc		:= 0
Local nVlTot		:= 0
Local nVlMin		:= 0
Local nVlMax		:= 0
Local nX			:= 0
Local nY			:= 0
Local cCampoVl	:= If(cTpRev == "3","CNB_REALI","CNB_VLUNIT")
Local cMsg			:= ""
Local cPicture	:= PesqPict("CN9","CN9_VLINI")


If CN9->(FieldPos("CN9_CODED")) > 0 .And.  !Empty(CN9->CN9_CODED) .And.  CO1->(FieldPos("CO1_REFORM")) > 0


	For nY := 1 To Len(aItens)
		aEval(aItens[nY],{|z| nVlTot += z[GDFieldPos(cCampoVl,aHeaderIt)] * z[GDFieldPos("CNB_QUANT",aHeaderIt)]})
	next

	CNA->(dbSetOrder(1))
	CNA->(dbSeek(xFilial("CNA")+CN9->(CN9_NUMERO+CN9_REVISA)))
	While !CNA->(EOF()) .And.  CNA->(CNA_FILIAL+CNA_CONTRA+CNA_REVISA) == xFilial("CNA")+CN9->(CN9_NUMERO+CN9_REVISA)
		If aScan(aPlan,{|x| x[1] == CNA->CNA_NUMERO}) == 0
			nVlTot += CNA->CNA_VLTOT
		EndIf
		CNA->(dbSkip())
	End


	CO1->(dbSetOrder(1))
	CO1->(dbSeek(xFilial("CO1")+CN9->(CN9_CODED+CN9_NUMPR)))
	If CO1->CO1_REFORM == "1"
		nPerc := 0.50
		cMsg  := STR0150
	ElseIf CO1->CO1_REFORM == "2"
		nPerc := 0.25
		cMsg  := STR0149
	EndIf












__execSql("TMPREAJ"," SELECT SUM(CN9_VLREAJ) TOTREAJ, SUM(CN9_VLADIT) TOTADIT FROM  "+RetSqlName('CN9')+" CN9 JOIN  "+RetSqlName('CN0')+" CN0 ON CN0.D_E_L_E_T_= ' ' AND CN0.CN0_FILIAL =  '" +xFilial('CN0')+"'  AND CN0.CN0_CODIGO = CN9.CN9_TIPREV AND ( CN0_TIPO = '1' OR CN0_TIPO = '2' ) WHERE CN9.D_E_L_E_T_= ' ' AND CN9.CN9_FILIAL =  '" +xFilial('CN9')+"'  AND CN9_NUMERO =  "+___SQLGetValue(CN9->CN9_NUMERO)+" AND CN9_REVATU = ' '",{},.F.)
	GetLastQuery()

	nVlMax := (CN9->CN9_VLINI + TMPREAJ->TOTREAJ + TMPREAJ->TOTADIT) * (1+nPerc)
	nVlMin := (CN9->CN9_VLINI + TMPREAJ->TOTREAJ + TMPREAJ->TOTADIT) * (1-nPerc)

	If nVlTot > nVlMax .Or.  nVlTot < nVlMin

		Aviso("EDITAL",cMsg +LTrim(Transform(nVlMin,cPicture)) +STR0151 +LTrim(Transform(nVlMax,cPicture)) +".",{"OK"},2)
		lRet := .F. 
	EndIf

	TMPREAJ->(dbCloseArea())

EndIf

If lRet .And.  lCN140VNPL
   lRet := ExecBlock("CN140VNPL", .F. , .F. )
EndIf

Return lRet



















Function CN140RevMed(cContra,cRevisa,cNRevisa)
Local nX       := 0
Local nZ       := 0
Local nMemo    := 0

Local aAreaCN9 := {}
Local aMemos   := {}
Local aStruCND := {}
Local aStruCNE := {}

Local cAlias   := ""
Local cField   := ""
Local lCnRevMd := SuperGetMV("MV_CNREVMD", .F. , .T. )

If lCnRevMd



	If lRevisad



		aAreaCN9 := CN9->(GetArea())
		dbSelectArea("CN9")
		dbSetOrder(1)
		If dbSeek(xFilial("CN9")+cContra+cRevisa) .And.  !Empty(CN9->CN9_REVATU)
			cNRevisa := CN9->CN9_REVATU
		EndIf
		RestArea(aAreaCN9)
		cQuery := "SELECT CND.CND_NUMMED,CND.R_E_C_N_O_ as RECNO "
		cQuery += "  FROM "+RetSQLName("CND")+" CND "
		cQuery += " WHERE CND.CND_FILIAL = '"+xFilial("CND")+"'"
		cQuery += "   AND CND.CND_CONTRA = '"+cContra+"'"
		cQuery += "   AND CND.CND_REVISA = '"+cNRevisa+"'"
		cQuery += "   AND CND.D_E_L_E_T_ = ' '"

		cQuery := ChangeQuery( cQuery )
		dbUseArea( .T. , "TopConn", TCGenQry(,,cQuery), "CNDTMP", .F. , .F.  )

		dbSelectArea("CND")




		While !CNDTMP->(Eof())
			CND->(dbGoTo(CNDTMP->RECNO))
			RecLock("CND", .F. )
				dbDelete()
			MsUnlock()

			cQuery := "SELECT CNE.R_E_C_N_O_ as RECNO "
			cQuery += "  FROM "+RetSQLName("CNE")+" CNE "
			cQuery += " WHERE CNE.CNE_FILIAL = '"+xFilial("CNE")+"'"
			cQuery += "   AND CNE.CNE_CONTRA = '"+cContra+"'"
			cQuery += "   AND CNE.CNE_REVISA = '"+cNRevisa+"'"
			cQuery += "   AND CNE.CNE_NUMMED = '"+CNDTMP->CND_NUMMED +"'"
			cQuery += "   AND CNE.D_E_L_E_T_ = ' '"

			cQuery := ChangeQuery( cQuery )
			dbUseArea( .T. , "TopConn", TCGenQry(,,cQuery), "CNETMP", .F. , .F.  )

			dbSelectArea("CNE")




			While !CNETMP->(Eof())
				CNE->(dbGoTo(CNETMP->RECNO))
				RecLock("CNE", .F. )
					dbDelete()
				MsUnlock()
				CNETMP->(dbSkip())
			EndDo
			CNETMP->(dbCloseArea())

			CNDTMP->(dbSkip())
		EndDo

		CNDTMP->(dbCloseArea())
	EndIf

	cQuery := "SELECT CND.*,CND.R_E_C_N_O_ as RECNO "
	cQuery += "  FROM "+RetSQLName("CND")+" CND "
	cQuery += " WHERE CND.CND_FILIAL = '"+xFilial("CND")+"'"
	cQuery += "   AND CND.CND_CONTRA = '"+cContra+"'"
	cQuery += "   AND CND.CND_REVISA = '"+cRevisa+"'"
	cQuery += "   AND CND.D_E_L_E_T_ = ' '"

	cQuery := ChangeQuery( cQuery )
	dbUseArea( .T. , "TopConn", TCGenQry(,,cQuery), "CNDTMP", .F. , .F.  )

	dbSelectArea("CND")



	While !CNDTMP->(Eof())

		CND->(dbGoto(CNDTMP->RECNO))
		aStruCND := CND->(dbStruct())


		For nZ:=1 to len(aStruCND)
			If aStruCND[nZ][2]=="M"
				Aadd(aMemos,{aStruCND[nZ][1],&("CND->"+(aStruCND[nZ][1]))})
			EndIf
		Next

		RecLock("CND", .T. )
			For nx:=1 to CND->(FCount())
				cField := FieldName(nX)
				If  Type("CNDTMP->"+cField)<> "U"
					FieldPut(nx,CNDTMP->&(CND->( FieldName(nX) )))
				EndIf


				If  Type("CND->"+cField)== "M"
					nMemo:= aScan(aMemos,{|x| x[1]==FieldName(nX)})
					If nMemo>0
						FieldPut(nx,aMemos[nMemo][2])
					EndIf
				EndIf
			Next
			CND->CND_REVISA := cNRevisa
		MsUnlock()
	    aMemos := {}

		cQuery := "SELECT CNE.*,CNE.R_E_C_N_O_ as RECNO "
		cQuery += "  FROM "+RetSQLName("CNE")+" CNE "
		cQuery += " WHERE CNE.CNE_FILIAL = '"+xFilial("CNE")+"'"
		cQuery += "   AND CNE.CNE_CONTRA = '"+cContra+"'"
		cQuery += "   AND CNE.CNE_REVISA = '"+cRevisa+"'"
		cQuery += "   AND CNE.CNE_NUMMED = '"+CNDTMP->CND_NUMMED+"'"
		cQuery += "   AND CNE.D_E_L_E_T_ = ' '"

		cQuery := ChangeQuery( cQuery )
		dbUseArea( .T. , "TopConn", TCGenQry(,,cQuery), "CNETMP", .F. , .F.  )

		dbSelectArea("CNE")




		While !CNETMP->(Eof())
			CNE->(dbGoto(CNETMP->RECNO))
			aStruCNE := CNE->(dbStruct())


			For nZ:=1 to len(aStruCNE)
				If aStruCNE[nZ][2]=="M"
					Aadd(aMemos,{aStruCNE[nZ][1],&("CNE->"+(aStruCNE[nZ][1]))})
				EndIf
			Next

			RecLock("CNE", .T. )
				For nx:=1 to CNE->(FCount())
					cField := FieldName(nX)
					If  Type("CNETMP->"+cField)<> "U"
						FieldPut(nx,CNETMP->&(CNE->( FieldName(nX) )))
					EndIf


					If  Type("CNE->"+cField)== "M"
						nMemo:= aScan(aMemos,{|x| x[1]==FieldName(nX)})
						If nMemo>0
							FieldPut(nx,aMemos[nMemo][2])
						EndIf
					EndIf
				Next
			 	CNE->CNE_REVISA := cNRevisa
			MsUnlock()
			aMemos:= {}

			CNETMP->(dbSkip())
		EndDo
		CNETMP->(dbCloseArea())


		CNDTMP->(dbSkip())
	EndDo
	CNDTMP->(dbCloseArea())
EndIf
Return Nil













Static Function AjustaSX1()
Local aAreaAnt := GetArea()



PutHelp("PCNTA140_19",{"Não há planilha para o contrato  "," selecionado com opção de Reajuste."}, {"No worksheet for the contract    "," selected with Readjust opcion."}, {"No hay planilla para el contrato "," seleccionado con opción del Reajuste."}, .F. )



PutHelp("SCNTA140_19",{"Verificar a planilha deste      ","contrato."}, {"Check the worksheet of this     ","contract."}, {"Verifique el planilha del       ","contrato."}, .F. )



PutHelp("PCNTA140_20",{"O contrato selecionado no browser","não está disponível para a Revisão    ","selecionada."}, {"The selected contract on the     ","browser isn't available for the       ","selected Revision."}, {"El contracto seleccionado en     ","browser no estas disponible para el   ","Revision seleccionada."}, .F. )



PutHelp("SCNTA140_20",{"Selecione através do browser o  ","contrato apropriado para a revisão    ","selecionada."}, {"Select through of browser the   ","appropried contract for to selected   ","Revision."}, {"Seleccione a traves del browser ","el conctracto atribuido para el       "," Revision seleccionada."}, .F. )



PutHelp("PCNTA140_24",{"Preencha a data de referência do","reajuste."}, {"Fill in the adjustment reference","date."}, {"Rellene la fecha de referência","del reajuste."}, .F. )

RestArea(aAreaAnt)
Return















Function CN140QTD()
Local nPosVlUn := 0
Local nPlanVlT := 0
Local nPosQtd  := 0
Local nValor   := 0
Local lRotAuto := Type("lMsHelpAuto") == "L" .And.  lMsHelpAuto

If !lRotAuto
	nPosVlUn := aScan(oGetDad1:aHeader,{|x| x[2] == "CNB_VLUNIT"})
	nPosQtd  := aScan(oGetDad1:aHeader,{|x| x[2] == "CNB_QUANT"})
	nPlanVlT := Posicione("CNA",1,xFilial("CNA")+cContra+cRevAtu,"CNA_VLTOT")
	If (nPlanVlT-Round(ogetDad1:aCols[oGetDad1:nAt][nPosQtd]*ogetDad1:aCols[oGetDad1:nAt][nPosVlUn],2))>0 .And.  (nPlanVlT-Round(ogetDad1:aCols[oGetDad1:nAt][nPosQtd]*ogetDad1:aCols[oGetDad1:nAt][nPosVlUn],2))<=0.01
		nValor := Round(ogetDad1:aCols[oGetDad1:nAt][nPosQtd]*ogetDad1:aCols[oGetDad1:nAt][nPosVlUn],2)+nPlanVlT-Round(M->CNB_QUANT*ogetDad1:aCols[oGetDad1:nAt][nPosVlUn],2)
	Else
	    nValor := Round(ogetDad1:aCols[oGetDad1:nAt][nPosQtd]*ogetDad1:aCols[oGetDad1:nAt][nPosVlUn],2)
	EndIf
EndIf


Return nValor


















Function CN140PrEnt(cContra,cRevisa,lRealMed,cCompet,cItem)
Local aAreaCN9 := CN9->(GetArea())
Local aAreaCND := CND->(GetArea())

Local cQuery:= ""
Local nQtdEnt := 0
Local cEspCtr := Posicione("CN1",1,xFilial("CN1")+CN9->CN9_TPCTO,"CN1_ESPCTR")

If lRealMed
	If cEspCtr == "1"
		cQuery += " SELECT SUM(SC7.C7_QUJE) AS QUANT     "
		cQuery += "   FROM "+ RetSQLName("SC7") +" SC7, "+ RetSQLName("CND") +" CND   "
		cQuery += "  WHERE CND.CND_FILIAL = '"+xFilial("CND")+"' "
		cQuery += "    AND SC7.C7_FILIAL  = '"+xFilial("SC7")+"' "
		cQuery += "    AND CND.CND_CONTRA = '"+cContra+"'"
		cQuery += "    AND CND.CND_REVISA = '"+cRevisa+"'"
		cQuery += "    AND CND.CND_COMPET = '"+cCompet+"'"
		cQuery += "    AND SC7.C7_MEDICAO = CND.CND_NUMMED"
		cQuery += "    AND SC7.C7_ITEM    = '"+cItem  +"' "
		cQuery += "    AND SC7.D_E_L_E_T_ = ' '"
	Else
		cQuery := " SELECT SUM(SC6.C6_QTDENT) AS QUANT "
		cQuery += "   FROM "+ RetSQLName("SC5") +" SC5, "+ RetSQLName("SC6") +" SC6, "+ RetSQLName("CND") +" CND   "
		cQuery += "  WHERE CND.CND_FILIAL = '"+xFilial("CND")+"' "
		cQuery += "    AND SC5.C5_FILIAL  = '"+xFilial("SC5")+"' "
		cQuery += "    AND SC6.C6_FILIAL  = '"+xFilial("SC6")+"' "
		cQuery += "    AND CND.CND_CONTRA = '"+cContra+"'"
		cQuery += "    AND CND.CND_REVISA = '"+cRevisa+"'"
		cQuery += "    AND CND.CND_COMPET = '"+cCompet+"'"
		cQuery += "    AND SC5.C5_MDNUMED = CND.CND_NUMMED "
		cQuery += "    AND SC5.C5_NUM     = SC6.C6_NUM "
		cQuery += "    AND SC6.C6_ITEMED  = '"+cItem  +"' "
		cQuery += "    AND SC5.D_E_L_E_T_ = ' ' "
		cQuery += "    AND SC6.D_E_L_E_T_ = ' ' "
	EndIf

	cQuery := ChangeQuery(cQuery)
	dbUseArea( .T. ,"TOPCONN",TcGenQry(,,cQuery),"TRBCND", .F. , .T. )
	While !TRBCND->(Eof())
		nQtdEnt += TRBCND->QUANT
		TRBCND->(dbSkip())
	EndDo
	TRBCND->(dbCloseArea())

EndIf

RestArea(aAreaCND)
RestArea(aAreaCN9)
Return nQtdEnt




















Function CN140MntCron(cContra,cRevisa,aPlan)
Local cQuery := ""
Local lRet   := .T. 
Local nX     := 0
Local aArea := GetArea()

dbSelectArea("TRBCNF")
If RecCount() > 0
	__dbZap()
Endif

For nX:= 1 To Len(aPlan)



	cQuery := "SELECT CNF.CNF_FILIAL, CNF.CNF_NUMERO, CNF.CNF_CONTRA, CNF.CNF_REVISA, "
	cQuery += "       Min(CNF.CNF_COMPET) as CNF_COMPET, Sum(CNF.CNF_SALDO) as CNF_SALDO "
	cQuery += "  FROM "+RetSqlName("CNF")+" CNF "
	cQuery += " WHERE CNF.CNF_FILIAL =  '"+xFilial("CNF")+"'"
	cQuery += "   AND CNF.CNF_CONTRA = '"+cContra+"'"
	cQuery += "   AND CNF.CNF_REVISA = '"+cRevisa+"'"
	cQuery += "   AND CNF.CNF_NUMERO = '"+aPlan[nX][4]+"'"
	cQuery += "   AND CNF.D_E_L_E_T_ = ' ' "
	cQuery += " GROUP BY CNF.CNF_FILIAL, CNF.CNF_NUMERO, CNF.CNF_CONTRA, CNF.CNF_REVISA"

	cQuery := ChangeQuery(cQuery)
	dbUseArea( .T. ,"TOPCONN",TcGenQry(,,cQuery),"TRB", .F. , .T. )


	TCSetField("TRB","CNF_SALDO" ,"N",TamSX3("CNF_SALDO")[1],TamSX3("CNF_SALDO")[2])

	dbSelectArea("TRB")
	dbGoTop()

	If !Eof()




		dbSelectArea("TRB")
		While !Eof()
			RecLock("TRBCNF", .T. )
				TRBCNF->CNF_NUMERO := TRB->CNF_NUMERO
				TRBCNF->CNF_CONTRA := TRB->CNF_CONTRA
				TRBCNF->CNF_REVISA := TRB->CNF_REVISA
				TRBCNF->CNF_COMPET := TRB->CNF_COMPET
				TRBCNF->CNF_SALDO  := TRB->CNF_SALDO
			MsUnlock()

			dbSelectArea("TRB")
			dbSkip()
		Enddo

		TRBCNF->(dbGoTop())
	Else
		Help("CNTA140",1,"CNTA140_03")
		lRet := .F. 
	Endif

	TRB->(dbCloseArea())
next

RestArea(aArea)

Return lRet

























Function CN140Fisico(nOpc,aCols,nAt,aColsParc,aHeadParc,aItVl,cCodTR)

Local oDlg
Local ogetFsc

Local nOpca      := 2

Local aCpo       := {"CNS_PRVQTD"}
Local aTotQtd    := {}
Local aCN110CPO  := {}
Local aAux       := {}
Local aItAux     := {}

Local nx         := 0
Local ny         := 0
Local nCount     := 0
Local nPosItm    := aScan(aHeadParc,{|x| AllTrim(x[2])=="CNS_ITEM"})
Local nPosQtd    := aScan(aHeadParc,{|x| AllTrim(x[2])=="CNS_PRVQTD"})
Local nPosSld    := aScan(aHeadParc,{|x| AllTrim(x[2])=="CNS_DISTSL"})
Local nPosRlz    := aScan(aHeadParc,{|x| AllTrim(x[2])=="CNS_RLZQTD"})
Local nPosItOr   := aScan(aHeadParc,{|x| AllTrim(x[2])=="CNS_ITOR"})
Local nPosSlz    := aScan(aHeadParc,{|x| AllTrim(x[2])=="CNS_SLDQTD"})
Local nPosVlPrv  := aScan(aHeader,{|x| AllTrim(x[2])=="CNF_VLPREV"})
Local nPosSaldo  := aScan(aHeader,{|x| AllTrim(x[2])=="CNF_SALDO"})
Local nPosVlRlz  := aScan(aHeader,{|x| AllTrim(x[2])=="CNF_VLREAL"})
Local nDifFsc    := 0
Local nTotParc   := 0
Local nTotalDec  := TamSx3("CNF_VLPREV")[2]
Local nTotUltima := 0
Local nDesc      := 0

Local cTpRev     := ""
Local cEspCtr    := ""

Local lDifFsc    := .T. 

cCodTR := If( cCodTR == nil, "", cCodTR ) ;
cTpRev     := Posicione("CN0",1,xFilial("CN0")+cCodTR,"CN0_TIPO")






















PRIVATE oTotFsc
PRIVATE nTotFsc:=0





If ExistBlock("CN110CPO")
	aCN110CPO := ExecBlock("CN110CPO", .F. , .F. ,{aCpo})
	If ( ValType(aCN110CPO) == "A" )
		aCpo := aCN110CPO
	EndIf
EndIf

If CN9->(CN9_FILIAL+CN9_NUMERO+CN9_REVISA) # xFilial("CN9")+cContra+cRevAtu
	CN9->(dbSetOrder(1))
	CN9->(dbSeek(xFilial("CN9")+cContra+cRevAtu))
EndIf
If CN9->(FieldPos("CN9_ESPCTR")) > 0
	cEspCtr := CN9->CN9_ESPCTR
ElseIf !Empty(CN9->CN9_CLIENT)
	cEspCtr := "2"
Else
	cEspCtr := "1"
EndIf




For nx:=1 to len(aColsParc[nat])
	If cEspCtr == "2"
		nDesc := cn140Desc(aItVl[nx,1],aItVl[nx,7],aColsParc[nat,nx,nPosQtd])
	Else
		nDesc := a410Arred((((aColsParc[nat,nx,nPosQtd]*aItVl[nx,1])*aItVl[nx,7])/100),"CNB_VLDESC")
	EndIf
	aColsParc[nat,nx,nPosSld] := aItVl[nx,3]
	nTotFsc += (aColsParc[nat,nx,nPosQtd]*aItVl[nx,1])-nDesc
	aAdd(aTotQtd, 0)
Next

nTotFsc := Round(nTotFsc,nTotalDec)



If (nAt == Len(aCols))



	nTotParc := 0
	For nx := 1 to Len(aColsParc)
		For ny := 1 to Len(aColsParc[nx])
			If cEspCtr == "2"
				nDesc := cn140Desc(aItVl[ny,1],aItVl[ny,7],aColsParc[nx,ny,nPosQtd])
			Else
				nDesc := a410Arred((((aColsParc[nX,nY,nPosQtd]*aItVl[ny,1])*aItVl[ny,7])/100),"CNB_VLDESC")
			EndIf

			nTotParc += Round((aColsParc[nx,ny,nPosQtd]*aItVl[ny,1])-nDesc,nTotalDec)
			aTotQtd[ny] += aColsParc[nx,ny,nPosQtd]
		next
	next

	For nx := 1 to Len(aItVl)





		If (aItVl[nx,3]+aItVl[nx,2]) <> aTotQtd[nx]
			lDifFsc := .F. 
			Exit
		EndIf
	next

	If lDifFsc
		nDifFsc := nTotPlan - nTotParc
		nTotFsc += nDifFsc
	EndIf
EndIf





If CNS->(FieldPos("CNS_ITOR")) > 0
	nX:=1
	While nx <= Len(aColsParc)
		nY   := 1
		nCount:= 1
		While ny <= Len(aColsParc[nx])
			If !Empty(aColsParc[nx,ny,nPosItOr])
				aAdd(aAux,{})
				aAdd(aAux[nX],Array(len(aHeadParc)+1))
	 			aAux[nx,nCount] = aClone(aColsParc[nx,ny])

			    aDel(aColsParc[nX],nY)
			    aSize(aColsParc[nX],len(aColsParc[nX])-1)
			    nCount++
			    ny--
			EndIf
			ny++
		Enddo
		nX++
	Enddo

	If Len(aAux)>0
		nX:=1
		While nx<= len(aAux[nat])
  		  	If !Empty(aAux[nat,nx,nPosItOr])
				Aadd(aItAux,{})
				aItAux[nx] = aClone(aItVl[nx])

			    aDel(aItVl,nx)
			    aSize(aItVl,len(aItVl)-1)
			EndIf
			nX++
		EndDo
	EndIf

EndIf




oDlg = MsDialog():New( 009, 000, 025, 060, OemToAnsi(If(cPaisLoc$"ANG|PTG","Cronograma Físico","Cronograma Fisico")),,,.F.,,,,, oMainWnd,.F.,, ,.F. )

 oGroup := TGroup():New( 002, 110, 020, 145, OemToAnsi("Parcela"), oDlg,,,.T., )
 oParc := TSay():New( 008, 130,{||  aCols[nat,1]},oDlg,PesqPict("CNF","CNF_PARCEL"),,.F.,.F.,.F.,.T.,,, 040, 050,.F.,.F.,.F.,.F.,.F.,.F. )

 oGroup := TGroup():New( 002, 150, 020, 232, OemToAnsi("Total"), oDlg,,,.T., )
 oTotFsc := TSay():New( 008, 190,{||  nTotFsc},oDlg,PesqPict("CNF","CNF_VLPREV"),,.F.,.F.,.F.,.T.,,, 110, 008,.F.,.F.,.F.,.F.,.F.,.F. )

ogetFsc := MsNewGetDados():New(022,005,100,232,IIF(nOpc==2 .OR.  nOpc==5,0,2),,,,aCpo,,,,,,oDlg,aHeadParc,aColsParc[nat])

 SButton():New( 105, 173,1,{||  (nOpca:=1,oDlg:End())}, oDlg,.T.,,)
 SButton():New( 105, 203,2,{||  (nOpca:=2,oDlg:End())}, oDlg,.T.,,)

oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted,.T.,,,, oDlg:bRClicked, )

If nOpca == 1



	If CNS->(FieldPos("CNS_ITOR")) > 0
		If Len(aAux)>0
			For nx:=1 to len(aAux)
				For ny:=1 to len(aAux[nX])
					aadd(aColsParc[nX],aaux[nx,nY])
		   		    aSort(aColsParc[nX],,,{|x,y| x[nPosItm] < y[nPosItm]})
				Next
			Next

			For nx:=1 to len(aAux[nat])
				aadd(ogetFsc:aCols,aaux[nat,nX])
				aSort(ogetFsc:aCols,,,{|x,y| x[nPosItm] < y[nPosItm]})
			Next

	        For nx:=1 to len(aItAux)
				aadd(aItVl,aItAux[nX])
				aSort(aItVl,,,{|x,y| x[4] < y[4]})
			Next
		EndIf

	EndIf




	aTotQtd  := {}
	nTotParc := 0
	For nx:=1 to len(ogetFsc:aCols)
		If cEspCtr == "2"
			nDesc := cn140Desc(aItVl[nx,1],aItVl[nx,7],oGetFsc:aCols[nx,nPosQtd])
		Else
			nDesc := a410Arred(((oGetFsc:aCols[nx,nPosQtd]*aItVl[nx,1]) * aItVl[nx,7] )/100,"CNB_VLDESC")
		EndIf

		aItVl[nx,3]          := ogetFsc:aCols[nx,nPosSld]
  		nTotParc             +=(oGetFsc:aCols[nx,nPosQtd]*aItVl[nx,1])-nDesc
		aAdd(aTotQtd, oGetFsc:aCols[nx,nPosQtd])

		If cTpRev=="3"
			If  aItVl[nx,1]==0
				nTotParc    += Round((oGetFsc:aCols[nx,nPosRlz]*aItVl[nx,5])-nDesc,nTotalDec)
			EndIf

			If Empty(aItAux) .And.  oGetFsc:aCols[nx,nPosRlz]>0 .And.  aItVl[nx,1]>0
				nTotParc      -= Round((oGetFsc:aCols[nx,nPosQtd]*aItVl[nx,1])-nDesc,nTotalDec)
				nTotParc      += Round((oGetFsc:aCols[nx,nPosSlz]*aItVl[nx,1])-nDesc,nTotalDec)
				nTotParc      += Round((oGetFsc:aCols[nx,nPosRlz]*aItVl[nx,5])-nDesc,nTotalDec)
			EndIf
			If oGetFsc:aCols[nx,nPosRlz]==0 .And.  aItVl[nx,1]==0
		   		nTotParc      += Round((oGetFsc:aCols[nx,nPosQtd]*aItVl[nx,5])-nDesc,nTotalDec)
			EndIf
		EndIf
	Next
	nTotParc := Round(nTotParc,nTotalDec)




	If nTotParc > 0
		aCols[nat,nPosVlPrv] := nTotParc
		aCols[nat,nPosSaldo] := 0
	EndIf




	nTotParc   := aCols[nat,nPosVlPrv]
	nTotUltima := 0
	For nx := 1 to Len(aColsParc)
		For ny := 1 to Len(aColsParc[nx])
			If cEspCtr == "2"
				nDesc := cn140Desc(aItVl[nY,1],aItVl[nY,7],oGetFsc:aCols[ny,nPosQtd])
			Else
				nDesc :=a410Arred((((oGetFsc:aCols[ny,nPosQtd]*aItVl[nY,1])*aItVl[nY,7])/100),"CNB_VLDESC")
			EndIf


			nTotParc    +=(oGetFsc:aCols[ny,nPosQtd]*aItVl[ny,1])-nDesc
			aTotQtd[ny] += oGetFsc:aCols[ny,nPosQtd]


			If nx == Len(aColsParc)
				nTotUltima +=(oGetFsc:aCols[ny,nPosQtd]*aItVl[ny,1])-nDesc
			EndIf
		next
		nTotParc :=  Round(nTotParc,nTotalDec)
	next
	nTotUltima :=  Round(nTotUltima,nTotalDec)

	lDifFsc  := .T. 
	For nx := 1 to Len(aItVl)





		If aItVl[nx,2] <> aTotQtd[nx]
			lDifFsc := .F. 
			Exit
		EndIf
	next

	If lDifFsc
		nDifFsc := nTotPlan - nTotParc
		If nAt <> Len(aCols) .And.  nDifFsc > 0
			aCols[Len(aCols),nPosVlPrv] := nTotUltima + nDifFsc
			aCols[Len(aCols),nPosSaldo] := aCols[Len(aCols),3]
		Else
			aCols[nAt,3] += nDifFsc
		EndIf
	EndIf




	aColsParc[nat] := ogetFsc:aCols




	If ExistBlock("CN110CRF")
		aCN110CRF := ExecBlock("CN110CRF", .F. , .F. ,{aHeader,aCols,aHeadParc,aColsParc})
		If Valtype(aCN110CRF) == "A"
			If Len(aCN110CRF)>=1 .And.  Valtype(aCN110CRF[1]) == "A"
				aHeader   := aClone(aCN110CRF[1])
			EndIf
			If Len(aCN110CRF)>=2 .And.  Valtype(aCN110CRF[2]) == "A"
				aCols     := aClone(aCN110CRF[2])
			EndIf
			If Len(aCN110CRF)>=3 .And.  Valtype(aCN110CRF[3]) == "A"
				aHeadParc := aClone(aCN110CRF[3])
			EndIf
			If Len(aCN110CRF)>=4 .And.  Valtype(aCN110CRF[4]) == "A"
				aColsParc := aClone(aCN110CRF[4])
			EndIf
		EndIf
	EndIf
Else



	If CNS->(FieldPos("CNS_ITOR")) > 0
		If Len(aAux)>0
			For nx:=1 to len(aAux)
				For ny:=1 to len(aAux[nX])
					aadd(aColsParc[nX],aaux[nx,nY])
		   		    aSort(aColsParc[nX],,,{|x,y| x[nPosItm] < y[nPosItm]})
				Next
			Next

			For nx:=1 to len(aAux[nat])
				aadd(ogetFsc:aCols,aaux[nat,nX])
				aSort(ogetFsc:aCols,,,{|x,y| x[nPosItm] < y[nPosItm]})
			Next

	        For nx:=1 to len(aItAux)
				aadd(aItVl,aItAux[nX])
				aSort(aItVl,,,{|x,y| x[4] < y[4]})
			Next
		EndIf
    EndIf
EndIf

Return




















Function cn140Desc(nPrUnit,nDesc,nQuant)
Local nPreco := 0
Local nTotal := 0
Local nVDesc := 0
Local nTotItm:= 0

nDesc  := a410Arred(nDesc/nQuant,"CNB_VLUNIT")
nPreco := A410Arred(nPrUnit-nDesc,"CNB_VLUNIT")

nTotal := A410Arred(nPreco* nQuant,"CNB_VLTOT")
nTotItm:= A410Arred(nPrUnit* nQuant,"CNB_VLTOT")

nVDesc := A410Arred(nTotItm-nTotal,"CNB_VLDESC")
Return nVDesc



























Function CN140DstCron(aParcelas,aHeaderCNF,aColsParc,aHeadParc,lFisico,nTotParc,aFscVl,aTotCont,aAditPlan,aArtFsc,nTotMed,nParc)
Local nX        := 0
Local nY        := 0
Local nNovParc  := 0
Local nQtdAdtv  := 0
Local nTotProv  := 0
Local nQtdDist  := 0
Local nAcumParc := 0

Local nPosQtd   := {}
Local nPosSld   := {}
Local nPosRlz   := {}
Local nPosItO   := {}
Local nPosTQt   := {}
Local nPosPrev := aScan(aHeaderCNF,{|x| AllTrim(x[2]) == "CNF_VLPREV"})
Local nPosReal := aScan(aHeaderCNF,{|x| AllTrim(x[2]) == "CNF_VLREAL"})
Local nPosSald := aScan(aHeaderCNF,{|x| AllTrim(x[2]) == "CNF_SALDO"})
Local nPosDtRe := aScan(aHeaderCNF,{|x| AllTrim(x[2]) == "CNF_DTREAL"})

Local nTotnMed  := aTotCont[5]+nParc
Local nSaldoCro := aTotCont[2]
Local nParnMed  := aTotCont[5]
Local nSldDist  := 0

Local aArtAdt   := {}
Local aQtdMed   := {}
Local aArtDist  := {}





If lFisico
	nPosQtd := aScan(aHeadParc,{|x| x[2]=="CNS_PRVQTD"})
	nPosSld := aScan(aHeadParc,{|x| x[2]=="CNS_SLDQTD"})
	nPosRlz := aScan(aHeadParc,{|x| x[2]=="CNS_RLZQTD"})
	nPosItO := aScan(aHeadParc,{|x| x[2]=="CNS_ITOR"})
	nPosTQt := aScan(aHeadParc,{|x| x[2]=="CNS_TOTQTD"})

	aQtdMed := Array(len(aColsParc[len(aColsParc)]))
	aArtDist:= Array(len(aColsParc[len(aColsParc)]))
	aArtAdt := Array(len(aColsParc[len(aColsParc)]))
EndIf

nNovParc := nSaldoCro / nTotnMed

For nX := 1 to len(aParcelas)
	If lFisico
		For nY:=1 to len(aColsParc[nX])
			If aColsParc[nX,nY,nPosItO] == NIL
				aColsParc[nX,nY,nPosItO] := ""
			EndIf
		Next
	EndIf

	if !Empty(aParcelas[nx,nPosDtRe])



		if !lFisico
			aParcelas[nX,nPosPrev] -= aParcelas[nX,nPosSald]
			nTotMed		            -= Round(aParcelas[nX,nPosSald],TamSX3("CNF_VLPREV")[2])
			aParcelas[nX,nPosSald] := 0
		Else
			aParcelas[nX,nPosPrev] -= aParcelas[nX,nPosSald]
			nTotMed		            -= Round(aParcelas[nX,nPosSald],TamSX3("CNF_VLPREV")[2])
			aParcelas[nX,nPosSald] := 0



			For nY:=1 to len(aColsParc[nX])
				If aArtFsc[nY] == Nil
					aArtFsc[nY] := 0
				EndIf

				If aQtdMed[nY] == Nil
					aQtdMed[nY] := 0
				EndIf

				If aColsParc[nX,nY,nPosSld]>0 .And.  aColsParc[nX,nY,nPosRlz]==0
					aArtFsc[nY] += aColsParc[nX,nY,nPosSld]
				EndIf

				aColsParc[nX,nY,nPosQtd] := 	aColsParc[nX,nY,nPosRlz]
				aColsParc[nX,nY,nPosSld] := aColsParc[nX,nY,nPosQtd] - aColsParc[nX,nY,nPosRlz]
				aArtFsc[nY] += aColsParc[nX,nY,nPosSld]
				If CNS->(FieldPos("CNS_ITOR"))>0
					If Empty(aColsParc[nX,nY,nPosItO])
						aColsParc[nX,nY,nPosSld] := 0
					EndIf
				Else
					aColsParc[nX,nY,nPosQtd] := 0
					aColsParc[nX,nY,nPosSld] := 0
				EndIf

				aQtdMed[nY] += aColsParc[nX,nY,nPosRlz]
			Next

			nTotMed		            += Round(nTotParc,TamSX3("CNF_VLPREV")[2])
			nTotParc := 0
		EndIf
	Else



		aParcelas[nX,nPosSald] := nNovParc
		aParcelas[nX,nPosPrev] := nNovParc
		nTotMed		           += Round(aParcelas[nX,nPosPrev],TamSX3("CNF_VLPREV")[2])
		if lFisico
			For nY:=1 to len(aColsParc[nX])




				If aArtAdt[nY] == NIL
					aArtAdt[nY] := 0
				EndIf

				If aArtFsc[nY] == Nil
					aArtFsc[nY] := 0
				EndIf

				If aArtDist[nY] == NIL
					aArtDist[nY] := aFscVl[nY,3]
				EndIf

				If aQtdMed[nY] == Nil
					aQtdMed[nY] := 0
				EndIf

				If nPosItO > 0
					If Empty(aColsParc[nX,nY,nPosItO])
				  		aArtAdt[nY] := aFscVl[nY,3]
				  		nQtdAdtv    := ((aColsParc[nX,nY,nPosTQt]+aArtAdt[nY])-aQtdMed[nY])
				  		nQtdAdtv    := Round(nQtdAdtv/nTotnMed,TamSX3("CNS_PRVQTD")[2])

						aColsParc[nX,nY,nPosSld] := nQtdAdtv
						aColsParc[nX,nY,nPosQtd] := nQtdAdtv
					Else
						aFscVl[nY,3] := 0
					EndIf
				Else
					nQtdDist := Round(aArtDist[nY]/nTotnMed,TamSX3("CNS_PRVQTD")[2])
					aArtFsc[nY]              -= nQtdDist
					aColsParc[nX,nY,nPosSld] += nQtdDist
					aColsParc[nX,nY,nPosQtd] += nQtdDist
				EndIf
			Next




			If !Empty(aAditPlan)
				nSldDist := Round(aAditPlan[2]/nTotnMed,TamSX3("CNF_VLPREV")[2])
			EndIf

			aParcelas[nX,nPosSald] += Round(nSldDist,TamSX3("CNF_VLPREV")[2])
			aParcelas[nX,nPosPrev] += Round(nSldDist,TamSX3("CNF_VLPREV")[2])
			aTotCont[1]            += Round(nSldDist,TamSX3("CNF_VLPREV")[2])
			nTotMed                += Round(nSldDist,TamSX3("CNF_VLPREV")[2])




			For nY:=1 to len(aColsParc[nX])
  				nAcumParc += Round((aColsParc[nx,ny,nPosQtd]*aItVl[ny,1])-(((aColsParc[nX,nY,nPosQtd]*aFscVl[ny,1])*aFscVl[ny,7])/100),TamSX3("CNS_PRVQTD")[2])
	 		next


			If Round(aParcelas[nX,nPosSald],TamSX3("CNF_VLPREV")[2]) <> Round(nAcumParc,TamSX3("CNF_VLPREV")[2])
				aColsParc[nX,len(aColsParc[nX]),nPosSld] := Round(((aColsParc[nX,len(aColsParc[nX]),nPosSld] * aFscVl[len(aColsParc[nX]),1] )+aParcelas[nX,nPosSald]-nAcumParc)/aFscVl[len(aColsParc[nX]),1] ,TamSX3("CNS_PRVQTD")[2])
				aColsParc[nX,len(aColsParc[nX]),nPosQtd] := Round(((aColsParc[nX,len(aColsParc[nX]),nPosQtd] * aFscVl[len(aColsParc[nX]),1] )+aParcelas[nX,nPosSald]-nAcumParc)/aFscVl[len(aColsParc[nX]),1] ,TamSX3("CNS_PRVQTD")[2])
			EndIf

			nAcumParc := 0
		EndIf

	EndIf
Next




If lFisico
	For nY:= 1 To len(aFscVl)
		aFscVl[nY,3] := 0
	Next
EndIf

If (aTotCont[1] - nTotMed) == 0.01
	aTotCont[1]-= 0.01
EndIf

If (aTotCont[1] - nTotMed) == -0.01
	aTotCont[1]+= 0.01
EndIf

Return





















Function CN140ProRev(cContra,cRevisa,cCodTR,cTpRev)
Local cContraTR := ""
Local cNRevisa  := ""
Local lRet      := .T. 

dbSelectArea("CN9")
dbSetOrder(1)
dbSeek(xFilial("CN9")+cContra+cRevisa)
cNRevisa  := CN9->CN9_REVATU

dbSelectArea("CN9")
dbSetOrder(1)
dbSeek(xFilial("CN9")+cContra+cNRevisa)
cContraTR := CN9->CN9_TIPREV

If cCodTR <> cContraTR
	Aviso("CNTA140",If( cPaisLoc $ "ANG|PTG", "Opção PROSSEGUIR somente é permitido para o Cód.Tp.Revisão    ", "Opcao PROSSEGUIR somente é permitido para o Cod Tp Revisão    " ) + cContraTR,{"OK"})
	lRet := .F. 
EndIf

dbSelectArea("CN0")
dbSetOrder(1)
dbSeek(xFilial("CN0")+cCodTR)




cTpRev  := CN0->CN0_TIPO

If lRet .And.  cTpRev == "2"
	lRet := .F. 
	Aviso("CNTA140",If( cPaisLoc $ "ANG|PTG", "Opção PROSSEGUIR não é permitida para Revisões do tipo Reajuste", "Opcao PROSSEGUIR não é permitida para Revisões do tipo Reajuste" ),{"OK"})
EndIF

Return lRet
















Static Function CN140Indice(cAcao,cIndAtu,cIndNovo,cRevisa,cNRevisa)
Local lRet := .T. 
If	cAcao=="1"
	If	cIndNovo==cIndAtu
		Help("",1,"CNTA140_21",,cIndAtu,4,1)
		lRet := .F. 
	EndIf

ElseIf cAcao=="2"
	If	cIndNovo==cIndAtu
		Help("",1,"CNTA140_21",,cIndAtu,4,1)
		lRet := .F. 
	EndIf
	lRet := NaoVazio(cIndNovo)
	oWizard:NPanel := 15

ElseIf cAcao=="3"
	cIndNovo  := Space(Len(CN9->CN9_INDICE))

	oWizard:NPanel := 4
EndIf
Return(lRet)



















Function CN140Forne(cAcao,cRevisa,aPlan,cFornec,cLoja)
Local aAlter   := {}
Local n1Cnt	   := 0
Local lRet 	   := .T. 
Local lDelCNC  := .F. 
Local nPosPlan := 0
Local nPosFAtu := 0
Local nPosLAtu := 0
Local nPosFNov := 0
Local nPosLNov := 0
Local nPosCNov := 0
Local nPosLCNov:= 0
Local nPosCAtu := 0
Local nPosCLAtu:= 0
Local cEspCtr  := ""
cFornec := If( cFornec == nil, "", cFornec ) ;
cLoja := If( cLoja == nil, "", cLoja ) ;

If	Type("aHdFor")=="A"
	nPosPlan := GDFieldPos("CPLANIL",aHdFor)
	nPosFAtu := GDFieldPos("CFORATU",aHdFor)
	nPosLAtu := GDFieldPos("CLOJATU",aHdFor)
	nPosFNov := GDFieldPos("CFORNOV",aHdFor)
	nPosLNov := GDFieldPos("CLOJNOV",aHdFor)
	nPosCAtu := GDFieldPos("CCLIATU",aHdFor)
	nPosCLAtu:= GDFieldPos("CCLJATU",aHdFor)
	nPosCNov := GDFieldPos("CCLINOV",aHdFor)
	nPosLCNov:= GdFieldPos("CCLJNOV",aHdFor)
EndIf

If CN9->(FieldPos("CN9_ESPCTR")) > 0
	cEspCtr := CN9->CN9_ESPCTR
ElseIf !Empty(CN9->CN9_CLIENT)
	cEspCtr := "2"
Else
	cEspCtr := "1"
EndIf


If cAcao == "1"


	If Empty(aHdFor)
		If cEspCtr == "1"
			aAlter   := {"CFORNOV","CLOJNOV"}
			SX3->(dbSetOrder(2))
			If aPlan # NIL
				SX3->(dbSeek("CNA_NUMERO"))
				aAdd(aHdFor,{AllTrim(X3Titulo()),"CPLANIL","@!",SX3->X3_TAMANHO,SX3->X3_DECIMAL,".T.",,"C","",,,})
			EndIf
			SX3->(dbSeek("CNA_FORNEC"))
			aAdd(aHdFor,{AllTrim(X3Titulo()),"CFORATU","@!",SX3->X3_TAMANHO,SX3->X3_DECIMAL,".T.",,"C","",,,})
			SX3->(dbSeek("CNA_LJFORN"))
			aAdd(aHdFor,{AllTrim(X3Titulo()),"CLOJATU","@!",SX3->X3_TAMANHO,SX3->X3_DECIMAL,".T.",,"C","",,,})

			aAdd(aHdFor,{STR0146,"CFORNOV","@!",TamSX3("CNA_FORNEC")[1],TamSX3("CNA_FORNEC")[2],".T.",,"C","SA2A",,,})
			aAdd(aHdFor,{STR0147,"CLOJNOV","@!",TamSX3("CNA_LJFORN")[1],TamSX3("CNA_LJFORN")[2],".T.",,"C","",,,})
		Else
			aAlter   := {"CCLINOV","CCLJNOV"}
			SX3->(dbSetOrder(2))
			If aPlan # NIL
				SX3->(dbSeek("CNA_NUMERO"))
				aAdd(aHdFor,{AllTrim(X3Titulo()),"CPLANIL","@!",SX3->X3_TAMANHO,SX3->X3_DECIMAL,".T.",,"C","",,,})
			EndIf
			SX3->(dbSeek("CNA_CLIENT"))
			aAdd(aHdFor,{AllTrim(X3Titulo()),"CCLIATU","@!",SX3->X3_TAMANHO,SX3->X3_DECIMAL,".T.",,"C","",,,})
			SX3->(dbSeek("CNA_LOJACL"))
			aAdd(aHdFor,{AllTrim(X3Titulo()),"CCLJATU","@!",SX3->X3_TAMANHO,SX3->X3_DECIMAL,".T.",,"C","",,,})

			aAdd(aHdFor,{STR0156,"CCLINOV","@!",TamSX3("CNA_CLIENT")[1],TamSX3("CNA_CLIENT")[2],".T.",,"C","SA1",,,})
			aAdd(aHdFor,{STR0157,"CCLJNOV","@!",TamSX3("CNA_LOJACL")[1],TamSX3("CNA_LOJACL")[2],".T.",,"C","",,,})
		EndIf
	Endif


	If aPlan # NIL
		aItFor := {}
		CNA->(dbSetOrder(1))
		For n1Cnt := 1 To Len(aPlan)
			If CNA->(dbSeek(xFilial("CNA")+cContra+cRevisa+aPlan[n1Cnt,1])) .And.  cEspCtr == "1"
	 			aAdd(aItFor,Array(Len(aHdFor)+1))
	 			aTail(aItFor)[1] := aPlan[n1Cnt,1]
	 			aTail(aItFor)[2] := CNA->CNA_FORNEC
	 			aTail(aItFor)[3] := CNA->CNA_LJFORN
	 			aTail(aItFor)[4] := Space(Len(CNC->CNC_CODIGO))
	 			aTail(aItFor)[5] := Space(Len(CNC->CNC_LOJA))
				aTail(aItFor)[Len(aHdFor)+1] := .F. 
			Else
				CNC->(dbSetOrder(3))
				CNC->(dbSeek(xFilial("CNC")+cContra+cRevisa+CNA->CNA_CLIENT+CNA->CNA_LOJACL))
	 			aAdd(aItFor,Array(Len(aHdFor)+1))
	 			aTail(aItFor)[1] := aPlan[n1Cnt,1]
	 			aTail(aItFor)[2] := CNC->CNC_CLIENT
	 			aTail(aItFor)[3] := CNC->CNC_LOJACL
	 			aTail(aItFor)[4] := Space(Len(CNC->CNC_CLIENT))
	 			aTail(aItFor)[5] := Space(Len(CNC->CNC_LOJACL))
				aTail(aItFor)[Len(aHdFor)+1] := .F. 
			EndIf
		next
	Else
		CNC->(dbSetOrder(1))
		CNC->(dbSeek(xFilial("CNC")+cContra+cRevisa))
		While !CNC->(EOF()) .And.  CNC->(CNC_FILIAL+CNC_NUMERO+CNC_REVISA) == xFilial("CNC")+cContra+cRevisa
			If cEspCtr == "1"
				aAdd(aItFor,Array(Len(aHdFor)+1))
	 			aTail(aItFor)[1] := CNC->CNC_CODIGO
	 			aTail(aItFor)[2] := CNC->CNC_LOJA
	 			aTail(aItFor)[3] := Space(Len(CNC->CNC_CODIGO))
	 			aTail(aItFor)[4] := Space(Len(CNC->CNC_LOJA))
				aTail(aItFor)[Len(aHdFor)+1] := .F. 
			Else
				aAdd(aItFor,Array(Len(aHdFor)+1))
	 			aTail(aItFor)[1] := CNC->CNC_CLIENT
	 			aTail(aItFor)[2] := CNC->CNC_LOJACL
	 			aTail(aItFor)[3] := Space(Len(CNC->CNC_CLIENT))
	 			aTail(aItFor)[4] := Space(Len(CNC->CNC_LOJACL))
				aTail(aItFor)[Len(aHdFor)+1] := .F. 
			Endif
			CNC->(dbSkip())
		End
	EndIf


	If ExistBlock("CN140CNC")
		aRetPE := ExecBlock("CN140CNC", .F. , .F. ,{1,aHdFor,aItFor,,aAlter})
		If ValType(aRetPE) == "A"
			If Len(aRetPE) > 0 .And.  ValType(aRetPE[1]) == "A"
				aHdFor := aClone(aRetPE[1])
			EndIf
			If Len(aRetPE) > 1 .And.  ValType(aRetPE[2]) == "A"
				aItFor := aClone(aRetPE[2])
			EndIf
			If Len(aRetPE) > 2 .And.  ValType(aRetPE[3]) == "A"
				aAlter := aClone(aRetPE[3])
			EndIf
		EndIf
	EndIf

	oGetDad1 := MsNewGetDados():New(025,000, __DlgHeight(oWizard:oMPanel[15]), __DlgWidth(oWizard:oMPanel[15]),2+1+4,"CN140Forne('2')",,,,,999,,,"Empty(oGetDad1:aCols[n,1])",oWizard:oMPanel[15],aHdFor,aItFor)
	oGetDad1:oBrowse:aAlter := aAlter


	oGetDad1:aCols := aClone(aItFor)
	oGetDad1:oBrowse:nAt := 1
	oGetDad1:oBrowse:Refresh()

	oWizard:NPanel := 14



ElseIf cAcao == "2"
    If cEspCtr == "1"
		If !Empty(oGetDad1:aCols[oGetDad1:nAT,nPosFNov]+oGetDad1:aCols[oGetDad1:nAT,nPosLNov])
			lRet := ExistCpo("SA2",oGetDad1:aCols[oGetDad1:nAT,nPosFNov]+oGetDad1:aCols[oGetDad1:nAT,nPosLNov])
		EndIf

		If lRet .And.  If(Empty(nPosPlan), .T. ,!Empty(oGetDad1:aCols[oGetDad1:nAT,nPosPlan]))
			If oGetDad1:aCols[oGetDad1:nAT,nPosFAtu]+oGetDad1:aCols[oGetDad1:nAT,nPosLAtu] == oGetDad1:aCols[oGetDad1:nAT,nPosFNov]+oGetDad1:aCols[oGetDad1:nAT,nPosLNov]
				Help("",1,"CNTA140_22",,oGetDad1:aCols[oGetDad1:nAT,nPosFNov]+"/"+oGetDad1:aCols[oGetDad1:nAT,nPosLNov],4,1)
				lRet := .F. 
			EndIf
		EndIf
	Else
		If !Empty(oGetDad1:aCols[oGetDad1:nAT,nPosCNov]+oGetDad1:aCols[oGetDad1:nAT,nPosLCNov])
			lRet := ExistCpo("SA1",oGetDad1:aCols[oGetDad1:nAT,nPosCNov]+oGetDad1:aCols[oGetDad1:nAT,nPosLCNov])
		EndIf

		If lRet .And.  If(Empty(nPosPlan), .T. ,!Empty(oGetDad1:aCols[oGetDad1:nAT,nPosPlan]))
			If oGetDad1:aCols[oGetDad1:nAT,nPosCAtu]+oGetDad1:aCols[oGetDad1:nAT,nPosCLAtu] == oGetDad1:aCols[oGetDad1:nAT,nPosCNov]+oGetDad1:aCols[oGetDad1:nAT,nPosLCNov]
				Help("",1,"CNTA140_22",,oGetDad1:aCols[oGetDad1:nAT,nPosCNov]+"/"+oGetDad1:aCols[oGetDad1:nAT,nPosLCNov],4,1)
				lRet := .F. 
			EndIf
		EndIf
	EndIf


ElseIf cAcao == "3"

	oWizard:NPanel := 15


ElseIf cAcao == "4"

	If Aviso("Atenção","As alterações serão perdidas, deseja realmente voltar?",{"Não","Sim"})==2
		oGetDad1:aCols := {}
		aItFor := {}
		If Empty(nPosPlan)
			oWizard:NPanel := 4
		Else
			oWizard:NPanel := 9
		EndIf
	Else
		lRet := .F. 
	EndIf


ElseIf cAcao=="5"

	CNA->(dbSetOrder(1))

	For n1Cnt := 1 To Len(aItFor)

		If	!Empty(cFornec) .And.  cEspCtr == "1"
			aItFor[n1Cnt,nPosFNov]:=cFornec
			aItFor[n1Cnt,nPosLNov]:=cLoja
		ElseIf !Empty(cFornec) .And.  cEspCtr == "2"
			aItFor[n1Cnt,nPosCNov+2]:=cFornec
			aItFor[n1Cnt,nPosLCNov+2]:=cLoja
		EndIf

		If cEspCtr == "1"
			CNC->(dbSetOrder(1))
			If !aTail(aItFor[n1Cnt]) .And.  !Empty(aItFor[n1Cnt,nPosFNov]) .And.  !Empty(aItFor[n1Cnt,nPosLNov])

				If !CNC->(dbSeek(xFilial("CNC")+cContra+cRevisa+aItFor[n1Cnt,nPosFNov]+aItFor[n1Cnt,nPosLNov]))
					RecLock("CNC", .T. )
						CNC->CNC_FILIAL	:= xFilial("CNC")
						CNC->CNC_NUMERO	:= cContra
						CNC->CNC_REVISA	:= cRevisa
						CNC->CNC_CODIGO	:= aItFor[n1Cnt,nPosFNov]
						CNC->CNC_LOJA	:= aItFor[n1Cnt,nPosLNov]
					CNC->(MsUnLock())
				EndIf
			Endif
		Else
			CNC->(dbSetOrder(3))
			If !aTail(aItFor[n1Cnt]) .And.  !Empty(aItFor[n1Cnt,nPosCNov]) .And.  !Empty(aItFor[n1Cnt,nPosLCNov])

				If !CNC->(dbSeek(xFilial("CNC")+cContra+cRevisa+aItFor[n1Cnt,nPosCNov]+aItFor[n1Cnt,nPosLCNov]))
					RecLock("CNC", .T. )
						CNC->CNC_FILIAL	:= xFilial("CNC")
						CNC->CNC_NUMERO	:= cContra
						CNC->CNC_REVISA	:= cRevisa
						CNC->CNC_CLIENT	:= aItFor[n1Cnt,nPosCNov]
						CNC->CNC_LOJACL	:= aItFor[n1Cnt,nPosLCNov]
					CNC->(MsUnLock())
				EndIf
			Endif
		Endif

		If cEspCtr == "1"
			If (!Empty(nPosPlan) .Or.  !Empty(cFornec)) .And.  CNA->(dbSeek(xFilial("CNA")+cContra+cRevisa+Iif(nPosPlan>0,aItFor[n1Cnt,nPosPlan],"")))
				RecLock("CNA", .F. )
					CNA->CNA_FORNEC := aItFor[n1Cnt,nPosFNov]
					CNA->CNA_LJFORN := aItFor[n1Cnt,nPosLNov]
					CNA->(MsUnLock())
			EndIf
		Else
			If (!Empty(nPosPlan) .Or.  !Empty(cFornec)) .And.  CNA->(dbSeek(xFilial("CNA")+cContra+cRevisa+Iif(nPosPlan>0,aItFor[n1Cnt,nPosPlan],"")))
				RecLock("CNA", .F. )
					CNA->CNA_CLIENT := aItFor[n1Cnt,nPosCNov]
					CNA->CNA_LOJACL := aItFor[n1Cnt,nPosLCNov]
				CNA->(MsUnLock())
			EndIf
		EndIf

		If ExistBlock("CN140CNC")
			ExecBlock("CN140CNC", .F. , .F. ,{2,aHdFor,aItFor,n1Cnt})
		EndIf
	next


	CNC->(dbSeek(xFilial("CNC")+cContra+cRevisa))
	While !CNC->(EOF()) .And.  CNC->(CNC_FILIAL+CNC_NUMERO+CNC_REVISA) == xFilial("CNC")+cContra+cRevisa
		If cEspCtr == "1"


			If aScan(aItFor,{|x| x[nPosFAtu]+x[nPosLAtu] == CNC->(CNC_CODIGO+CNC_LOJA) .And.  !Empty(x[nPosFNov]) .And.  !Empty(x[nPosLNov])}) == 0
				CNC->(dbSkip())
				Loop
			EndIf
		Else


			If aScan(aItFor,{|x| x[nPosCNov]+x[nPosLCNov] == CNC->(CNC_CLIENT+CNC_LOJACL) .And.  !Empty(x[nPosCNov]) .And.  !Empty(x[nPosLCNov])}) == 0
				CNC->(dbSkip())
				Loop
			EndIf
		Endif
		lDelCNC := .T. 

		If Empty(nPosPlan)


			If cEspCtr == "1"
				lDelCNC := aScan(aItFor,{|x| x[nPosFNov]+x[nPosLNov] == CNC->(CNC_CODIGO+CNC_LOJA)}) == 0
			Else
				lDelCNC := aScan(aItFor,{|x| x[nPosCNov]+x[nPosLCNov] == CNC->(CNC_CLIENT+CNC_LOJACL)}) == 0
			Endif
		Else


			CNA->(dbSeek(xFilial("CNA")+cContra+cRevisa))
			While !CNA->(EOF()) .And.  CNA->(CNA_FILIAL+CNA_CONTRA+CNA_REVISA) == xFilial("CNA")+cContra+cRevisa

				If (cEspCtr == "1" .And.  CNA->(CNA_FORNEC+CNA_LJFORN) == CNC->(CNC_CODIGO+CNC_LOJA)) .Or.  (cEspCtr == "2" .And.  CNA->(CNA_CLIENT+CNA_LOJACL) == CNC->(CNC_CLIENT+CNC_LOJACL))

					lDelCNC := .F. 
					Exit
				EndIf

				CNA->(dbSkip())
			End
		EndIf


		If lDelCNC
			RecLock("CNC", .F. )
				CNC->(dbDelete())
			CNC->(MsUnLock())
		EndIf

		CNC->(dbSkip())
	End
EndIf

Return(lRet)














Function CN140RevCNC(cContra,cRevisa,cNRevisa)
Local aArea		:= GetArea()
Local nX		:= 0
Local nY		:= 0
Local aFornece	:= {}

dbSelectArea("CNC")
dbSetOrder(1)


If lRevisad .And.  nRevRtp == 2
	While dbSeek(xFilial("CNC")+cContra+cNRevisa)
		RecLock("CNC", .F. )
			dbDelete()
		MsUnLock()
	End
EndIf

If nRevRtp # 1 .And.  CNC->(FieldPos("CNC_REVISA")) > 0

	If dbSeek(xFilial("CNC")+cContra+cRevisa)
		While !EOF() .And.  CNC_FILIAL+CNC_NUMERO+CNC_REVISA == xFilial("CNC")+cContra+cRevisa
			aAdd(aFornece,Array(FCount()))
			For nX := 1 to FCount()
				aTail(aFornece)[nX] := FieldGet(nX)
			next
			dbSkip()
		Enddo
	Endif


	For nX := 1 to Len(aFornece)
		RecLock("CNC", .T. )
		For nY := 1 to Len(aFornece[nX])
			If FieldName(nY) == "CNC_REVISA"
				FieldPut(nY,cNRevisa)
			Else
				FieldPut(nY,aFornece[nX,nY])
			EndIf
		next
		MsUnlock()
	next
EndIf

RestArea(aArea)
Return














Function CN140Excl(cAlias,nReg,nOpc)
Local lRet     := .T. 
Local cContra  := CN9->CN9_NUMERO
Local cRevisao := CN9->CN9_REVISA
Local cRevAnt  := NIL

PRIVATE nRevRtp := 3
PRIVATE lFisico := (CN1->(FieldPos("CN1_CROFIS")) > 0 .And.  Posicione("CN1",1,xFilial("CN1")+CN9->CN9_TPCTO,"CN1_CROFIS") == "1")
PRIVATE lContab := Posicione("CN1",1,xFilial("CN1")+CN9->CN9_TPCTO,"CN1_CROCTB") == "1"

If CN9->CN9_SITUAC # "09"
	Aviso("Atenção","Somente revisões em andamento podem ser excluídas.",{"Ok"})
	lRet := .F. 
EndIf

If lRet .And.  CN240VldUsr(CN9->CN9_NUMERO,"029", .T. ) .And.  Iif(FindFunction("APMsgYesNo"), APMsgYesNo(If( cPaisLoc $ "ANG|PTG", "Confirmar exclusão da revisão?", "Confirma exclusão da revisão?" ),), (cMsgYesNo:="MsgYesNo", &cMsgYesNo.(If( cPaisLoc $ "ANG|PTG", "Confirmar exclusão da revisão?", "Confirma exclusão da revisão?" ),)))
	dbSelectArea("CN9")
	dbSetOrder(8)
	dbSeek(xFilial("CN9")+cRevisao)
	While !EOF() .And.  CN9_FILIAL+CN9_REVATU == xFilial("CN9")+cRevisao
		If CN9_NUMERO == cContra
			cRevAnt := CN9_REVISA
			Exit
		EndIf
		dbSkip()
	End
	If cRevAnt # NIL
		CN140DelRev(cContra,cRevAnt,cRevisao)
	EndIf
EndIf

Return














Static Function CN140VdRea(dDtReaj)
Local lRet := .T. 

If dDtReaj > dDataBase
	Aviso("Atenção",STR0155,{"OK"})
	lRet := .F. 
EndIf

Return lRet















Function Cn140VldGCP(cContra,cRevisa,dFContra)
Local aArea		:= GetArea()
Local cLei		:= "X"
local cPrazo		:= "X"
Local lRet 		:= .T. 

If !Empty(CN9->CN9_CODED) .And.  AliasInDic("CO0") .And.  CO1->(FieldPos("CO1_REVISA")) > 0
















__execSql("TMPCO1"," SELECT CN9.CN9_DTINIC, CO0.CO0_LEI FROM  "+RetSqlName('CN9')+" CN9 JOIN  "+RetSqlName('CO1')+" CO1 ON CO1.D_E_L_E_T_= ' ' AND CO1.CO1_FILIAL =  '" +xFilial('CO1')+"'  AND CO1.CO1_CODEDT = CN9.CN9_CODED AND CO1.CO1_NUMPRO = CN9.CN9_NUMPR AND CO1.CO1_REVISA = (SELECT MAX(CO1_2.CO1_REVISA) FROM  "+RetSqlName('CO1')+" CO1_2 WHERE CO1_2.CO1_CODEDT = CO1.CO1_CODEDT AND CO1_2.CO1_NUMPRO = CO1.CO1_NUMPRO) JOIN  "+RetSqlName('CO0')+" CO0 ON CO0.D_E_L_E_T_= ' ' AND CO0.CO0_FILIAL =  '" +xFilial('CO0')+"'  AND CO0.CO0_REGRA = CO1.CO1_REGRA WHERE CN9.D_E_L_E_T_= ' ' AND CN9.CN9_NUMERO =  "+___SQLGetValue(CCONTRA)+" AND CN9.CN9_REVISA =  "+___SQLGetValue(CREVISA),{},.F.)

	Do Case
		Case TMPCO1->CO0_LEI  == "1"
		Case TMPCO1->CO0_LEI  == "2"
			If dFContra > (TMPCO1->CN9_DTINIC + 1826)
				cPrazo := "60 Meses"
				cLei	:= "RLC"
				lRet	:= .F. 
			EndIf
		Case TMPCO1->CO0_LEI  == "3"
	EndCase

	If !lRet
		Help("GCP",1,"MAXPRAZO",,STR0161 +cPrazo +STR0162 +cLei +".",1,1)
	EndIf

	TMPCO1->(dbCloseArea())
	RestArea(aArea)
EndIf

Return lRet